(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/assign"), __esModule: true };
},{"core-js/library/fn/object/assign":12}],2:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };
},{"core-js/library/fn/object/create":13}],3:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/define-property"), __esModule: true };
},{"core-js/library/fn/object/define-property":14}],4:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/get-own-property-descriptor"), __esModule: true };
},{"core-js/library/fn/object/get-own-property-descriptor":15}],5:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/get-own-property-names"), __esModule: true };
},{"core-js/library/fn/object/get-own-property-names":16}],6:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };
},{"core-js/library/fn/object/set-prototype-of":17}],7:[function(require,module,exports){
"use strict";

exports["default"] = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

exports.__esModule = true;
},{}],8:[function(require,module,exports){
"use strict";

var _Object$getOwnPropertyNames = require("babel-runtime/core-js/object/get-own-property-names")["default"];

var _Object$getOwnPropertyDescriptor = require("babel-runtime/core-js/object/get-own-property-descriptor")["default"];

var _Object$defineProperty = require("babel-runtime/core-js/object/define-property")["default"];

exports["default"] = function (obj, defaults) {
  var keys = _Object$getOwnPropertyNames(defaults);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];

    var value = _Object$getOwnPropertyDescriptor(defaults, key);

    if (value && value.configurable && obj[key] === undefined) {
      _Object$defineProperty(obj, key, value);
    }
  }

  return obj;
};

exports.__esModule = true;
},{"babel-runtime/core-js/object/define-property":3,"babel-runtime/core-js/object/get-own-property-descriptor":4,"babel-runtime/core-js/object/get-own-property-names":5}],9:[function(require,module,exports){
"use strict";

var _Object$create = require("babel-runtime/core-js/object/create")["default"];

var _Object$setPrototypeOf = require("babel-runtime/core-js/object/set-prototype-of")["default"];

exports["default"] = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = _Object$create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _Object$setPrototypeOf ? _Object$setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

exports.__esModule = true;
},{"babel-runtime/core-js/object/create":2,"babel-runtime/core-js/object/set-prototype-of":6}],10:[function(require,module,exports){
"use strict";

exports["default"] = function (obj, defaults) {
  var newObj = defaults({}, obj);
  delete newObj["default"];
  return newObj;
};

exports.__esModule = true;
},{}],11:[function(require,module,exports){
"use strict";

exports["default"] = function (obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
};

exports.__esModule = true;
},{}],12:[function(require,module,exports){
require('../../modules/es6.object.assign');
module.exports = require('../../modules/$.core').Object.assign;
},{"../../modules/$.core":22,"../../modules/es6.object.assign":34}],13:[function(require,module,exports){
var $ = require('../../modules/$');
module.exports = function create(P, D){
  return $.create(P, D);
};
},{"../../modules/$":31}],14:[function(require,module,exports){
var $ = require('../../modules/$');
module.exports = function defineProperty(it, key, desc){
  return $.setDesc(it, key, desc);
};
},{"../../modules/$":31}],15:[function(require,module,exports){
var $ = require('../../modules/$');
require('../../modules/es6.object.statics-accept-primitives');
module.exports = function getOwnPropertyDescriptor(it, key){
  return $.getDesc(it, key);
};
},{"../../modules/$":31,"../../modules/es6.object.statics-accept-primitives":36}],16:[function(require,module,exports){
var $ = require('../../modules/$');
require('../../modules/es6.object.statics-accept-primitives');
module.exports = function getOwnPropertyNames(it){
  return $.getNames(it);
};
},{"../../modules/$":31,"../../modules/es6.object.statics-accept-primitives":36}],17:[function(require,module,exports){
require('../../modules/es6.object.set-prototype-of');
module.exports = require('../../modules/$.core').Object.setPrototypeOf;
},{"../../modules/$.core":22,"../../modules/es6.object.set-prototype-of":35}],18:[function(require,module,exports){
module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};
},{}],19:[function(require,module,exports){
var isObject = require('./$.is-object');
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};
},{"./$.is-object":30}],20:[function(require,module,exports){
var toObject  = require('./$.to-object')
  , ES5Object = require('./$.es5-object')
  , enumKeys  = require('./$.enum-keys');
// 19.1.2.1 Object.assign(target, source, ...)
/* eslint-disable no-unused-vars */
module.exports = Object.assign || function assign(target, source){
/* eslint-enable no-unused-vars */
  var T = toObject(target, true)
    , l = arguments.length
    , i = 1;
  while(l > i){
    var S      = ES5Object(arguments[i++])
      , keys   = enumKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)T[key = keys[j++]] = S[key];
  }
  return T;
};
},{"./$.enum-keys":26,"./$.es5-object":27,"./$.to-object":33}],21:[function(require,module,exports){
var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};
},{}],22:[function(require,module,exports){
var core = module.exports = {};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],23:[function(require,module,exports){
// Optional / simple context binding
var aFunction = require('./$.a-function');
module.exports = function(fn, that, length){
  aFunction(fn);
  if(~length && that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  } return function(/* ...args */){
      return fn.apply(that, arguments);
    };
};
},{"./$.a-function":18}],24:[function(require,module,exports){
var global    = require('./$.global')
  , core      = require('./$.core')
  , PROTOTYPE = 'prototype';
function ctx(fn, that){
  return function(){
    return fn.apply(that, arguments);
  };
}
// type bitmap
$def.F = 1;  // forced
$def.G = 2;  // global
$def.S = 4;  // static
$def.P = 8;  // proto
$def.B = 16; // bind
$def.W = 32; // wrap
function $def(type, name, source){
  var key, own, out, exp
    , isGlobal = type & $def.G
    , isProto  = type & $def.P
    , target   = isGlobal ? global : type & $def.S
        ? global[name] : (global[name] || {})[PROTOTYPE]
    , exports  = isGlobal ? core : core[name] || (core[name] = {});
  if(isGlobal)source = name;
  for(key in source){
    // contains in native
    own = !(type & $def.F) && target && key in target;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    if(isGlobal && typeof target[key] != 'function')exp = source[key];
    // bind timers to global for call from export context
    else if(type & $def.B && own)exp = ctx(out, global);
    // wrap global constructors for prevent change them in library
    else if(type & $def.W && target[key] == out)!function(C){
      exp = function(param){
        return this instanceof C ? new C(param) : C(param);
      };
      exp[PROTOTYPE] = C[PROTOTYPE];
    }(out);
    else exp = isProto && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export
    exports[key] = exp;
    if(isProto)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
  }
}
module.exports = $def;
},{"./$.core":22,"./$.global":29}],25:[function(require,module,exports){
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};
},{}],26:[function(require,module,exports){
var $ = require('./$');
module.exports = function(it){
  var keys       = $.getKeys(it)
    , isEnum     = $.isEnum
    , getSymbols = $.getSymbols;
  if(getSymbols)for(var symbols = getSymbols(it), i = 0, key; symbols.length > i; ){
    if(isEnum.call(it, key = symbols[i++]))keys.push(key);
  }
  return keys;
};
},{"./$":31}],27:[function(require,module,exports){
// fallback for not array-like ES3 strings
var cof     = require('./$.cof')
  , $Object = Object;
module.exports = 0 in $Object('z') ? $Object : function(it){
  return cof(it) == 'String' ? it.split('') : $Object(it);
};
},{"./$.cof":21}],28:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toString = {}.toString
  , toObject = require('./$.to-object')
  , getNames = require('./$').getNames;

var windowNames = typeof window == 'object' && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

function getWindowNames(it){
  try {
    return getNames(it);
  } catch(e){
    return windowNames.slice();
  }
}

module.exports.get = function getOwnPropertyNames(it){
  if(windowNames && toString.call(it) == '[object Window]')return getWindowNames(it);
  return getNames(toObject(it));
};
},{"./$":31,"./$.to-object":33}],29:[function(require,module,exports){
var global = typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
module.exports = global;
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],30:[function(require,module,exports){
// http://jsperf.com/core-js-isobject
module.exports = function(it){
  return it !== null && (typeof it == 'object' || typeof it == 'function');
};
},{}],31:[function(require,module,exports){
var $Object = Object;
module.exports = {
  create:     $Object.create,
  getProto:   $Object.getPrototypeOf,
  isEnum:     {}.propertyIsEnumerable,
  getDesc:    $Object.getOwnPropertyDescriptor,
  setDesc:    $Object.defineProperty,
  setDescs:   $Object.defineProperties,
  getKeys:    $Object.keys,
  getNames:   $Object.getOwnPropertyNames,
  getSymbols: $Object.getOwnPropertySymbols,
  each:       [].forEach
};
},{}],32:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var getDesc  = require('./$').getDesc
  , isObject = require('./$.is-object')
  , anObject = require('./$.an-object');
function check(O, proto){
  anObject(O);
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
}
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} // eslint-disable-line
    ? function(buggy, set){
        try {
          set = require('./$.ctx')(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
          set({}, []);
        } catch(e){ buggy = true; }
        return function setPrototypeOf(O, proto){
          check(O, proto);
          if(buggy)O.__proto__ = proto;
          else set(O, proto);
          return O;
        };
      }()
    : undefined),
  check: check
};
},{"./$":31,"./$.an-object":19,"./$.ctx":23,"./$.is-object":30}],33:[function(require,module,exports){
var ES5Object = require('./$.es5-object')
  , defined   = require('./$.defined');
module.exports = function(it, realString){
  return (realString ? Object : ES5Object)(defined(it));
};
},{"./$.defined":25,"./$.es5-object":27}],34:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $def = require('./$.def');
$def($def.S, 'Object', {assign: require('./$.assign')});
},{"./$.assign":20,"./$.def":24}],35:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $def = require('./$.def');
$def($def.S, 'Object', {setPrototypeOf: require('./$.set-proto').set});
},{"./$.def":24,"./$.set-proto":32}],36:[function(require,module,exports){
var $        = require('./$')
  , core     = require('./$.core')
  , $def     = require('./$.def')
  , toObject = require('./$.to-object')
  , isObject = require('./$.is-object');
$.each.call(('freeze,seal,preventExtensions,isFrozen,isSealed,isExtensible,' +
  'getOwnPropertyDescriptor,getPrototypeOf,keys,getOwnPropertyNames').split(',')
, function(KEY, ID){
  var fn     = (core.Object || {})[KEY] || Object[KEY]
    , forced = 0
    , method = {};
  method[KEY] = ID == 0 ? function freeze(it){
    return isObject(it) ? fn(it) : it;
  } : ID == 1 ? function seal(it){
    return isObject(it) ? fn(it) : it;
  } : ID == 2 ? function preventExtensions(it){
    return isObject(it) ? fn(it) : it;
  } : ID == 3 ? function isFrozen(it){
    return isObject(it) ? fn(it) : true;
  } : ID == 4 ? function isSealed(it){
    return isObject(it) ? fn(it) : true;
  } : ID == 5 ? function isExtensible(it){
    return isObject(it) ? fn(it) : false;
  } : ID == 6 ? function getOwnPropertyDescriptor(it, key){
    return fn(toObject(it), key);
  } : ID == 7 ? function getPrototypeOf(it){
    return fn(toObject(it, true));
  } : ID == 8 ? function keys(it){
    return fn(toObject(it));
  } : require('./$.get-names').get;
  try {
    fn('z');
  } catch(e){
    forced = 1;
  }
  $def($def.S + $def.F * forced, 'Object', method);
});
},{"./$":31,"./$.core":22,"./$.def":24,"./$.get-names":28,"./$.is-object":30,"./$.to-object":33}],37:[function(require,module,exports){
/*
* Copyright (c) 2006-2007 Erin Catto http://www.gphysics.com
*
* This software is provided 'as-is', without any express or implied
* warranty.  In no event will the authors be held liable for any damages
* arising from the use of this software.
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely, subject to the following restrictions:
* 1. The origin of this software must not be misrepresented; you must not
* claim that you wrote the original software. If you use this software
* in a product, an acknowledgment in the product documentation would be
* appreciated but is not required.
* 2. Altered source versions must be plainly marked as such, and must not be
* misrepresented as being the original software.
* 3. This notice may not be removed or altered from any source distribution.
*/
"use strict"

var Box2D = {};

(function (a2j, undefined) {
   
   function emptyFn() {};
   a2j.inherit = function(cls, base) {
      var tmpCtr = cls;
      emptyFn.prototype = base.prototype;
      cls.prototype = new emptyFn;
      cls.prototype.constructor = tmpCtr;
   };
   
   a2j.generateCallback = function generateCallback(context, cb) {
      return function () {
         cb.apply(context, arguments);
      };
   };
   
   a2j.NVector = function NVector(length) {
      if (length === undefined) length = 0;
      var tmp = new Array(length || 0);
      for (var i = 0; i < length; ++i)
      tmp[i] = 0;
      return tmp;
   };
   
   a2j.is = function is(o1, o2) {
      if (o1 === null) return false;
      if ((o2 instanceof Function) && (o1 instanceof o2)) return true;
      if ((o1.constructor.__implements != undefined) && (o1.constructor.__implements[o2])) return true;
      return false;
   };
   
   a2j.parseUInt = function(v) {
      return Math.abs(parseInt(v));
   }
   
})(Box2D);

//#TODO remove assignments from global namespace
var Vector = Array;
var Vector_a2j_Number = Box2D.NVector;
//package structure
if (typeof(Box2D) === "undefined") Box2D = {};
if (typeof(Box2D.Collision) === "undefined") Box2D.Collision = {};
if (typeof(Box2D.Collision.Shapes) === "undefined") Box2D.Collision.Shapes = {};
if (typeof(Box2D.Common) === "undefined") Box2D.Common = {};
if (typeof(Box2D.Common.Math) === "undefined") Box2D.Common.Math = {};
if (typeof(Box2D.Dynamics) === "undefined") Box2D.Dynamics = {};
if (typeof(Box2D.Dynamics.Contacts) === "undefined") Box2D.Dynamics.Contacts = {};
if (typeof(Box2D.Dynamics.Controllers) === "undefined") Box2D.Dynamics.Controllers = {};
if (typeof(Box2D.Dynamics.Joints) === "undefined") Box2D.Dynamics.Joints = {};
//pre-definitions
(function () {
   Box2D.Collision.IBroadPhase = 'Box2D.Collision.IBroadPhase';

   function b2AABB() {
      b2AABB.b2AABB.apply(this, arguments);
   };
   Box2D.Collision.b2AABB = b2AABB;

   function b2Bound() {
      b2Bound.b2Bound.apply(this, arguments);
   };
   Box2D.Collision.b2Bound = b2Bound;

   function b2BoundValues() {
      b2BoundValues.b2BoundValues.apply(this, arguments);
      if (this.constructor === b2BoundValues) this.b2BoundValues.apply(this, arguments);
   };
   Box2D.Collision.b2BoundValues = b2BoundValues;

   function b2Collision() {
      b2Collision.b2Collision.apply(this, arguments);
   };
   Box2D.Collision.b2Collision = b2Collision;

   function b2ContactID() {
      b2ContactID.b2ContactID.apply(this, arguments);
      if (this.constructor === b2ContactID) this.b2ContactID.apply(this, arguments);
   };
   Box2D.Collision.b2ContactID = b2ContactID;

   function b2ContactPoint() {
      b2ContactPoint.b2ContactPoint.apply(this, arguments);
   };
   Box2D.Collision.b2ContactPoint = b2ContactPoint;

   function b2Distance() {
      b2Distance.b2Distance.apply(this, arguments);
   };
   Box2D.Collision.b2Distance = b2Distance;

   function b2DistanceInput() {
      b2DistanceInput.b2DistanceInput.apply(this, arguments);
   };
   Box2D.Collision.b2DistanceInput = b2DistanceInput;

   function b2DistanceOutput() {
      b2DistanceOutput.b2DistanceOutput.apply(this, arguments);
   };
   Box2D.Collision.b2DistanceOutput = b2DistanceOutput;

   function b2DistanceProxy() {
      b2DistanceProxy.b2DistanceProxy.apply(this, arguments);
   };
   Box2D.Collision.b2DistanceProxy = b2DistanceProxy;

   function b2DynamicTree() {
      b2DynamicTree.b2DynamicTree.apply(this, arguments);
      if (this.constructor === b2DynamicTree) this.b2DynamicTree.apply(this, arguments);
   };
   Box2D.Collision.b2DynamicTree = b2DynamicTree;

   function b2DynamicTreeBroadPhase() {
      b2DynamicTreeBroadPhase.b2DynamicTreeBroadPhase.apply(this, arguments);
   };
   Box2D.Collision.b2DynamicTreeBroadPhase = b2DynamicTreeBroadPhase;

   function b2DynamicTreeNode() {
      b2DynamicTreeNode.b2DynamicTreeNode.apply(this, arguments);
   };
   Box2D.Collision.b2DynamicTreeNode = b2DynamicTreeNode;

   function b2DynamicTreePair() {
      b2DynamicTreePair.b2DynamicTreePair.apply(this, arguments);
   };
   Box2D.Collision.b2DynamicTreePair = b2DynamicTreePair;

   function b2Manifold() {
      b2Manifold.b2Manifold.apply(this, arguments);
      if (this.constructor === b2Manifold) this.b2Manifold.apply(this, arguments);
   };
   Box2D.Collision.b2Manifold = b2Manifold;

   function b2ManifoldPoint() {
      b2ManifoldPoint.b2ManifoldPoint.apply(this, arguments);
      if (this.constructor === b2ManifoldPoint) this.b2ManifoldPoint.apply(this, arguments);
   };
   Box2D.Collision.b2ManifoldPoint = b2ManifoldPoint;

   function b2Point() {
      b2Point.b2Point.apply(this, arguments);
   };
   Box2D.Collision.b2Point = b2Point;

   function b2RayCastInput() {
      b2RayCastInput.b2RayCastInput.apply(this, arguments);
      if (this.constructor === b2RayCastInput) this.b2RayCastInput.apply(this, arguments);
   };
   Box2D.Collision.b2RayCastInput = b2RayCastInput;

   function b2RayCastOutput() {
      b2RayCastOutput.b2RayCastOutput.apply(this, arguments);
   };
   Box2D.Collision.b2RayCastOutput = b2RayCastOutput;

   function b2Segment() {
      b2Segment.b2Segment.apply(this, arguments);
   };
   Box2D.Collision.b2Segment = b2Segment;

   function b2SeparationFunction() {
      b2SeparationFunction.b2SeparationFunction.apply(this, arguments);
   };
   Box2D.Collision.b2SeparationFunction = b2SeparationFunction;

   function b2Simplex() {
      b2Simplex.b2Simplex.apply(this, arguments);
      if (this.constructor === b2Simplex) this.b2Simplex.apply(this, arguments);
   };
   Box2D.Collision.b2Simplex = b2Simplex;

   function b2SimplexCache() {
      b2SimplexCache.b2SimplexCache.apply(this, arguments);
   };
   Box2D.Collision.b2SimplexCache = b2SimplexCache;

   function b2SimplexVertex() {
      b2SimplexVertex.b2SimplexVertex.apply(this, arguments);
   };
   Box2D.Collision.b2SimplexVertex = b2SimplexVertex;

   function b2TimeOfImpact() {
      b2TimeOfImpact.b2TimeOfImpact.apply(this, arguments);
   };
   Box2D.Collision.b2TimeOfImpact = b2TimeOfImpact;

   function b2TOIInput() {
      b2TOIInput.b2TOIInput.apply(this, arguments);
   };
   Box2D.Collision.b2TOIInput = b2TOIInput;

   function b2WorldManifold() {
      b2WorldManifold.b2WorldManifold.apply(this, arguments);
      if (this.constructor === b2WorldManifold) this.b2WorldManifold.apply(this, arguments);
   };
   Box2D.Collision.b2WorldManifold = b2WorldManifold;

   function ClipVertex() {
      ClipVertex.ClipVertex.apply(this, arguments);
   };
   Box2D.Collision.ClipVertex = ClipVertex;

   function Features() {
      Features.Features.apply(this, arguments);
   };
   Box2D.Collision.Features = Features;

   function b2CircleShape() {
      b2CircleShape.b2CircleShape.apply(this, arguments);
      if (this.constructor === b2CircleShape) this.b2CircleShape.apply(this, arguments);
   };
   Box2D.Collision.Shapes.b2CircleShape = b2CircleShape;

   function b2EdgeChainDef() {
      b2EdgeChainDef.b2EdgeChainDef.apply(this, arguments);
      if (this.constructor === b2EdgeChainDef) this.b2EdgeChainDef.apply(this, arguments);
   };
   Box2D.Collision.Shapes.b2EdgeChainDef = b2EdgeChainDef;

   function b2EdgeShape() {
      b2EdgeShape.b2EdgeShape.apply(this, arguments);
      if (this.constructor === b2EdgeShape) this.b2EdgeShape.apply(this, arguments);
   };
   Box2D.Collision.Shapes.b2EdgeShape = b2EdgeShape;

   function b2MassData() {
      b2MassData.b2MassData.apply(this, arguments);
   };
   Box2D.Collision.Shapes.b2MassData = b2MassData;

   function b2PolygonShape() {
      b2PolygonShape.b2PolygonShape.apply(this, arguments);
      if (this.constructor === b2PolygonShape) this.b2PolygonShape.apply(this, arguments);
   };
   Box2D.Collision.Shapes.b2PolygonShape = b2PolygonShape;

   function b2Shape() {
      b2Shape.b2Shape.apply(this, arguments);
      if (this.constructor === b2Shape) this.b2Shape.apply(this, arguments);
   };
   Box2D.Collision.Shapes.b2Shape = b2Shape;
   Box2D.Common.b2internal = 'Box2D.Common.b2internal';

   function b2Color() {
      b2Color.b2Color.apply(this, arguments);
      if (this.constructor === b2Color) this.b2Color.apply(this, arguments);
   };
   Box2D.Common.b2Color = b2Color;

   function b2Settings() {
      b2Settings.b2Settings.apply(this, arguments);
   };
   Box2D.Common.b2Settings = b2Settings;

   function b2Mat22() {
      b2Mat22.b2Mat22.apply(this, arguments);
      if (this.constructor === b2Mat22) this.b2Mat22.apply(this, arguments);
   };
   Box2D.Common.Math.b2Mat22 = b2Mat22;

   function b2Mat33() {
      b2Mat33.b2Mat33.apply(this, arguments);
      if (this.constructor === b2Mat33) this.b2Mat33.apply(this, arguments);
   };
   Box2D.Common.Math.b2Mat33 = b2Mat33;

   function b2Math() {
      b2Math.b2Math.apply(this, arguments);
   };
   Box2D.Common.Math.b2Math = b2Math;

   function b2Sweep() {
      b2Sweep.b2Sweep.apply(this, arguments);
   };
   Box2D.Common.Math.b2Sweep = b2Sweep;

   function b2Transform() {
      b2Transform.b2Transform.apply(this, arguments);
      if (this.constructor === b2Transform) this.b2Transform.apply(this, arguments);
   };
   Box2D.Common.Math.b2Transform = b2Transform;

   function b2Vec2() {
      b2Vec2.b2Vec2.apply(this, arguments);
      if (this.constructor === b2Vec2) this.b2Vec2.apply(this, arguments);
   };
   Box2D.Common.Math.b2Vec2 = b2Vec2;

   function b2Vec3() {
      b2Vec3.b2Vec3.apply(this, arguments);
      if (this.constructor === b2Vec3) this.b2Vec3.apply(this, arguments);
   };
   Box2D.Common.Math.b2Vec3 = b2Vec3;

   function b2Body() {
      b2Body.b2Body.apply(this, arguments);
      if (this.constructor === b2Body) this.b2Body.apply(this, arguments);
   };
   Box2D.Dynamics.b2Body = b2Body;

   function b2BodyDef() {
      b2BodyDef.b2BodyDef.apply(this, arguments);
      if (this.constructor === b2BodyDef) this.b2BodyDef.apply(this, arguments);
   };
   Box2D.Dynamics.b2BodyDef = b2BodyDef;

   function b2ContactFilter() {
      b2ContactFilter.b2ContactFilter.apply(this, arguments);
   };
   Box2D.Dynamics.b2ContactFilter = b2ContactFilter;

   function b2ContactImpulse() {
      b2ContactImpulse.b2ContactImpulse.apply(this, arguments);
   };
   Box2D.Dynamics.b2ContactImpulse = b2ContactImpulse;

   function b2ContactListener() {
      b2ContactListener.b2ContactListener.apply(this, arguments);
   };
   Box2D.Dynamics.b2ContactListener = b2ContactListener;

   function b2ContactManager() {
      b2ContactManager.b2ContactManager.apply(this, arguments);
      if (this.constructor === b2ContactManager) this.b2ContactManager.apply(this, arguments);
   };
   Box2D.Dynamics.b2ContactManager = b2ContactManager;

   function b2DebugDraw() {
      b2DebugDraw.b2DebugDraw.apply(this, arguments);
      if (this.constructor === b2DebugDraw) this.b2DebugDraw.apply(this, arguments);
   };
   Box2D.Dynamics.b2DebugDraw = b2DebugDraw;

   function b2DestructionListener() {
      b2DestructionListener.b2DestructionListener.apply(this, arguments);
   };
   Box2D.Dynamics.b2DestructionListener = b2DestructionListener;

   function b2FilterData() {
      b2FilterData.b2FilterData.apply(this, arguments);
   };
   Box2D.Dynamics.b2FilterData = b2FilterData;

   function b2Fixture() {
      b2Fixture.b2Fixture.apply(this, arguments);
      if (this.constructor === b2Fixture) this.b2Fixture.apply(this, arguments);
   };
   Box2D.Dynamics.b2Fixture = b2Fixture;

   function b2FixtureDef() {
      b2FixtureDef.b2FixtureDef.apply(this, arguments);
      if (this.constructor === b2FixtureDef) this.b2FixtureDef.apply(this, arguments);
   };
   Box2D.Dynamics.b2FixtureDef = b2FixtureDef;

   function b2Island() {
      b2Island.b2Island.apply(this, arguments);
      if (this.constructor === b2Island) this.b2Island.apply(this, arguments);
   };
   Box2D.Dynamics.b2Island = b2Island;

   function b2TimeStep() {
      b2TimeStep.b2TimeStep.apply(this, arguments);
   };
   Box2D.Dynamics.b2TimeStep = b2TimeStep;

   function b2World() {
      b2World.b2World.apply(this, arguments);
      if (this.constructor === b2World) this.b2World.apply(this, arguments);
   };
   Box2D.Dynamics.b2World = b2World;

   function b2CircleContact() {
      b2CircleContact.b2CircleContact.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2CircleContact = b2CircleContact;

   function b2Contact() {
      b2Contact.b2Contact.apply(this, arguments);
      if (this.constructor === b2Contact) this.b2Contact.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2Contact = b2Contact;

   function b2ContactConstraint() {
      b2ContactConstraint.b2ContactConstraint.apply(this, arguments);
      if (this.constructor === b2ContactConstraint) this.b2ContactConstraint.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2ContactConstraint = b2ContactConstraint;

   function b2ContactConstraintPoint() {
      b2ContactConstraintPoint.b2ContactConstraintPoint.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2ContactConstraintPoint = b2ContactConstraintPoint;

   function b2ContactEdge() {
      b2ContactEdge.b2ContactEdge.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2ContactEdge = b2ContactEdge;

   function b2ContactFactory() {
      b2ContactFactory.b2ContactFactory.apply(this, arguments);
      if (this.constructor === b2ContactFactory) this.b2ContactFactory.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2ContactFactory = b2ContactFactory;

   function b2ContactRegister() {
      b2ContactRegister.b2ContactRegister.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2ContactRegister = b2ContactRegister;

   function b2ContactResult() {
      b2ContactResult.b2ContactResult.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2ContactResult = b2ContactResult;

   function b2ContactSolver() {
      b2ContactSolver.b2ContactSolver.apply(this, arguments);
      if (this.constructor === b2ContactSolver) this.b2ContactSolver.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2ContactSolver = b2ContactSolver;

   function b2EdgeAndCircleContact() {
      b2EdgeAndCircleContact.b2EdgeAndCircleContact.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2EdgeAndCircleContact = b2EdgeAndCircleContact;

   function b2NullContact() {
      b2NullContact.b2NullContact.apply(this, arguments);
      if (this.constructor === b2NullContact) this.b2NullContact.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2NullContact = b2NullContact;

   function b2PolyAndCircleContact() {
      b2PolyAndCircleContact.b2PolyAndCircleContact.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2PolyAndCircleContact = b2PolyAndCircleContact;

   function b2PolyAndEdgeContact() {
      b2PolyAndEdgeContact.b2PolyAndEdgeContact.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2PolyAndEdgeContact = b2PolyAndEdgeContact;

   function b2PolygonContact() {
      b2PolygonContact.b2PolygonContact.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2PolygonContact = b2PolygonContact;

   function b2PositionSolverManifold() {
      b2PositionSolverManifold.b2PositionSolverManifold.apply(this, arguments);
      if (this.constructor === b2PositionSolverManifold) this.b2PositionSolverManifold.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2PositionSolverManifold = b2PositionSolverManifold;

   function b2BuoyancyController() {
      b2BuoyancyController.b2BuoyancyController.apply(this, arguments);
   };
   Box2D.Dynamics.Controllers.b2BuoyancyController = b2BuoyancyController;

   function b2ConstantAccelController() {
      b2ConstantAccelController.b2ConstantAccelController.apply(this, arguments);
   };
   Box2D.Dynamics.Controllers.b2ConstantAccelController = b2ConstantAccelController;

   function b2ConstantForceController() {
      b2ConstantForceController.b2ConstantForceController.apply(this, arguments);
   };
   Box2D.Dynamics.Controllers.b2ConstantForceController = b2ConstantForceController;

   function b2Controller() {
      b2Controller.b2Controller.apply(this, arguments);
   };
   Box2D.Dynamics.Controllers.b2Controller = b2Controller;

   function b2ControllerEdge() {
      b2ControllerEdge.b2ControllerEdge.apply(this, arguments);
   };
   Box2D.Dynamics.Controllers.b2ControllerEdge = b2ControllerEdge;

   function b2GravityController() {
      b2GravityController.b2GravityController.apply(this, arguments);
   };
   Box2D.Dynamics.Controllers.b2GravityController = b2GravityController;

   function b2TensorDampingController() {
      b2TensorDampingController.b2TensorDampingController.apply(this, arguments);
   };
   Box2D.Dynamics.Controllers.b2TensorDampingController = b2TensorDampingController;

   function b2DistanceJoint() {
      b2DistanceJoint.b2DistanceJoint.apply(this, arguments);
      if (this.constructor === b2DistanceJoint) this.b2DistanceJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2DistanceJoint = b2DistanceJoint;

   function b2DistanceJointDef() {
      b2DistanceJointDef.b2DistanceJointDef.apply(this, arguments);
      if (this.constructor === b2DistanceJointDef) this.b2DistanceJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2DistanceJointDef = b2DistanceJointDef;

   function b2FrictionJoint() {
      b2FrictionJoint.b2FrictionJoint.apply(this, arguments);
      if (this.constructor === b2FrictionJoint) this.b2FrictionJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2FrictionJoint = b2FrictionJoint;

   function b2FrictionJointDef() {
      b2FrictionJointDef.b2FrictionJointDef.apply(this, arguments);
      if (this.constructor === b2FrictionJointDef) this.b2FrictionJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2FrictionJointDef = b2FrictionJointDef;

   function b2GearJoint() {
      b2GearJoint.b2GearJoint.apply(this, arguments);
      if (this.constructor === b2GearJoint) this.b2GearJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2GearJoint = b2GearJoint;

   function b2GearJointDef() {
      b2GearJointDef.b2GearJointDef.apply(this, arguments);
      if (this.constructor === b2GearJointDef) this.b2GearJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2GearJointDef = b2GearJointDef;

   function b2Jacobian() {
      b2Jacobian.b2Jacobian.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2Jacobian = b2Jacobian;

   function b2Joint() {
      b2Joint.b2Joint.apply(this, arguments);
      if (this.constructor === b2Joint) this.b2Joint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2Joint = b2Joint;

   function b2JointDef() {
      b2JointDef.b2JointDef.apply(this, arguments);
      if (this.constructor === b2JointDef) this.b2JointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2JointDef = b2JointDef;

   function b2JointEdge() {
      b2JointEdge.b2JointEdge.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2JointEdge = b2JointEdge;

   function b2LineJoint() {
      b2LineJoint.b2LineJoint.apply(this, arguments);
      if (this.constructor === b2LineJoint) this.b2LineJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2LineJoint = b2LineJoint;

   function b2LineJointDef() {
      b2LineJointDef.b2LineJointDef.apply(this, arguments);
      if (this.constructor === b2LineJointDef) this.b2LineJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2LineJointDef = b2LineJointDef;

   function b2MouseJoint() {
      b2MouseJoint.b2MouseJoint.apply(this, arguments);
      if (this.constructor === b2MouseJoint) this.b2MouseJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2MouseJoint = b2MouseJoint;

   function b2MouseJointDef() {
      b2MouseJointDef.b2MouseJointDef.apply(this, arguments);
      if (this.constructor === b2MouseJointDef) this.b2MouseJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2MouseJointDef = b2MouseJointDef;

   function b2PrismaticJoint() {
      b2PrismaticJoint.b2PrismaticJoint.apply(this, arguments);
      if (this.constructor === b2PrismaticJoint) this.b2PrismaticJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2PrismaticJoint = b2PrismaticJoint;

   function b2PrismaticJointDef() {
      b2PrismaticJointDef.b2PrismaticJointDef.apply(this, arguments);
      if (this.constructor === b2PrismaticJointDef) this.b2PrismaticJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2PrismaticJointDef = b2PrismaticJointDef;

   function b2PulleyJoint() {
      b2PulleyJoint.b2PulleyJoint.apply(this, arguments);
      if (this.constructor === b2PulleyJoint) this.b2PulleyJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2PulleyJoint = b2PulleyJoint;

   function b2PulleyJointDef() {
      b2PulleyJointDef.b2PulleyJointDef.apply(this, arguments);
      if (this.constructor === b2PulleyJointDef) this.b2PulleyJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2PulleyJointDef = b2PulleyJointDef;

   function b2RevoluteJoint() {
      b2RevoluteJoint.b2RevoluteJoint.apply(this, arguments);
      if (this.constructor === b2RevoluteJoint) this.b2RevoluteJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2RevoluteJoint = b2RevoluteJoint;

   function b2RevoluteJointDef() {
      b2RevoluteJointDef.b2RevoluteJointDef.apply(this, arguments);
      if (this.constructor === b2RevoluteJointDef) this.b2RevoluteJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2RevoluteJointDef = b2RevoluteJointDef;

   function b2WeldJoint() {
      b2WeldJoint.b2WeldJoint.apply(this, arguments);
      if (this.constructor === b2WeldJoint) this.b2WeldJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2WeldJoint = b2WeldJoint;

   function b2WeldJointDef() {
      b2WeldJointDef.b2WeldJointDef.apply(this, arguments);
      if (this.constructor === b2WeldJointDef) this.b2WeldJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2WeldJointDef = b2WeldJointDef;
})(); //definitions
Box2D.postDefs = [];
(function () {
   var b2CircleShape = Box2D.Collision.Shapes.b2CircleShape,
      b2EdgeChainDef = Box2D.Collision.Shapes.b2EdgeChainDef,
      b2EdgeShape = Box2D.Collision.Shapes.b2EdgeShape,
      b2MassData = Box2D.Collision.Shapes.b2MassData,
      b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape,
      b2Shape = Box2D.Collision.Shapes.b2Shape,
      b2Color = Box2D.Common.b2Color,
      b2internal = Box2D.Common.b2internal,
      b2Settings = Box2D.Common.b2Settings,
      b2Mat22 = Box2D.Common.Math.b2Mat22,
      b2Mat33 = Box2D.Common.Math.b2Mat33,
      b2Math = Box2D.Common.Math.b2Math,
      b2Sweep = Box2D.Common.Math.b2Sweep,
      b2Transform = Box2D.Common.Math.b2Transform,
      b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2Vec3 = Box2D.Common.Math.b2Vec3,
      b2AABB = Box2D.Collision.b2AABB,
      b2Bound = Box2D.Collision.b2Bound,
      b2BoundValues = Box2D.Collision.b2BoundValues,
      b2Collision = Box2D.Collision.b2Collision,
      b2ContactID = Box2D.Collision.b2ContactID,
      b2ContactPoint = Box2D.Collision.b2ContactPoint,
      b2Distance = Box2D.Collision.b2Distance,
      b2DistanceInput = Box2D.Collision.b2DistanceInput,
      b2DistanceOutput = Box2D.Collision.b2DistanceOutput,
      b2DistanceProxy = Box2D.Collision.b2DistanceProxy,
      b2DynamicTree = Box2D.Collision.b2DynamicTree,
      b2DynamicTreeBroadPhase = Box2D.Collision.b2DynamicTreeBroadPhase,
      b2DynamicTreeNode = Box2D.Collision.b2DynamicTreeNode,
      b2DynamicTreePair = Box2D.Collision.b2DynamicTreePair,
      b2Manifold = Box2D.Collision.b2Manifold,
      b2ManifoldPoint = Box2D.Collision.b2ManifoldPoint,
      b2Point = Box2D.Collision.b2Point,
      b2RayCastInput = Box2D.Collision.b2RayCastInput,
      b2RayCastOutput = Box2D.Collision.b2RayCastOutput,
      b2Segment = Box2D.Collision.b2Segment,
      b2SeparationFunction = Box2D.Collision.b2SeparationFunction,
      b2Simplex = Box2D.Collision.b2Simplex,
      b2SimplexCache = Box2D.Collision.b2SimplexCache,
      b2SimplexVertex = Box2D.Collision.b2SimplexVertex,
      b2TimeOfImpact = Box2D.Collision.b2TimeOfImpact,
      b2TOIInput = Box2D.Collision.b2TOIInput,
      b2WorldManifold = Box2D.Collision.b2WorldManifold,
      ClipVertex = Box2D.Collision.ClipVertex,
      Features = Box2D.Collision.Features,
      IBroadPhase = Box2D.Collision.IBroadPhase;

   b2AABB.b2AABB = function () {
      this.lowerBound = new b2Vec2();
      this.upperBound = new b2Vec2();
   };
   b2AABB.prototype.IsValid = function () {
      var dX = this.upperBound.x - this.lowerBound.x;
      var dY = this.upperBound.y - this.lowerBound.y;
      var valid = dX >= 0.0 && dY >= 0.0;
      valid = valid && this.lowerBound.IsValid() && this.upperBound.IsValid();
      return valid;
   }
   b2AABB.prototype.GetCenter = function () {
      return new b2Vec2((this.lowerBound.x + this.upperBound.x) / 2, (this.lowerBound.y + this.upperBound.y) / 2);
   }
   b2AABB.prototype.GetExtents = function () {
      return new b2Vec2((this.upperBound.x - this.lowerBound.x) / 2, (this.upperBound.y - this.lowerBound.y) / 2);
   }
   b2AABB.prototype.Contains = function (aabb) {
      var result = true;
      result = result && this.lowerBound.x <= aabb.lowerBound.x;
      result = result && this.lowerBound.y <= aabb.lowerBound.y;
      result = result && aabb.upperBound.x <= this.upperBound.x;
      result = result && aabb.upperBound.y <= this.upperBound.y;
      return result;
   }
   b2AABB.prototype.RayCast = function (output, input) {
      var tmin = (-Number.MAX_VALUE);
      var tmax = Number.MAX_VALUE;
      var pX = input.p1.x;
      var pY = input.p1.y;
      var dX = input.p2.x - input.p1.x;
      var dY = input.p2.y - input.p1.y;
      var absDX = Math.abs(dX);
      var absDY = Math.abs(dY);
      var normal = output.normal;
      var inv_d = 0;
      var t1 = 0;
      var t2 = 0;
      var t3 = 0;
      var s = 0; {
         if (absDX < Number.MIN_VALUE) {
            if (pX < this.lowerBound.x || this.upperBound.x < pX) return false;
         }
         else {
            inv_d = 1.0 / dX;
            t1 = (this.lowerBound.x - pX) * inv_d;
            t2 = (this.upperBound.x - pX) * inv_d;
            s = (-1.0);
            if (t1 > t2) {
               t3 = t1;
               t1 = t2;
               t2 = t3;
               s = 1.0;
            }
            if (t1 > tmin) {
               normal.x = s;
               normal.y = 0;
               tmin = t1;
            }
            tmax = Math.min(tmax, t2);
            if (tmin > tmax) return false;
         }
      } {
         if (absDY < Number.MIN_VALUE) {
            if (pY < this.lowerBound.y || this.upperBound.y < pY) return false;
         }
         else {
            inv_d = 1.0 / dY;
            t1 = (this.lowerBound.y - pY) * inv_d;
            t2 = (this.upperBound.y - pY) * inv_d;
            s = (-1.0);
            if (t1 > t2) {
               t3 = t1;
               t1 = t2;
               t2 = t3;
               s = 1.0;
            }
            if (t1 > tmin) {
               normal.y = s;
               normal.x = 0;
               tmin = t1;
            }
            tmax = Math.min(tmax, t2);
            if (tmin > tmax) return false;
         }
      }
      output.fraction = tmin;
      return true;
   }
   b2AABB.prototype.TestOverlap = function (other) {
      var d1X = other.lowerBound.x - this.upperBound.x;
      var d1Y = other.lowerBound.y - this.upperBound.y;
      var d2X = this.lowerBound.x - other.upperBound.x;
      var d2Y = this.lowerBound.y - other.upperBound.y;
      if (d1X > 0.0 || d1Y > 0.0) return false;
      if (d2X > 0.0 || d2Y > 0.0) return false;
      return true;
   }
   b2AABB.Combine = function (aabb1, aabb2) {
      var aabb = new b2AABB();
      aabb.Combine(aabb1, aabb2);
      return aabb;
   }
   b2AABB.prototype.Combine = function (aabb1, aabb2) {
      this.lowerBound.x = Math.min(aabb1.lowerBound.x, aabb2.lowerBound.x);
      this.lowerBound.y = Math.min(aabb1.lowerBound.y, aabb2.lowerBound.y);
      this.upperBound.x = Math.max(aabb1.upperBound.x, aabb2.upperBound.x);
      this.upperBound.y = Math.max(aabb1.upperBound.y, aabb2.upperBound.y);
   }
   b2Bound.b2Bound = function () {};
   b2Bound.prototype.IsLower = function () {
      return (this.value & 1) == 0;
   }
   b2Bound.prototype.IsUpper = function () {
      return (this.value & 1) == 1;
   }
   b2Bound.prototype.Swap = function (b) {
      var tempValue = this.value;
      var tempProxy = this.proxy;
      var tempStabbingCount = this.stabbingCount;
      this.value = b.value;
      this.proxy = b.proxy;
      this.stabbingCount = b.stabbingCount;
      b.value = tempValue;
      b.proxy = tempProxy;
      b.stabbingCount = tempStabbingCount;
   }
   b2BoundValues.b2BoundValues = function () {};
   b2BoundValues.prototype.b2BoundValues = function () {
      this.lowerValues = new Vector_a2j_Number();
      this.lowerValues[0] = 0.0;
      this.lowerValues[1] = 0.0;
      this.upperValues = new Vector_a2j_Number();
      this.upperValues[0] = 0.0;
      this.upperValues[1] = 0.0;
   }
   b2Collision.b2Collision = function () {};
   b2Collision.ClipSegmentToLine = function (vOut, vIn, normal, offset) {
      if (offset === undefined) offset = 0;
      var cv;
      var numOut = 0;
      cv = vIn[0];
      var vIn0 = cv.v;
      cv = vIn[1];
      var vIn1 = cv.v;
      var distance0 = normal.x * vIn0.x + normal.y * vIn0.y - offset;
      var distance1 = normal.x * vIn1.x + normal.y * vIn1.y - offset;
      if (distance0 <= 0.0) vOut[numOut++].Set(vIn[0]);
      if (distance1 <= 0.0) vOut[numOut++].Set(vIn[1]);
      if (distance0 * distance1 < 0.0) {
         var interp = distance0 / (distance0 - distance1);
         cv = vOut[numOut];
         var tVec = cv.v;
         tVec.x = vIn0.x + interp * (vIn1.x - vIn0.x);
         tVec.y = vIn0.y + interp * (vIn1.y - vIn0.y);
         cv = vOut[numOut];
         var cv2;
         if (distance0 > 0.0) {
            cv2 = vIn[0];
            cv.id = cv2.id;
         }
         else {
            cv2 = vIn[1];
            cv.id = cv2.id;
         }++numOut;
      }
      return numOut;
   }
   b2Collision.EdgeSeparation = function (poly1, xf1, edge1, poly2, xf2) {
      if (edge1 === undefined) edge1 = 0;
      var count1 = parseInt(poly1.m_vertexCount);
      var vertices1 = poly1.m_vertices;
      var normals1 = poly1.m_normals;
      var count2 = parseInt(poly2.m_vertexCount);
      var vertices2 = poly2.m_vertices;
      var tMat;
      var tVec;
      tMat = xf1.R;
      tVec = normals1[edge1];
      var normal1WorldX = (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var normal1WorldY = (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      tMat = xf2.R;
      var normal1X = (tMat.col1.x * normal1WorldX + tMat.col1.y * normal1WorldY);
      var normal1Y = (tMat.col2.x * normal1WorldX + tMat.col2.y * normal1WorldY);
      var index = 0;
      var minDot = Number.MAX_VALUE;
      for (var i = 0; i < count2; ++i) {
         tVec = vertices2[i];
         var dot = tVec.x * normal1X + tVec.y * normal1Y;
         if (dot < minDot) {
            minDot = dot;
            index = i;
         }
      }
      tVec = vertices1[edge1];
      tMat = xf1.R;
      var v1X = xf1.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var v1Y = xf1.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      tVec = vertices2[index];
      tMat = xf2.R;
      var v2X = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var v2Y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      v2X -= v1X;
      v2Y -= v1Y;
      var separation = v2X * normal1WorldX + v2Y * normal1WorldY;
      return separation;
   }
   b2Collision.FindMaxSeparation = function (edgeIndex, poly1, xf1, poly2, xf2) {
      var count1 = parseInt(poly1.m_vertexCount);
      var normals1 = poly1.m_normals;
      var tVec;
      var tMat;
      tMat = xf2.R;
      tVec = poly2.m_centroid;
      var dX = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var dY = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      tMat = xf1.R;
      tVec = poly1.m_centroid;
      dX -= xf1.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      dY -= xf1.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      var dLocal1X = (dX * xf1.R.col1.x + dY * xf1.R.col1.y);
      var dLocal1Y = (dX * xf1.R.col2.x + dY * xf1.R.col2.y);
      var edge = 0;
      var maxDot = (-Number.MAX_VALUE);
      for (var i = 0; i < count1; ++i) {
         tVec = normals1[i];
         var dot = (tVec.x * dLocal1X + tVec.y * dLocal1Y);
         if (dot > maxDot) {
            maxDot = dot;
            edge = i;
         }
      }
      var s = b2Collision.EdgeSeparation(poly1, xf1, edge, poly2, xf2);
      var prevEdge = parseInt(edge - 1 >= 0 ? edge - 1 : count1 - 1);
      var sPrev = b2Collision.EdgeSeparation(poly1, xf1, prevEdge, poly2, xf2);
      var nextEdge = parseInt(edge + 1 < count1 ? edge + 1 : 0);
      var sNext = b2Collision.EdgeSeparation(poly1, xf1, nextEdge, poly2, xf2);
      var bestEdge = 0;
      var bestSeparation = 0;
      var increment = 0;
      if (sPrev > s && sPrev > sNext) {
         increment = (-1);
         bestEdge = prevEdge;
         bestSeparation = sPrev;
      }
      else if (sNext > s) {
         increment = 1;
         bestEdge = nextEdge;
         bestSeparation = sNext;
      }
      else {
         edgeIndex[0] = edge;
         return s;
      }
      while (true) {
         if (increment == (-1)) edge = bestEdge - 1 >= 0 ? bestEdge - 1 : count1 - 1;
         else edge = bestEdge + 1 < count1 ? bestEdge + 1 : 0;s = b2Collision.EdgeSeparation(poly1, xf1, edge, poly2, xf2);
         if (s > bestSeparation) {
            bestEdge = edge;
            bestSeparation = s;
         }
         else {
            break;
         }
      }
      edgeIndex[0] = bestEdge;
      return bestSeparation;
   }
   b2Collision.FindIncidentEdge = function (c, poly1, xf1, edge1, poly2, xf2) {
      if (edge1 === undefined) edge1 = 0;
      var count1 = parseInt(poly1.m_vertexCount);
      var normals1 = poly1.m_normals;
      var count2 = parseInt(poly2.m_vertexCount);
      var vertices2 = poly2.m_vertices;
      var normals2 = poly2.m_normals;
      var tMat;
      var tVec;
      tMat = xf1.R;
      tVec = normals1[edge1];
      var normal1X = (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var normal1Y = (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      tMat = xf2.R;
      var tX = (tMat.col1.x * normal1X + tMat.col1.y * normal1Y);
      normal1Y = (tMat.col2.x * normal1X + tMat.col2.y * normal1Y);
      normal1X = tX;
      var index = 0;
      var minDot = Number.MAX_VALUE;
      for (var i = 0; i < count2; ++i) {
         tVec = normals2[i];
         var dot = (normal1X * tVec.x + normal1Y * tVec.y);
         if (dot < minDot) {
            minDot = dot;
            index = i;
         }
      }
      var tClip;
      var i1 = parseInt(index);
      var i2 = parseInt(i1 + 1 < count2 ? i1 + 1 : 0);
      tClip = c[0];
      tVec = vertices2[i1];
      tMat = xf2.R;
      tClip.v.x = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      tClip.v.y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      tClip.id.features.referenceEdge = edge1;
      tClip.id.features.incidentEdge = i1;
      tClip.id.features.incidentVertex = 0;
      tClip = c[1];
      tVec = vertices2[i2];
      tMat = xf2.R;
      tClip.v.x = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      tClip.v.y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      tClip.id.features.referenceEdge = edge1;
      tClip.id.features.incidentEdge = i2;
      tClip.id.features.incidentVertex = 1;
   }
   b2Collision.MakeClipPointVector = function () {
      var r = new Vector(2);
      r[0] = new ClipVertex();
      r[1] = new ClipVertex();
      return r;
   }
   b2Collision.CollidePolygons = function (manifold, polyA, xfA, polyB, xfB) {
      var cv;
      manifold.m_pointCount = 0;
      var totalRadius = polyA.m_radius + polyB.m_radius;
      var edgeA = 0;
      b2Collision.s_edgeAO[0] = edgeA;
      var separationA = b2Collision.FindMaxSeparation(b2Collision.s_edgeAO, polyA, xfA, polyB, xfB);
      edgeA = b2Collision.s_edgeAO[0];
      if (separationA > totalRadius) return;
      var edgeB = 0;
      b2Collision.s_edgeBO[0] = edgeB;
      var separationB = b2Collision.FindMaxSeparation(b2Collision.s_edgeBO, polyB, xfB, polyA, xfA);
      edgeB = b2Collision.s_edgeBO[0];
      if (separationB > totalRadius) return;
      var poly1;
      var poly2;
      var xf1;
      var xf2;
      var edge1 = 0;
      var flip = 0;
      var k_relativeTol = 0.98;
      var k_absoluteTol = 0.001;
      var tMat;
      if (separationB > k_relativeTol * separationA + k_absoluteTol) {
         poly1 = polyB;
         poly2 = polyA;
         xf1 = xfB;
         xf2 = xfA;
         edge1 = edgeB;
         manifold.m_type = b2Manifold.e_faceB;
         flip = 1;
      }
      else {
         poly1 = polyA;
         poly2 = polyB;
         xf1 = xfA;
         xf2 = xfB;
         edge1 = edgeA;
         manifold.m_type = b2Manifold.e_faceA;
         flip = 0;
      }
      var incidentEdge = b2Collision.s_incidentEdge;
      b2Collision.FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);
      var count1 = parseInt(poly1.m_vertexCount);
      var vertices1 = poly1.m_vertices;
      var local_v11 = vertices1[edge1];
      var local_v12;
      if (edge1 + 1 < count1) {
         local_v12 = vertices1[parseInt(edge1 + 1)];
      }
      else {
         local_v12 = vertices1[0];
      }
      var localTangent = b2Collision.s_localTangent;
      localTangent.Set(local_v12.x - local_v11.x, local_v12.y - local_v11.y);
      localTangent.Normalize();
      var localNormal = b2Collision.s_localNormal;
      localNormal.x = localTangent.y;
      localNormal.y = (-localTangent.x);
      var planePoint = b2Collision.s_planePoint;
      planePoint.Set(0.5 * (local_v11.x + local_v12.x), 0.5 * (local_v11.y + local_v12.y));
      var tangent = b2Collision.s_tangent;
      tMat = xf1.R;
      tangent.x = (tMat.col1.x * localTangent.x + tMat.col2.x * localTangent.y);
      tangent.y = (tMat.col1.y * localTangent.x + tMat.col2.y * localTangent.y);
      var tangent2 = b2Collision.s_tangent2;
      tangent2.x = (-tangent.x);
      tangent2.y = (-tangent.y);
      var normal = b2Collision.s_normal;
      normal.x = tangent.y;
      normal.y = (-tangent.x);
      var v11 = b2Collision.s_v11;
      var v12 = b2Collision.s_v12;
      v11.x = xf1.position.x + (tMat.col1.x * local_v11.x + tMat.col2.x * local_v11.y);
      v11.y = xf1.position.y + (tMat.col1.y * local_v11.x + tMat.col2.y * local_v11.y);
      v12.x = xf1.position.x + (tMat.col1.x * local_v12.x + tMat.col2.x * local_v12.y);
      v12.y = xf1.position.y + (tMat.col1.y * local_v12.x + tMat.col2.y * local_v12.y);
      var frontOffset = normal.x * v11.x + normal.y * v11.y;
      var sideOffset1 = (-tangent.x * v11.x) - tangent.y * v11.y + totalRadius;
      var sideOffset2 = tangent.x * v12.x + tangent.y * v12.y + totalRadius;
      var clipPoints1 = b2Collision.s_clipPoints1;
      var clipPoints2 = b2Collision.s_clipPoints2;
      var np = 0;
      np = b2Collision.ClipSegmentToLine(clipPoints1, incidentEdge, tangent2, sideOffset1);
      if (np < 2) return;
      np = b2Collision.ClipSegmentToLine(clipPoints2, clipPoints1, tangent, sideOffset2);
      if (np < 2) return;
      manifold.m_localPlaneNormal.SetV(localNormal);
      manifold.m_localPoint.SetV(planePoint);
      var pointCount = 0;
      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; ++i) {
         cv = clipPoints2[i];
         var separation = normal.x * cv.v.x + normal.y * cv.v.y - frontOffset;
         if (separation <= totalRadius) {
            var cp = manifold.m_points[pointCount];
            tMat = xf2.R;
            var tX = cv.v.x - xf2.position.x;
            var tY = cv.v.y - xf2.position.y;
            cp.m_localPoint.x = (tX * tMat.col1.x + tY * tMat.col1.y);
            cp.m_localPoint.y = (tX * tMat.col2.x + tY * tMat.col2.y);
            cp.m_id.Set(cv.id);
            cp.m_id.features.flip = flip;
            ++pointCount;
         }
      }
      manifold.m_pointCount = pointCount;
   }
   b2Collision.CollideCircles = function (manifold, circle1, xf1, circle2, xf2) {
      manifold.m_pointCount = 0;
      var tMat;
      var tVec;
      tMat = xf1.R;
      tVec = circle1.m_p;
      var p1X = xf1.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var p1Y = xf1.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      tMat = xf2.R;
      tVec = circle2.m_p;
      var p2X = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var p2Y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      var dX = p2X - p1X;
      var dY = p2Y - p1Y;
      var distSqr = dX * dX + dY * dY;
      var radius = circle1.m_radius + circle2.m_radius;
      if (distSqr > radius * radius) {
         return;
      }
      manifold.m_type = b2Manifold.e_circles;
      manifold.m_localPoint.SetV(circle1.m_p);
      manifold.m_localPlaneNormal.SetZero();
      manifold.m_pointCount = 1;
      manifold.m_points[0].m_localPoint.SetV(circle2.m_p);
      manifold.m_points[0].m_id.key = 0;
   }
   b2Collision.CollidePolygonAndCircle = function (manifold, polygon, xf1, circle, xf2) {
      manifold.m_pointCount = 0;
      var tPoint;
      var dX = 0;
      var dY = 0;
      var positionX = 0;
      var positionY = 0;
      var tVec;
      var tMat;
      tMat = xf2.R;
      tVec = circle.m_p;
      var cX = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var cY = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      dX = cX - xf1.position.x;
      dY = cY - xf1.position.y;
      tMat = xf1.R;
      var cLocalX = (dX * tMat.col1.x + dY * tMat.col1.y);
      var cLocalY = (dX * tMat.col2.x + dY * tMat.col2.y);
      var dist = 0;
      var normalIndex = 0;
      var separation = (-Number.MAX_VALUE);
      var radius = polygon.m_radius + circle.m_radius;
      var vertexCount = parseInt(polygon.m_vertexCount);
      var vertices = polygon.m_vertices;
      var normals = polygon.m_normals;
      for (var i = 0; i < vertexCount; ++i) {
         tVec = vertices[i];
         dX = cLocalX - tVec.x;
         dY = cLocalY - tVec.y;
         tVec = normals[i];
         var s = tVec.x * dX + tVec.y * dY;
         if (s > radius) {
            return;
         }
         if (s > separation) {
            separation = s;
            normalIndex = i;
         }
      }
      var vertIndex1 = parseInt(normalIndex);
      var vertIndex2 = parseInt(vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0);
      var v1 = vertices[vertIndex1];
      var v2 = vertices[vertIndex2];
      if (separation < Number.MIN_VALUE) {
         manifold.m_pointCount = 1;
         manifold.m_type = b2Manifold.e_faceA;
         manifold.m_localPlaneNormal.SetV(normals[normalIndex]);
         manifold.m_localPoint.x = 0.5 * (v1.x + v2.x);
         manifold.m_localPoint.y = 0.5 * (v1.y + v2.y);
         manifold.m_points[0].m_localPoint.SetV(circle.m_p);
         manifold.m_points[0].m_id.key = 0;
         return;
      }
      var u1 = (cLocalX - v1.x) * (v2.x - v1.x) + (cLocalY - v1.y) * (v2.y - v1.y);
      var u2 = (cLocalX - v2.x) * (v1.x - v2.x) + (cLocalY - v2.y) * (v1.y - v2.y);
      if (u1 <= 0.0) {
         if ((cLocalX - v1.x) * (cLocalX - v1.x) + (cLocalY - v1.y) * (cLocalY - v1.y) > radius * radius) return;
         manifold.m_pointCount = 1;
         manifold.m_type = b2Manifold.e_faceA;
         manifold.m_localPlaneNormal.x = cLocalX - v1.x;
         manifold.m_localPlaneNormal.y = cLocalY - v1.y;
         manifold.m_localPlaneNormal.Normalize();
         manifold.m_localPoint.SetV(v1);
         manifold.m_points[0].m_localPoint.SetV(circle.m_p);
         manifold.m_points[0].m_id.key = 0;
      }
      else if (u2 <= 0) {
         if ((cLocalX - v2.x) * (cLocalX - v2.x) + (cLocalY - v2.y) * (cLocalY - v2.y) > radius * radius) return;
         manifold.m_pointCount = 1;
         manifold.m_type = b2Manifold.e_faceA;
         manifold.m_localPlaneNormal.x = cLocalX - v2.x;
         manifold.m_localPlaneNormal.y = cLocalY - v2.y;
         manifold.m_localPlaneNormal.Normalize();
         manifold.m_localPoint.SetV(v2);
         manifold.m_points[0].m_localPoint.SetV(circle.m_p);
         manifold.m_points[0].m_id.key = 0;
      }
      else {
         var faceCenterX = 0.5 * (v1.x + v2.x);
         var faceCenterY = 0.5 * (v1.y + v2.y);
         separation = (cLocalX - faceCenterX) * normals[vertIndex1].x + (cLocalY - faceCenterY) * normals[vertIndex1].y;
         if (separation > radius) return;
         manifold.m_pointCount = 1;
         manifold.m_type = b2Manifold.e_faceA;
         manifold.m_localPlaneNormal.x = normals[vertIndex1].x;
         manifold.m_localPlaneNormal.y = normals[vertIndex1].y;
         manifold.m_localPlaneNormal.Normalize();
         manifold.m_localPoint.Set(faceCenterX, faceCenterY);
         manifold.m_points[0].m_localPoint.SetV(circle.m_p);
         manifold.m_points[0].m_id.key = 0;
      }
   }
   b2Collision.TestOverlap = function (a, b) {
      var t1 = b.lowerBound;
      var t2 = a.upperBound;
      var d1X = t1.x - t2.x;
      var d1Y = t1.y - t2.y;
      t1 = a.lowerBound;
      t2 = b.upperBound;
      var d2X = t1.x - t2.x;
      var d2Y = t1.y - t2.y;
      if (d1X > 0.0 || d1Y > 0.0) return false;
      if (d2X > 0.0 || d2Y > 0.0) return false;
      return true;
   }
   Box2D.postDefs.push(function () {
      Box2D.Collision.b2Collision.s_incidentEdge = b2Collision.MakeClipPointVector();
      Box2D.Collision.b2Collision.s_clipPoints1 = b2Collision.MakeClipPointVector();
      Box2D.Collision.b2Collision.s_clipPoints2 = b2Collision.MakeClipPointVector();
      Box2D.Collision.b2Collision.s_edgeAO = new Vector_a2j_Number(1);
      Box2D.Collision.b2Collision.s_edgeBO = new Vector_a2j_Number(1);
      Box2D.Collision.b2Collision.s_localTangent = new b2Vec2();
      Box2D.Collision.b2Collision.s_localNormal = new b2Vec2();
      Box2D.Collision.b2Collision.s_planePoint = new b2Vec2();
      Box2D.Collision.b2Collision.s_normal = new b2Vec2();
      Box2D.Collision.b2Collision.s_tangent = new b2Vec2();
      Box2D.Collision.b2Collision.s_tangent2 = new b2Vec2();
      Box2D.Collision.b2Collision.s_v11 = new b2Vec2();
      Box2D.Collision.b2Collision.s_v12 = new b2Vec2();
      Box2D.Collision.b2Collision.b2CollidePolyTempVec = new b2Vec2();
      Box2D.Collision.b2Collision.b2_nullFeature = 0x000000ff;
   });
   b2ContactID.b2ContactID = function () {
      this.features = new Features();
   };
   b2ContactID.prototype.b2ContactID = function () {
      this.features._m_id = this;
   }
   b2ContactID.prototype.Set = function (id) {
      this.key = id._key;
   }
   b2ContactID.prototype.Copy = function () {
      var id = new b2ContactID();
      id.key = this.key;
      return id;
   }
   Object.defineProperty(b2ContactID.prototype, 'key', {
      enumerable: false,
      configurable: true,
      get: function () {
         return this._key;
      }
   });
   Object.defineProperty(b2ContactID.prototype, 'key', {
      enumerable: false,
      configurable: true,
      set: function (value) {
         if (value === undefined) value = 0;
         this._key = value;
         this.features._referenceEdge = this._key & 0x000000ff;
         this.features._incidentEdge = ((this._key & 0x0000ff00) >> 8) & 0x000000ff;
         this.features._incidentVertex = ((this._key & 0x00ff0000) >> 16) & 0x000000ff;
         this.features._flip = ((this._key & 0xff000000) >> 24) & 0x000000ff;
      }
   });
   b2ContactPoint.b2ContactPoint = function () {
      this.position = new b2Vec2();
      this.velocity = new b2Vec2();
      this.normal = new b2Vec2();
      this.id = new b2ContactID();
   };
   b2Distance.b2Distance = function () {};
   b2Distance.Distance = function (output, cache, input) {
      ++b2Distance.b2_gjkCalls;
      var proxyA = input.proxyA;
      var proxyB = input.proxyB;
      var transformA = input.transformA;
      var transformB = input.transformB;
      var simplex = b2Distance.s_simplex;
      simplex.ReadCache(cache, proxyA, transformA, proxyB, transformB);
      var vertices = simplex.m_vertices;
      var k_maxIters = 20;
      var saveA = b2Distance.s_saveA;
      var saveB = b2Distance.s_saveB;
      var saveCount = 0;
      var closestPoint = simplex.GetClosestPoint();
      var distanceSqr1 = closestPoint.LengthSquared();
      var distanceSqr2 = distanceSqr1;
      var i = 0;
      var p;
      var iter = 0;
      while (iter < k_maxIters) {
         saveCount = simplex.m_count;
         for (i = 0;
         i < saveCount; i++) {
            saveA[i] = vertices[i].indexA;
            saveB[i] = vertices[i].indexB;
         }
         switch (simplex.m_count) {
         case 1:
            break;
         case 2:
            simplex.Solve2();
            break;
         case 3:
            simplex.Solve3();
            break;
         default:
            b2Settings.b2Assert(false);
         }
         if (simplex.m_count == 3) {
            break;
         }
         p = simplex.GetClosestPoint();
         distanceSqr2 = p.LengthSquared();
         if (distanceSqr2 > distanceSqr1) {}
         distanceSqr1 = distanceSqr2;
         var d = simplex.GetSearchDirection();
         if (d.LengthSquared() < Number.MIN_VALUE * Number.MIN_VALUE) {
            break;
         }
         var vertex = vertices[simplex.m_count];
         vertex.indexA = proxyA.GetSupport(b2Math.MulTMV(transformA.R, d.GetNegative()));
         vertex.wA = b2Math.MulX(transformA, proxyA.GetVertex(vertex.indexA));
         vertex.indexB = proxyB.GetSupport(b2Math.MulTMV(transformB.R, d));
         vertex.wB = b2Math.MulX(transformB, proxyB.GetVertex(vertex.indexB));
         vertex.w = b2Math.SubtractVV(vertex.wB, vertex.wA);
         ++iter;
         ++b2Distance.b2_gjkIters;
         var duplicate = false;
         for (i = 0;
         i < saveCount; i++) {
            if (vertex.indexA == saveA[i] && vertex.indexB == saveB[i]) {
               duplicate = true;
               break;
            }
         }
         if (duplicate) {
            break;
         }++simplex.m_count;
      }
      b2Distance.b2_gjkMaxIters = b2Math.Max(b2Distance.b2_gjkMaxIters, iter);
      simplex.GetWitnessPoints(output.pointA, output.pointB);
      output.distance = b2Math.SubtractVV(output.pointA, output.pointB).Length();
      output.iterations = iter;
      simplex.WriteCache(cache);
      if (input.useRadii) {
         var rA = proxyA.m_radius;
         var rB = proxyB.m_radius;
         if (output.distance > rA + rB && output.distance > Number.MIN_VALUE) {
            output.distance -= rA + rB;
            var normal = b2Math.SubtractVV(output.pointB, output.pointA);
            normal.Normalize();
            output.pointA.x += rA * normal.x;
            output.pointA.y += rA * normal.y;
            output.pointB.x -= rB * normal.x;
            output.pointB.y -= rB * normal.y;
         }
         else {
            p = new b2Vec2();
            p.x = .5 * (output.pointA.x + output.pointB.x);
            p.y = .5 * (output.pointA.y + output.pointB.y);
            output.pointA.x = output.pointB.x = p.x;
            output.pointA.y = output.pointB.y = p.y;
            output.distance = 0.0;
         }
      }
   }
   Box2D.postDefs.push(function () {
      Box2D.Collision.b2Distance.s_simplex = new b2Simplex();
      Box2D.Collision.b2Distance.s_saveA = new Vector_a2j_Number(3);
      Box2D.Collision.b2Distance.s_saveB = new Vector_a2j_Number(3);
   });
   b2DistanceInput.b2DistanceInput = function () {};
   b2DistanceOutput.b2DistanceOutput = function () {
      this.pointA = new b2Vec2();
      this.pointB = new b2Vec2();
   };
   b2DistanceProxy.b2DistanceProxy = function () {};
   b2DistanceProxy.prototype.Set = function (shape) {
      switch (shape.GetType()) {
      case b2Shape.e_circleShape:
         {
            var circle = (shape instanceof b2CircleShape ? shape : null);
            this.m_vertices = new Vector(1, true);
            this.m_vertices[0] = circle.m_p;
            this.m_count = 1;
            this.m_radius = circle.m_radius;
         }
         break;
      case b2Shape.e_polygonShape:
         {
            var polygon = (shape instanceof b2PolygonShape ? shape : null);
            this.m_vertices = polygon.m_vertices;
            this.m_count = polygon.m_vertexCount;
            this.m_radius = polygon.m_radius;
         }
         break;
      default:
         b2Settings.b2Assert(false);
      }
   }
   b2DistanceProxy.prototype.GetSupport = function (d) {
      var bestIndex = 0;
      var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
      for (var i = 1; i < this.m_count; ++i) {
         var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
         if (value > bestValue) {
            bestIndex = i;
            bestValue = value;
         }
      }
      return bestIndex;
   }
   b2DistanceProxy.prototype.GetSupportVertex = function (d) {
      var bestIndex = 0;
      var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
      for (var i = 1; i < this.m_count; ++i) {
         var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
         if (value > bestValue) {
            bestIndex = i;
            bestValue = value;
         }
      }
      return this.m_vertices[bestIndex];
   }
   b2DistanceProxy.prototype.GetVertexCount = function () {
      return this.m_count;
   }
   b2DistanceProxy.prototype.GetVertex = function (index) {
      if (index === undefined) index = 0;
      b2Settings.b2Assert(0 <= index && index < this.m_count);
      return this.m_vertices[index];
   }
   b2DynamicTree.b2DynamicTree = function () {};
   b2DynamicTree.prototype.b2DynamicTree = function () {
      this.m_root = null;
      this.m_freeList = null;
      this.m_path = 0;
      this.m_insertionCount = 0;
   }
   b2DynamicTree.prototype.CreateProxy = function (aabb, userData) {
      var node = this.AllocateNode();
      var extendX = b2Settings.b2_aabbExtension;
      var extendY = b2Settings.b2_aabbExtension;
      node.aabb.lowerBound.x = aabb.lowerBound.x - extendX;
      node.aabb.lowerBound.y = aabb.lowerBound.y - extendY;
      node.aabb.upperBound.x = aabb.upperBound.x + extendX;
      node.aabb.upperBound.y = aabb.upperBound.y + extendY;
      node.userData = userData;
      this.InsertLeaf(node);
      return node;
   }
   b2DynamicTree.prototype.DestroyProxy = function (proxy) {
      this.RemoveLeaf(proxy);
      this.FreeNode(proxy);
   }
   b2DynamicTree.prototype.MoveProxy = function (proxy, aabb, displacement) {
      b2Settings.b2Assert(proxy.IsLeaf());
      if (proxy.aabb.Contains(aabb)) {
         return false;
      }
      this.RemoveLeaf(proxy);
      var extendX = b2Settings.b2_aabbExtension + b2Settings.b2_aabbMultiplier * (displacement.x > 0 ? displacement.x : (-displacement.x));
      var extendY = b2Settings.b2_aabbExtension + b2Settings.b2_aabbMultiplier * (displacement.y > 0 ? displacement.y : (-displacement.y));
      proxy.aabb.lowerBound.x = aabb.lowerBound.x - extendX;
      proxy.aabb.lowerBound.y = aabb.lowerBound.y - extendY;
      proxy.aabb.upperBound.x = aabb.upperBound.x + extendX;
      proxy.aabb.upperBound.y = aabb.upperBound.y + extendY;
      this.InsertLeaf(proxy);
      return true;
   }
   b2DynamicTree.prototype.Rebalance = function (iterations) {
      if (iterations === undefined) iterations = 0;
      if (this.m_root == null) return;
      for (var i = 0; i < iterations; i++) {
         var node = this.m_root;
         var bit = 0;
         while (node.IsLeaf() == false) {
            node = (this.m_path >> bit) & 1 ? node.child2 : node.child1;
            bit = (bit + 1) & 31;
         }++this.m_path;
         this.RemoveLeaf(node);
         this.InsertLeaf(node);
      }
   }
   b2DynamicTree.prototype.GetFatAABB = function (proxy) {
      return proxy.aabb;
   }
   b2DynamicTree.prototype.GetUserData = function (proxy) {
      return proxy.userData;
   }
   b2DynamicTree.prototype.Query = function (callback, aabb) {
      if (this.m_root == null) return;
      var stack = new Vector();
      var count = 0;
      stack[count++] = this.m_root;
      while (count > 0) {
         var node = stack[--count];
         if (node.aabb.TestOverlap(aabb)) {
            if (node.IsLeaf()) {
               var proceed = callback(node);
               if (!proceed) return;
            }
            else {
               stack[count++] = node.child1;
               stack[count++] = node.child2;
            }
         }
      }
   }
   b2DynamicTree.prototype.RayCast = function (callback, input) {
      if (this.m_root == null) return;
      var p1 = input.p1;
      var p2 = input.p2;
      var r = b2Math.SubtractVV(p1, p2);
      r.Normalize();
      var v = b2Math.CrossFV(1.0, r);
      var abs_v = b2Math.AbsV(v);
      var maxFraction = input.maxFraction;
      var segmentAABB = new b2AABB();
      var tX = 0;
      var tY = 0; {
         tX = p1.x + maxFraction * (p2.x - p1.x);
         tY = p1.y + maxFraction * (p2.y - p1.y);
         segmentAABB.lowerBound.x = Math.min(p1.x, tX);
         segmentAABB.lowerBound.y = Math.min(p1.y, tY);
         segmentAABB.upperBound.x = Math.max(p1.x, tX);
         segmentAABB.upperBound.y = Math.max(p1.y, tY);
      }
      var stack = new Vector();
      var count = 0;
      stack[count++] = this.m_root;
      while (count > 0) {
         var node = stack[--count];
         if (node.aabb.TestOverlap(segmentAABB) == false) {
            continue;
         }
         var c = node.aabb.GetCenter();
         var h = node.aabb.GetExtents();
         var separation = Math.abs(v.x * (p1.x - c.x) + v.y * (p1.y - c.y)) - abs_v.x * h.x - abs_v.y * h.y;
         if (separation > 0.0) continue;
         if (node.IsLeaf()) {
            var subInput = new b2RayCastInput();
            subInput.p1 = input.p1;
            subInput.p2 = input.p2;
            subInput.maxFraction = input.maxFraction;
            maxFraction = callback(subInput, node);
            if (maxFraction == 0.0) return;
            if (maxFraction > 0.0) {
               tX = p1.x + maxFraction * (p2.x - p1.x);
               tY = p1.y + maxFraction * (p2.y - p1.y);
               segmentAABB.lowerBound.x = Math.min(p1.x, tX);
               segmentAABB.lowerBound.y = Math.min(p1.y, tY);
               segmentAABB.upperBound.x = Math.max(p1.x, tX);
               segmentAABB.upperBound.y = Math.max(p1.y, tY);
            }
         }
         else {
            stack[count++] = node.child1;
            stack[count++] = node.child2;
         }
      }
   }
   b2DynamicTree.prototype.AllocateNode = function () {
      if (this.m_freeList) {
         var node = this.m_freeList;
         this.m_freeList = node.parent;
         node.parent = null;
         node.child1 = null;
         node.child2 = null;
         return node;
      }
      return new b2DynamicTreeNode();
   }
   b2DynamicTree.prototype.FreeNode = function (node) {
      node.parent = this.m_freeList;
      this.m_freeList = node;
   }
   b2DynamicTree.prototype.InsertLeaf = function (leaf) {
      ++this.m_insertionCount;
      if (this.m_root == null) {
         this.m_root = leaf;
         this.m_root.parent = null;
         return;
      }
      var center = leaf.aabb.GetCenter();
      var sibling = this.m_root;
      if (sibling.IsLeaf() == false) {
         do {
            var child1 = sibling.child1;
            var child2 = sibling.child2;
            var norm1 = Math.abs((child1.aabb.lowerBound.x + child1.aabb.upperBound.x) / 2 - center.x) + Math.abs((child1.aabb.lowerBound.y + child1.aabb.upperBound.y) / 2 - center.y);
            var norm2 = Math.abs((child2.aabb.lowerBound.x + child2.aabb.upperBound.x) / 2 - center.x) + Math.abs((child2.aabb.lowerBound.y + child2.aabb.upperBound.y) / 2 - center.y);
            if (norm1 < norm2) {
               sibling = child1;
            }
            else {
               sibling = child2;
            }
         }
         while (sibling.IsLeaf() == false)
      }
      var node1 = sibling.parent;
      var node2 = this.AllocateNode();
      node2.parent = node1;
      node2.userData = null;
      node2.aabb.Combine(leaf.aabb, sibling.aabb);
      if (node1) {
         if (sibling.parent.child1 == sibling) {
            node1.child1 = node2;
         }
         else {
            node1.child2 = node2;
         }
         node2.child1 = sibling;
         node2.child2 = leaf;
         sibling.parent = node2;
         leaf.parent = node2;
         do {
            if (node1.aabb.Contains(node2.aabb)) break;
            node1.aabb.Combine(node1.child1.aabb, node1.child2.aabb);
            node2 = node1;
            node1 = node1.parent;
         }
         while (node1)
      }
      else {
         node2.child1 = sibling;
         node2.child2 = leaf;
         sibling.parent = node2;
         leaf.parent = node2;
         this.m_root = node2;
      }
   }
   b2DynamicTree.prototype.RemoveLeaf = function (leaf) {
      if (leaf == this.m_root) {
         this.m_root = null;
         return;
      }
      var node2 = leaf.parent;
      var node1 = node2.parent;
      var sibling;
      if (node2.child1 == leaf) {
         sibling = node2.child2;
      }
      else {
         sibling = node2.child1;
      }
      if (node1) {
         if (node1.child1 == node2) {
            node1.child1 = sibling;
         }
         else {
            node1.child2 = sibling;
         }
         sibling.parent = node1;
         this.FreeNode(node2);
         while (node1) {
            var oldAABB = node1.aabb;
            node1.aabb = b2AABB.Combine(node1.child1.aabb, node1.child2.aabb);
            if (oldAABB.Contains(node1.aabb)) break;
            node1 = node1.parent;
         }
      }
      else {
         this.m_root = sibling;
         sibling.parent = null;
         this.FreeNode(node2);
      }
   }
   b2DynamicTreeBroadPhase.b2DynamicTreeBroadPhase = function () {
      this.m_tree = new b2DynamicTree();
      this.m_moveBuffer = new Vector();
      this.m_pairBuffer = new Vector();
      this.m_pairCount = 0;
   };
   b2DynamicTreeBroadPhase.prototype.CreateProxy = function (aabb, userData) {
      var proxy = this.m_tree.CreateProxy(aabb, userData);
      ++this.m_proxyCount;
      this.BufferMove(proxy);
      return proxy;
   }
   b2DynamicTreeBroadPhase.prototype.DestroyProxy = function (proxy) {
      this.UnBufferMove(proxy);
      --this.m_proxyCount;
      this.m_tree.DestroyProxy(proxy);
   }
   b2DynamicTreeBroadPhase.prototype.MoveProxy = function (proxy, aabb, displacement) {
      var buffer = this.m_tree.MoveProxy(proxy, aabb, displacement);
      if (buffer) {
         this.BufferMove(proxy);
      }
   }
   b2DynamicTreeBroadPhase.prototype.TestOverlap = function (proxyA, proxyB) {
      var aabbA = this.m_tree.GetFatAABB(proxyA);
      var aabbB = this.m_tree.GetFatAABB(proxyB);
      return aabbA.TestOverlap(aabbB);
   }
   b2DynamicTreeBroadPhase.prototype.GetUserData = function (proxy) {
      return this.m_tree.GetUserData(proxy);
   }
   b2DynamicTreeBroadPhase.prototype.GetFatAABB = function (proxy) {
      return this.m_tree.GetFatAABB(proxy);
   }
   b2DynamicTreeBroadPhase.prototype.GetProxyCount = function () {
      return this.m_proxyCount;
   }
   b2DynamicTreeBroadPhase.prototype.UpdatePairs = function (callback) {
      var __this = this;
      __this.m_pairCount = 0;
      var i = 0,
         queryProxy;
       function QueryCallback(proxy) {
          if (proxy == queryProxy) return true;
          if (__this.m_pairCount == __this.m_pairBuffer.length) {
             __this.m_pairBuffer[__this.m_pairCount] = new b2DynamicTreePair();
          }
          var pair = __this.m_pairBuffer[__this.m_pairCount];
          pair.proxyA = proxy < queryProxy ? proxy : queryProxy;
          pair.proxyB = proxy >= queryProxy ? proxy : queryProxy;++__this.m_pairCount;
          return true;
       };
      for (i = 0;
      i < __this.m_moveBuffer.length; ++i) {
         queryProxy = __this.m_moveBuffer[i];
         var fatAABB = __this.m_tree.GetFatAABB(queryProxy);
         __this.m_tree.Query(QueryCallback, fatAABB);
      }
      __this.m_moveBuffer.length = 0;
      for (var i = 0; i < __this.m_pairCount;) {
         var primaryPair = __this.m_pairBuffer[i];
         var userDataA = __this.m_tree.GetUserData(primaryPair.proxyA);
         var userDataB = __this.m_tree.GetUserData(primaryPair.proxyB);
         callback(userDataA, userDataB);
         ++i;
         while (i < __this.m_pairCount) {
            var pair = __this.m_pairBuffer[i];
            if (pair.proxyA != primaryPair.proxyA || pair.proxyB != primaryPair.proxyB) {
               break;
            }++i;
         }
      }
   }
   b2DynamicTreeBroadPhase.prototype.Query = function (callback, aabb) {
      this.m_tree.Query(callback, aabb);
   }
   b2DynamicTreeBroadPhase.prototype.RayCast = function (callback, input) {
      this.m_tree.RayCast(callback, input);
   }
   b2DynamicTreeBroadPhase.prototype.Validate = function () {}
   b2DynamicTreeBroadPhase.prototype.Rebalance = function (iterations) {
      if (iterations === undefined) iterations = 0;
      this.m_tree.Rebalance(iterations);
   }
   b2DynamicTreeBroadPhase.prototype.BufferMove = function (proxy) {
      this.m_moveBuffer[this.m_moveBuffer.length] = proxy;
   }
   b2DynamicTreeBroadPhase.prototype.UnBufferMove = function (proxy) {
      var i = parseInt(this.m_moveBuffer.indexOf(proxy));
      this.m_moveBuffer.splice(i, 1);
   }
   b2DynamicTreeBroadPhase.prototype.ComparePairs = function (pair1, pair2) {
      return 0;
   }
   b2DynamicTreeBroadPhase.__implements = {};
   b2DynamicTreeBroadPhase.__implements[IBroadPhase] = true;
   b2DynamicTreeNode.b2DynamicTreeNode = function () {
      this.aabb = new b2AABB();
   };
   b2DynamicTreeNode.prototype.IsLeaf = function () {
      return this.child1 == null;
   }
   b2DynamicTreePair.b2DynamicTreePair = function () {};
   b2Manifold.b2Manifold = function () {
      this.m_pointCount = 0;
   };
   b2Manifold.prototype.b2Manifold = function () {
      this.m_points = new Vector(b2Settings.b2_maxManifoldPoints);
      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {
         this.m_points[i] = new b2ManifoldPoint();
      }
      this.m_localPlaneNormal = new b2Vec2();
      this.m_localPoint = new b2Vec2();
   }
   b2Manifold.prototype.Reset = function () {
      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {
         ((this.m_points[i] instanceof b2ManifoldPoint ? this.m_points[i] : null)).Reset();
      }
      this.m_localPlaneNormal.SetZero();
      this.m_localPoint.SetZero();
      this.m_type = 0;
      this.m_pointCount = 0;
   }
   b2Manifold.prototype.Set = function (m) {
      this.m_pointCount = m.m_pointCount;
      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {
         ((this.m_points[i] instanceof b2ManifoldPoint ? this.m_points[i] : null)).Set(m.m_points[i]);
      }
      this.m_localPlaneNormal.SetV(m.m_localPlaneNormal);
      this.m_localPoint.SetV(m.m_localPoint);
      this.m_type = m.m_type;
   }
   b2Manifold.prototype.Copy = function () {
      var copy = new b2Manifold();
      copy.Set(this);
      return copy;
   }
   Box2D.postDefs.push(function () {
      Box2D.Collision.b2Manifold.e_circles = 0x0001;
      Box2D.Collision.b2Manifold.e_faceA = 0x0002;
      Box2D.Collision.b2Manifold.e_faceB = 0x0004;
   });
   b2ManifoldPoint.b2ManifoldPoint = function () {
      this.m_localPoint = new b2Vec2();
      this.m_id = new b2ContactID();
   };
   b2ManifoldPoint.prototype.b2ManifoldPoint = function () {
      this.Reset();
   }
   b2ManifoldPoint.prototype.Reset = function () {
      this.m_localPoint.SetZero();
      this.m_normalImpulse = 0.0;
      this.m_tangentImpulse = 0.0;
      this.m_id.key = 0;
   }
   b2ManifoldPoint.prototype.Set = function (m) {
      this.m_localPoint.SetV(m.m_localPoint);
      this.m_normalImpulse = m.m_normalImpulse;
      this.m_tangentImpulse = m.m_tangentImpulse;
      this.m_id.Set(m.m_id);
   }
   b2Point.b2Point = function () {
      this.p = new b2Vec2();
   };
   b2Point.prototype.Support = function (xf, vX, vY) {
      if (vX === undefined) vX = 0;
      if (vY === undefined) vY = 0;
      return this.p;
   }
   b2Point.prototype.GetFirstVertex = function (xf) {
      return this.p;
   }
   b2RayCastInput.b2RayCastInput = function () {
      this.p1 = new b2Vec2();
      this.p2 = new b2Vec2();
   };
   b2RayCastInput.prototype.b2RayCastInput = function (p1, p2, maxFraction) {
      if (p1 === undefined) p1 = null;
      if (p2 === undefined) p2 = null;
      if (maxFraction === undefined) maxFraction = 1;
      if (p1) this.p1.SetV(p1);
      if (p2) this.p2.SetV(p2);
      this.maxFraction = maxFraction;
   }
   b2RayCastOutput.b2RayCastOutput = function () {
      this.normal = new b2Vec2();
   };
   b2Segment.b2Segment = function () {
      this.p1 = new b2Vec2();
      this.p2 = new b2Vec2();
   };
   b2Segment.prototype.TestSegment = function (lambda, normal, segment, maxLambda) {
      if (maxLambda === undefined) maxLambda = 0;
      var s = segment.p1;
      var rX = segment.p2.x - s.x;
      var rY = segment.p2.y - s.y;
      var dX = this.p2.x - this.p1.x;
      var dY = this.p2.y - this.p1.y;
      var nX = dY;
      var nY = (-dX);
      var k_slop = 100.0 * Number.MIN_VALUE;
      var denom = (-(rX * nX + rY * nY));
      if (denom > k_slop) {
         var bX = s.x - this.p1.x;
         var bY = s.y - this.p1.y;
         var a = (bX * nX + bY * nY);
         if (0.0 <= a && a <= maxLambda * denom) {
            var mu2 = (-rX * bY) + rY * bX;
            if ((-k_slop * denom) <= mu2 && mu2 <= denom * (1.0 + k_slop)) {
               a /= denom;
               var nLen = Math.sqrt(nX * nX + nY * nY);
               nX /= nLen;
               nY /= nLen;
               lambda[0] = a;
               normal.Set(nX, nY);
               return true;
            }
         }
      }
      return false;
   }
   b2Segment.prototype.Extend = function (aabb) {
      this.ExtendForward(aabb);
      this.ExtendBackward(aabb);
   }
   b2Segment.prototype.ExtendForward = function (aabb) {
      var dX = this.p2.x - this.p1.x;
      var dY = this.p2.y - this.p1.y;
      var lambda = Math.min(dX > 0 ? (aabb.upperBound.x - this.p1.x) / dX : dX < 0 ? (aabb.lowerBound.x - this.p1.x) / dX : Number.POSITIVE_INFINITY,
      dY > 0 ? (aabb.upperBound.y - this.p1.y) / dY : dY < 0 ? (aabb.lowerBound.y - this.p1.y) / dY : Number.POSITIVE_INFINITY);
      this.p2.x = this.p1.x + dX * lambda;
      this.p2.y = this.p1.y + dY * lambda;
   }
   b2Segment.prototype.ExtendBackward = function (aabb) {
      var dX = (-this.p2.x) + this.p1.x;
      var dY = (-this.p2.y) + this.p1.y;
      var lambda = Math.min(dX > 0 ? (aabb.upperBound.x - this.p2.x) / dX : dX < 0 ? (aabb.lowerBound.x - this.p2.x) / dX : Number.POSITIVE_INFINITY,
      dY > 0 ? (aabb.upperBound.y - this.p2.y) / dY : dY < 0 ? (aabb.lowerBound.y - this.p2.y) / dY : Number.POSITIVE_INFINITY);
      this.p1.x = this.p2.x + dX * lambda;
      this.p1.y = this.p2.y + dY * lambda;
   }
   b2SeparationFunction.b2SeparationFunction = function () {
      this.m_localPoint = new b2Vec2();
      this.m_axis = new b2Vec2();
   };
   b2SeparationFunction.prototype.Initialize = function (cache, proxyA, transformA, proxyB, transformB) {
      this.m_proxyA = proxyA;
      this.m_proxyB = proxyB;
      var count = parseInt(cache.count);
      b2Settings.b2Assert(0 < count && count < 3);
      var localPointA;
      var localPointA1;
      var localPointA2;
      var localPointB;
      var localPointB1;
      var localPointB2;
      var pointAX = 0;
      var pointAY = 0;
      var pointBX = 0;
      var pointBY = 0;
      var normalX = 0;
      var normalY = 0;
      var tMat;
      var tVec;
      var s = 0;
      var sgn = 0;
      if (count == 1) {
         this.m_type = b2SeparationFunction.e_points;
         localPointA = this.m_proxyA.GetVertex(cache.indexA[0]);
         localPointB = this.m_proxyB.GetVertex(cache.indexB[0]);
         tVec = localPointA;
         tMat = transformA.R;
         pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
         pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
         tVec = localPointB;
         tMat = transformB.R;
         pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
         pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
         this.m_axis.x = pointBX - pointAX;
         this.m_axis.y = pointBY - pointAY;
         this.m_axis.Normalize();
      }
      else if (cache.indexB[0] == cache.indexB[1]) {
         this.m_type = b2SeparationFunction.e_faceA;
         localPointA1 = this.m_proxyA.GetVertex(cache.indexA[0]);
         localPointA2 = this.m_proxyA.GetVertex(cache.indexA[1]);
         localPointB = this.m_proxyB.GetVertex(cache.indexB[0]);
         this.m_localPoint.x = 0.5 * (localPointA1.x + localPointA2.x);
         this.m_localPoint.y = 0.5 * (localPointA1.y + localPointA2.y);
         this.m_axis = b2Math.CrossVF(b2Math.SubtractVV(localPointA2, localPointA1), 1.0);
         this.m_axis.Normalize();
         tVec = this.m_axis;
         tMat = transformA.R;
         normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
         normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
         tVec = this.m_localPoint;
         tMat = transformA.R;
         pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
         pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
         tVec = localPointB;
         tMat = transformB.R;
         pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
         pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
         s = (pointBX - pointAX) * normalX + (pointBY - pointAY) * normalY;
         if (s < 0.0) {
            this.m_axis.NegativeSelf();
         }
      }
      else if (cache.indexA[0] == cache.indexA[0]) {
         this.m_type = b2SeparationFunction.e_faceB;
         localPointB1 = this.m_proxyB.GetVertex(cache.indexB[0]);
         localPointB2 = this.m_proxyB.GetVertex(cache.indexB[1]);
         localPointA = this.m_proxyA.GetVertex(cache.indexA[0]);
         this.m_localPoint.x = 0.5 * (localPointB1.x + localPointB2.x);
         this.m_localPoint.y = 0.5 * (localPointB1.y + localPointB2.y);
         this.m_axis = b2Math.CrossVF(b2Math.SubtractVV(localPointB2, localPointB1), 1.0);
         this.m_axis.Normalize();
         tVec = this.m_axis;
         tMat = transformB.R;
         normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
         normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
         tVec = this.m_localPoint;
         tMat = transformB.R;
         pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
         pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
         tVec = localPointA;
         tMat = transformA.R;
         pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
         pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
         s = (pointAX - pointBX) * normalX + (pointAY - pointBY) * normalY;
         if (s < 0.0) {
            this.m_axis.NegativeSelf();
         }
      }
      else {
         localPointA1 = this.m_proxyA.GetVertex(cache.indexA[0]);
         localPointA2 = this.m_proxyA.GetVertex(cache.indexA[1]);
         localPointB1 = this.m_proxyB.GetVertex(cache.indexB[0]);
         localPointB2 = this.m_proxyB.GetVertex(cache.indexB[1]);
         var pA = b2Math.MulX(transformA, localPointA);
         var dA = b2Math.MulMV(transformA.R, b2Math.SubtractVV(localPointA2, localPointA1));
         var pB = b2Math.MulX(transformB, localPointB);
         var dB = b2Math.MulMV(transformB.R, b2Math.SubtractVV(localPointB2, localPointB1));
         var a = dA.x * dA.x + dA.y * dA.y;
         var e = dB.x * dB.x + dB.y * dB.y;
         var r = b2Math.SubtractVV(dB, dA);
         var c = dA.x * r.x + dA.y * r.y;
         var f = dB.x * r.x + dB.y * r.y;
         var b = dA.x * dB.x + dA.y * dB.y;
         var denom = a * e - b * b;
         s = 0.0;
         if (denom != 0.0) {
            s = b2Math.Clamp((b * f - c * e) / denom, 0.0, 1.0);
         }
         var t = (b * s + f) / e;
         if (t < 0.0) {
            t = 0.0;
            s = b2Math.Clamp((b - c) / a, 0.0, 1.0);
         }
         localPointA = new b2Vec2();
         localPointA.x = localPointA1.x + s * (localPointA2.x - localPointA1.x);
         localPointA.y = localPointA1.y + s * (localPointA2.y - localPointA1.y);
         localPointB = new b2Vec2();
         localPointB.x = localPointB1.x + s * (localPointB2.x - localPointB1.x);
         localPointB.y = localPointB1.y + s * (localPointB2.y - localPointB1.y);
         if (s == 0.0 || s == 1.0) {
            this.m_type = b2SeparationFunction.e_faceB;
            this.m_axis = b2Math.CrossVF(b2Math.SubtractVV(localPointB2, localPointB1), 1.0);
            this.m_axis.Normalize();
            this.m_localPoint = localPointB;
            tVec = this.m_axis;
            tMat = transformB.R;
            normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            tVec = this.m_localPoint;
            tMat = transformB.R;
            pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
            pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
            tVec = localPointA;
            tMat = transformA.R;
            pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
            pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
            sgn = (pointAX - pointBX) * normalX + (pointAY - pointBY) * normalY;
            if (s < 0.0) {
               this.m_axis.NegativeSelf();
            }
         }
         else {
            this.m_type = b2SeparationFunction.e_faceA;
            this.m_axis = b2Math.CrossVF(b2Math.SubtractVV(localPointA2, localPointA1), 1.0);
            this.m_localPoint = localPointA;
            tVec = this.m_axis;
            tMat = transformA.R;
            normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            tVec = this.m_localPoint;
            tMat = transformA.R;
            pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
            pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
            tVec = localPointB;
            tMat = transformB.R;
            pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
            pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
            sgn = (pointBX - pointAX) * normalX + (pointBY - pointAY) * normalY;
            if (s < 0.0) {
               this.m_axis.NegativeSelf();
            }
         }
      }
   }
   b2SeparationFunction.prototype.Evaluate = function (transformA, transformB) {
      var axisA;
      var axisB;
      var localPointA;
      var localPointB;
      var pointA;
      var pointB;
      var seperation = 0;
      var normal;
      switch (this.m_type) {
      case b2SeparationFunction.e_points:
         {
            axisA = b2Math.MulTMV(transformA.R, this.m_axis);
            axisB = b2Math.MulTMV(transformB.R, this.m_axis.GetNegative());
            localPointA = this.m_proxyA.GetSupportVertex(axisA);
            localPointB = this.m_proxyB.GetSupportVertex(axisB);
            pointA = b2Math.MulX(transformA, localPointA);
            pointB = b2Math.MulX(transformB, localPointB);
            seperation = (pointB.x - pointA.x) * this.m_axis.x + (pointB.y - pointA.y) * this.m_axis.y;
            return seperation;
         }
      case b2SeparationFunction.e_faceA:
         {
            normal = b2Math.MulMV(transformA.R, this.m_axis);
            pointA = b2Math.MulX(transformA, this.m_localPoint);
            axisB = b2Math.MulTMV(transformB.R, normal.GetNegative());
            localPointB = this.m_proxyB.GetSupportVertex(axisB);
            pointB = b2Math.MulX(transformB, localPointB);
            seperation = (pointB.x - pointA.x) * normal.x + (pointB.y - pointA.y) * normal.y;
            return seperation;
         }
      case b2SeparationFunction.e_faceB:
         {
            normal = b2Math.MulMV(transformB.R, this.m_axis);
            pointB = b2Math.MulX(transformB, this.m_localPoint);
            axisA = b2Math.MulTMV(transformA.R, normal.GetNegative());
            localPointA = this.m_proxyA.GetSupportVertex(axisA);
            pointA = b2Math.MulX(transformA, localPointA);
            seperation = (pointA.x - pointB.x) * normal.x + (pointA.y - pointB.y) * normal.y;
            return seperation;
         }
      default:
         b2Settings.b2Assert(false);
         return 0.0;
      }
   }
   Box2D.postDefs.push(function () {
      Box2D.Collision.b2SeparationFunction.e_points = 0x01;
      Box2D.Collision.b2SeparationFunction.e_faceA = 0x02;
      Box2D.Collision.b2SeparationFunction.e_faceB = 0x04;
   });
   b2Simplex.b2Simplex = function () {
      this.m_v1 = new b2SimplexVertex();
      this.m_v2 = new b2SimplexVertex();
      this.m_v3 = new b2SimplexVertex();
      this.m_vertices = new Vector(3);
   };
   b2Simplex.prototype.b2Simplex = function () {
      this.m_vertices[0] = this.m_v1;
      this.m_vertices[1] = this.m_v2;
      this.m_vertices[2] = this.m_v3;
   }
   b2Simplex.prototype.ReadCache = function (cache, proxyA, transformA, proxyB, transformB) {
      b2Settings.b2Assert(0 <= cache.count && cache.count <= 3);
      var wALocal;
      var wBLocal;
      this.m_count = cache.count;
      var vertices = this.m_vertices;
      for (var i = 0; i < this.m_count; i++) {
         var v = vertices[i];
         v.indexA = cache.indexA[i];
         v.indexB = cache.indexB[i];
         wALocal = proxyA.GetVertex(v.indexA);
         wBLocal = proxyB.GetVertex(v.indexB);
         v.wA = b2Math.MulX(transformA, wALocal);
         v.wB = b2Math.MulX(transformB, wBLocal);
         v.w = b2Math.SubtractVV(v.wB, v.wA);
         v.a = 0;
      }
      if (this.m_count > 1) {
         var metric1 = cache.metric;
         var metric2 = this.GetMetric();
         if (metric2 < .5 * metric1 || 2.0 * metric1 < metric2 || metric2 < Number.MIN_VALUE) {
            this.m_count = 0;
         }
      }
      if (this.m_count == 0) {
         v = vertices[0];
         v.indexA = 0;
         v.indexB = 0;
         wALocal = proxyA.GetVertex(0);
         wBLocal = proxyB.GetVertex(0);
         v.wA = b2Math.MulX(transformA, wALocal);
         v.wB = b2Math.MulX(transformB, wBLocal);
         v.w = b2Math.SubtractVV(v.wB, v.wA);
         this.m_count = 1;
      }
   }
   b2Simplex.prototype.WriteCache = function (cache) {
      cache.metric = this.GetMetric();
      cache.count = Box2D.parseUInt(this.m_count);
      var vertices = this.m_vertices;
      for (var i = 0; i < this.m_count; i++) {
         cache.indexA[i] = Box2D.parseUInt(vertices[i].indexA);
         cache.indexB[i] = Box2D.parseUInt(vertices[i].indexB);
      }
   }
   b2Simplex.prototype.GetSearchDirection = function () {
      switch (this.m_count) {
      case 1:
         return this.m_v1.w.GetNegative();
      case 2:
         {
            var e12 = b2Math.SubtractVV(this.m_v2.w, this.m_v1.w);
            var sgn = b2Math.CrossVV(e12, this.m_v1.w.GetNegative());
            if (sgn > 0.0) {
               return b2Math.CrossFV(1.0, e12);
            }
            else {
               return b2Math.CrossVF(e12, 1.0);
            }
         }
      default:
         b2Settings.b2Assert(false);
         return new b2Vec2();
      }
   }
   b2Simplex.prototype.GetClosestPoint = function () {
      switch (this.m_count) {
      case 0:
         b2Settings.b2Assert(false);
         return new b2Vec2();
      case 1:
         return this.m_v1.w;
      case 2:
         return new b2Vec2(this.m_v1.a * this.m_v1.w.x + this.m_v2.a * this.m_v2.w.x, this.m_v1.a * this.m_v1.w.y + this.m_v2.a * this.m_v2.w.y);
      default:
         b2Settings.b2Assert(false);
         return new b2Vec2();
      }
   }
   b2Simplex.prototype.GetWitnessPoints = function (pA, pB) {
      switch (this.m_count) {
      case 0:
         b2Settings.b2Assert(false);
         break;
      case 1:
         pA.SetV(this.m_v1.wA);
         pB.SetV(this.m_v1.wB);
         break;
      case 2:
         pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x;
         pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y;
         pB.x = this.m_v1.a * this.m_v1.wB.x + this.m_v2.a * this.m_v2.wB.x;
         pB.y = this.m_v1.a * this.m_v1.wB.y + this.m_v2.a * this.m_v2.wB.y;
         break;
      case 3:
         pB.x = pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x + this.m_v3.a * this.m_v3.wA.x;
         pB.y = pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y + this.m_v3.a * this.m_v3.wA.y;
         break;
      default:
         b2Settings.b2Assert(false);
         break;
      }
   }
   b2Simplex.prototype.GetMetric = function () {
      switch (this.m_count) {
      case 0:
         b2Settings.b2Assert(false);
         return 0.0;
      case 1:
         return 0.0;
      case 2:
         return b2Math.SubtractVV(this.m_v1.w, this.m_v2.w).Length();
      case 3:
         return b2Math.CrossVV(b2Math.SubtractVV(this.m_v2.w, this.m_v1.w), b2Math.SubtractVV(this.m_v3.w, this.m_v1.w));
      default:
         b2Settings.b2Assert(false);
         return 0.0;
      }
   }
   b2Simplex.prototype.Solve2 = function () {
      var w1 = this.m_v1.w;
      var w2 = this.m_v2.w;
      var e12 = b2Math.SubtractVV(w2, w1);
      var d12_2 = (-(w1.x * e12.x + w1.y * e12.y));
      if (d12_2 <= 0.0) {
         this.m_v1.a = 1.0;
         this.m_count = 1;
         return;
      }
      var d12_1 = (w2.x * e12.x + w2.y * e12.y);
      if (d12_1 <= 0.0) {
         this.m_v2.a = 1.0;
         this.m_count = 1;
         this.m_v1.Set(this.m_v2);
         return;
      }
      var inv_d12 = 1.0 / (d12_1 + d12_2);
      this.m_v1.a = d12_1 * inv_d12;
      this.m_v2.a = d12_2 * inv_d12;
      this.m_count = 2;
   }
   b2Simplex.prototype.Solve3 = function () {
      var w1 = this.m_v1.w;
      var w2 = this.m_v2.w;
      var w3 = this.m_v3.w;
      var e12 = b2Math.SubtractVV(w2, w1);
      var w1e12 = b2Math.Dot(w1, e12);
      var w2e12 = b2Math.Dot(w2, e12);
      var d12_1 = w2e12;
      var d12_2 = (-w1e12);
      var e13 = b2Math.SubtractVV(w3, w1);
      var w1e13 = b2Math.Dot(w1, e13);
      var w3e13 = b2Math.Dot(w3, e13);
      var d13_1 = w3e13;
      var d13_2 = (-w1e13);
      var e23 = b2Math.SubtractVV(w3, w2);
      var w2e23 = b2Math.Dot(w2, e23);
      var w3e23 = b2Math.Dot(w3, e23);
      var d23_1 = w3e23;
      var d23_2 = (-w2e23);
      var n123 = b2Math.CrossVV(e12, e13);
      var d123_1 = n123 * b2Math.CrossVV(w2, w3);
      var d123_2 = n123 * b2Math.CrossVV(w3, w1);
      var d123_3 = n123 * b2Math.CrossVV(w1, w2);
      if (d12_2 <= 0.0 && d13_2 <= 0.0) {
         this.m_v1.a = 1.0;
         this.m_count = 1;
         return;
      }
      if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {
         var inv_d12 = 1.0 / (d12_1 + d12_2);
         this.m_v1.a = d12_1 * inv_d12;
         this.m_v2.a = d12_2 * inv_d12;
         this.m_count = 2;
         return;
      }
      if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {
         var inv_d13 = 1.0 / (d13_1 + d13_2);
         this.m_v1.a = d13_1 * inv_d13;
         this.m_v3.a = d13_2 * inv_d13;
         this.m_count = 2;
         this.m_v2.Set(this.m_v3);
         return;
      }
      if (d12_1 <= 0.0 && d23_2 <= 0.0) {
         this.m_v2.a = 1.0;
         this.m_count = 1;
         this.m_v1.Set(this.m_v2);
         return;
      }
      if (d13_1 <= 0.0 && d23_1 <= 0.0) {
         this.m_v3.a = 1.0;
         this.m_count = 1;
         this.m_v1.Set(this.m_v3);
         return;
      }
      if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {
         var inv_d23 = 1.0 / (d23_1 + d23_2);
         this.m_v2.a = d23_1 * inv_d23;
         this.m_v3.a = d23_2 * inv_d23;
         this.m_count = 2;
         this.m_v1.Set(this.m_v3);
         return;
      }
      var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);
      this.m_v1.a = d123_1 * inv_d123;
      this.m_v2.a = d123_2 * inv_d123;
      this.m_v3.a = d123_3 * inv_d123;
      this.m_count = 3;
   }
   b2SimplexCache.b2SimplexCache = function () {
      this.indexA = new Vector_a2j_Number(3);
      this.indexB = new Vector_a2j_Number(3);
   };
   b2SimplexVertex.b2SimplexVertex = function () {};
   b2SimplexVertex.prototype.Set = function (other) {
      this.wA.SetV(other.wA);
      this.wB.SetV(other.wB);
      this.w.SetV(other.w);
      this.a = other.a;
      this.indexA = other.indexA;
      this.indexB = other.indexB;
   }
   b2TimeOfImpact.b2TimeOfImpact = function () {};
   b2TimeOfImpact.TimeOfImpact = function (input) {
      ++b2TimeOfImpact.b2_toiCalls;
      var proxyA = input.proxyA;
      var proxyB = input.proxyB;
      var sweepA = input.sweepA;
      var sweepB = input.sweepB;
      b2Settings.b2Assert(sweepA.t0 == sweepB.t0);
      b2Settings.b2Assert(1.0 - sweepA.t0 > Number.MIN_VALUE);
      var radius = proxyA.m_radius + proxyB.m_radius;
      var tolerance = input.tolerance;
      var alpha = 0.0;
      var k_maxIterations = 1000;
      var iter = 0;
      var target = 0.0;
      b2TimeOfImpact.s_cache.count = 0;
      b2TimeOfImpact.s_distanceInput.useRadii = false;
      for (;;) {
         sweepA.GetTransform(b2TimeOfImpact.s_xfA, alpha);
         sweepB.GetTransform(b2TimeOfImpact.s_xfB, alpha);
         b2TimeOfImpact.s_distanceInput.proxyA = proxyA;
         b2TimeOfImpact.s_distanceInput.proxyB = proxyB;
         b2TimeOfImpact.s_distanceInput.transformA = b2TimeOfImpact.s_xfA;
         b2TimeOfImpact.s_distanceInput.transformB = b2TimeOfImpact.s_xfB;
         b2Distance.Distance(b2TimeOfImpact.s_distanceOutput, b2TimeOfImpact.s_cache, b2TimeOfImpact.s_distanceInput);
         if (b2TimeOfImpact.s_distanceOutput.distance <= 0.0) {
            alpha = 1.0;
            break;
         }
         b2TimeOfImpact.s_fcn.Initialize(b2TimeOfImpact.s_cache, proxyA, b2TimeOfImpact.s_xfA, proxyB, b2TimeOfImpact.s_xfB);
         var separation = b2TimeOfImpact.s_fcn.Evaluate(b2TimeOfImpact.s_xfA, b2TimeOfImpact.s_xfB);
         if (separation <= 0.0) {
            alpha = 1.0;
            break;
         }
         if (iter == 0) {
            if (separation > radius) {
               target = b2Math.Max(radius - tolerance, 0.75 * radius);
            }
            else {
               target = b2Math.Max(separation - tolerance, 0.02 * radius);
            }
         }
         if (separation - target < 0.5 * tolerance) {
            if (iter == 0) {
               alpha = 1.0;
               break;
            }
            break;
         }
         var newAlpha = alpha; {
            var x1 = alpha;
            var x2 = 1.0;
            var f1 = separation;
            sweepA.GetTransform(b2TimeOfImpact.s_xfA, x2);
            sweepB.GetTransform(b2TimeOfImpact.s_xfB, x2);
            var f2 = b2TimeOfImpact.s_fcn.Evaluate(b2TimeOfImpact.s_xfA, b2TimeOfImpact.s_xfB);
            if (f2 >= target) {
               alpha = 1.0;
               break;
            }
            var rootIterCount = 0;
            for (;;) {
               var x = 0;
               if (rootIterCount & 1) {
                  x = x1 + (target - f1) * (x2 - x1) / (f2 - f1);
               }
               else {
                  x = 0.5 * (x1 + x2);
               }
               sweepA.GetTransform(b2TimeOfImpact.s_xfA, x);
               sweepB.GetTransform(b2TimeOfImpact.s_xfB, x);
               var f = b2TimeOfImpact.s_fcn.Evaluate(b2TimeOfImpact.s_xfA, b2TimeOfImpact.s_xfB);
               if (b2Math.Abs(f - target) < 0.025 * tolerance) {
                  newAlpha = x;
                  break;
               }
               if (f > target) {
                  x1 = x;
                  f1 = f;
               }
               else {
                  x2 = x;
                  f2 = f;
               }++rootIterCount;
               ++b2TimeOfImpact.b2_toiRootIters;
               if (rootIterCount == 50) {
                  break;
               }
            }
            b2TimeOfImpact.b2_toiMaxRootIters = b2Math.Max(b2TimeOfImpact.b2_toiMaxRootIters, rootIterCount);
         }
         if (newAlpha < (1.0 + 100.0 * Number.MIN_VALUE) * alpha) {
            break;
         }
         alpha = newAlpha;
         iter++;
         ++b2TimeOfImpact.b2_toiIters;
         if (iter == k_maxIterations) {
            break;
         }
      }
      b2TimeOfImpact.b2_toiMaxIters = b2Math.Max(b2TimeOfImpact.b2_toiMaxIters, iter);
      return alpha;
   }
   Box2D.postDefs.push(function () {
      Box2D.Collision.b2TimeOfImpact.b2_toiCalls = 0;
      Box2D.Collision.b2TimeOfImpact.b2_toiIters = 0;
      Box2D.Collision.b2TimeOfImpact.b2_toiMaxIters = 0;
      Box2D.Collision.b2TimeOfImpact.b2_toiRootIters = 0;
      Box2D.Collision.b2TimeOfImpact.b2_toiMaxRootIters = 0;
      Box2D.Collision.b2TimeOfImpact.s_cache = new b2SimplexCache();
      Box2D.Collision.b2TimeOfImpact.s_distanceInput = new b2DistanceInput();
      Box2D.Collision.b2TimeOfImpact.s_xfA = new b2Transform();
      Box2D.Collision.b2TimeOfImpact.s_xfB = new b2Transform();
      Box2D.Collision.b2TimeOfImpact.s_fcn = new b2SeparationFunction();
      Box2D.Collision.b2TimeOfImpact.s_distanceOutput = new b2DistanceOutput();
   });
   b2TOIInput.b2TOIInput = function () {
      this.proxyA = new b2DistanceProxy();
      this.proxyB = new b2DistanceProxy();
      this.sweepA = new b2Sweep();
      this.sweepB = new b2Sweep();
   };
   b2WorldManifold.b2WorldManifold = function () {
      this.m_normal = new b2Vec2();
   };
   b2WorldManifold.prototype.b2WorldManifold = function () {
      this.m_points = new Vector(b2Settings.b2_maxManifoldPoints);
      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {
         this.m_points[i] = new b2Vec2();
      }
   }
   b2WorldManifold.prototype.Initialize = function (manifold, xfA, radiusA, xfB, radiusB) {
      if (radiusA === undefined) radiusA = 0;
      if (radiusB === undefined) radiusB = 0;
      if (manifold.m_pointCount == 0) {
         return;
      }
      var i = 0;
      var tVec;
      var tMat;
      var normalX = 0;
      var normalY = 0;
      var planePointX = 0;
      var planePointY = 0;
      var clipPointX = 0;
      var clipPointY = 0;
      switch (manifold.m_type) {
      case b2Manifold.e_circles:
         {
            tMat = xfA.R;
            tVec = manifold.m_localPoint;
            var pointAX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            var pointAY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            tMat = xfB.R;
            tVec = manifold.m_points[0].m_localPoint;
            var pointBX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            var pointBY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            var dX = pointBX - pointAX;
            var dY = pointBY - pointAY;
            var d2 = dX * dX + dY * dY;
            if (d2 > Number.MIN_VALUE * Number.MIN_VALUE) {
               var d = Math.sqrt(d2);
               this.m_normal.x = dX / d;
               this.m_normal.y = dY / d;
            }
            else {
               this.m_normal.x = 1;
               this.m_normal.y = 0;
            }
            var cAX = pointAX + radiusA * this.m_normal.x;
            var cAY = pointAY + radiusA * this.m_normal.y;
            var cBX = pointBX - radiusB * this.m_normal.x;
            var cBY = pointBY - radiusB * this.m_normal.y;
            this.m_points[0].x = 0.5 * (cAX + cBX);
            this.m_points[0].y = 0.5 * (cAY + cBY);
         }
         break;
      case b2Manifold.e_faceA:
         {
            tMat = xfA.R;
            tVec = manifold.m_localPlaneNormal;
            normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            tMat = xfA.R;
            tVec = manifold.m_localPoint;
            planePointX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            planePointY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            this.m_normal.x = normalX;
            this.m_normal.y = normalY;
            for (i = 0;
            i < manifold.m_pointCount; i++) {
               tMat = xfB.R;
               tVec = manifold.m_points[i].m_localPoint;
               clipPointX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
               clipPointY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
               this.m_points[i].x = clipPointX + 0.5 * (radiusA - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusB) * normalX;
               this.m_points[i].y = clipPointY + 0.5 * (radiusA - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusB) * normalY;
            }
         }
         break;
      case b2Manifold.e_faceB:
         {
            tMat = xfB.R;
            tVec = manifold.m_localPlaneNormal;
            normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            tMat = xfB.R;
            tVec = manifold.m_localPoint;
            planePointX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            planePointY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            this.m_normal.x = (-normalX);
            this.m_normal.y = (-normalY);
            for (i = 0;
            i < manifold.m_pointCount; i++) {
               tMat = xfA.R;
               tVec = manifold.m_points[i].m_localPoint;
               clipPointX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
               clipPointY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
               this.m_points[i].x = clipPointX + 0.5 * (radiusB - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusA) * normalX;
               this.m_points[i].y = clipPointY + 0.5 * (radiusB - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusA) * normalY;
            }
         }
         break;
      }
   }
   ClipVertex.ClipVertex = function () {
      this.v = new b2Vec2();
      this.id = new b2ContactID();
   };
   ClipVertex.prototype.Set = function (other) {
      this.v.SetV(other.v);
      this.id.Set(other.id);
   }
   Features.Features = function () {};
   Object.defineProperty(Features.prototype, 'referenceEdge', {
      enumerable: false,
      configurable: true,
      get: function () {
         return this._referenceEdge;
      }
   });
   Object.defineProperty(Features.prototype, 'referenceEdge', {
      enumerable: false,
      configurable: true,
      set: function (value) {
         if (value === undefined) value = 0;
         this._referenceEdge = value;
         this._m_id._key = (this._m_id._key & 0xffffff00) | (this._referenceEdge & 0x000000ff);
      }
   });
   Object.defineProperty(Features.prototype, 'incidentEdge', {
      enumerable: false,
      configurable: true,
      get: function () {
         return this._incidentEdge;
      }
   });
   Object.defineProperty(Features.prototype, 'incidentEdge', {
      enumerable: false,
      configurable: true,
      set: function (value) {
         if (value === undefined) value = 0;
         this._incidentEdge = value;
         this._m_id._key = (this._m_id._key & 0xffff00ff) | ((this._incidentEdge << 8) & 0x0000ff00);
      }
   });
   Object.defineProperty(Features.prototype, 'incidentVertex', {
      enumerable: false,
      configurable: true,
      get: function () {
         return this._incidentVertex;
      }
   });
   Object.defineProperty(Features.prototype, 'incidentVertex', {
      enumerable: false,
      configurable: true,
      set: function (value) {
         if (value === undefined) value = 0;
         this._incidentVertex = value;
         this._m_id._key = (this._m_id._key & 0xff00ffff) | ((this._incidentVertex << 16) & 0x00ff0000);
      }
   });
   Object.defineProperty(Features.prototype, 'flip', {
      enumerable: false,
      configurable: true,
      get: function () {
         return this._flip;
      }
   });
   Object.defineProperty(Features.prototype, 'flip', {
      enumerable: false,
      configurable: true,
      set: function (value) {
         if (value === undefined) value = 0;
         this._flip = value;
         this._m_id._key = (this._m_id._key & 0x00ffffff) | ((this._flip << 24) & 0xff000000);
      }
   });
})();
(function () {
   var b2Color = Box2D.Common.b2Color,
      b2internal = Box2D.Common.b2internal,
      b2Settings = Box2D.Common.b2Settings,
      b2CircleShape = Box2D.Collision.Shapes.b2CircleShape,
      b2EdgeChainDef = Box2D.Collision.Shapes.b2EdgeChainDef,
      b2EdgeShape = Box2D.Collision.Shapes.b2EdgeShape,
      b2MassData = Box2D.Collision.Shapes.b2MassData,
      b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape,
      b2Shape = Box2D.Collision.Shapes.b2Shape,
      b2Mat22 = Box2D.Common.Math.b2Mat22,
      b2Mat33 = Box2D.Common.Math.b2Mat33,
      b2Math = Box2D.Common.Math.b2Math,
      b2Sweep = Box2D.Common.Math.b2Sweep,
      b2Transform = Box2D.Common.Math.b2Transform,
      b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2Vec3 = Box2D.Common.Math.b2Vec3,
      b2Body = Box2D.Dynamics.b2Body,
      b2BodyDef = Box2D.Dynamics.b2BodyDef,
      b2ContactFilter = Box2D.Dynamics.b2ContactFilter,
      b2ContactImpulse = Box2D.Dynamics.b2ContactImpulse,
      b2ContactListener = Box2D.Dynamics.b2ContactListener,
      b2ContactManager = Box2D.Dynamics.b2ContactManager,
      b2DebugDraw = Box2D.Dynamics.b2DebugDraw,
      b2DestructionListener = Box2D.Dynamics.b2DestructionListener,
      b2FilterData = Box2D.Dynamics.b2FilterData,
      b2Fixture = Box2D.Dynamics.b2Fixture,
      b2FixtureDef = Box2D.Dynamics.b2FixtureDef,
      b2Island = Box2D.Dynamics.b2Island,
      b2TimeStep = Box2D.Dynamics.b2TimeStep,
      b2World = Box2D.Dynamics.b2World,
      b2AABB = Box2D.Collision.b2AABB,
      b2Bound = Box2D.Collision.b2Bound,
      b2BoundValues = Box2D.Collision.b2BoundValues,
      b2Collision = Box2D.Collision.b2Collision,
      b2ContactID = Box2D.Collision.b2ContactID,
      b2ContactPoint = Box2D.Collision.b2ContactPoint,
      b2Distance = Box2D.Collision.b2Distance,
      b2DistanceInput = Box2D.Collision.b2DistanceInput,
      b2DistanceOutput = Box2D.Collision.b2DistanceOutput,
      b2DistanceProxy = Box2D.Collision.b2DistanceProxy,
      b2DynamicTree = Box2D.Collision.b2DynamicTree,
      b2DynamicTreeBroadPhase = Box2D.Collision.b2DynamicTreeBroadPhase,
      b2DynamicTreeNode = Box2D.Collision.b2DynamicTreeNode,
      b2DynamicTreePair = Box2D.Collision.b2DynamicTreePair,
      b2Manifold = Box2D.Collision.b2Manifold,
      b2ManifoldPoint = Box2D.Collision.b2ManifoldPoint,
      b2Point = Box2D.Collision.b2Point,
      b2RayCastInput = Box2D.Collision.b2RayCastInput,
      b2RayCastOutput = Box2D.Collision.b2RayCastOutput,
      b2Segment = Box2D.Collision.b2Segment,
      b2SeparationFunction = Box2D.Collision.b2SeparationFunction,
      b2Simplex = Box2D.Collision.b2Simplex,
      b2SimplexCache = Box2D.Collision.b2SimplexCache,
      b2SimplexVertex = Box2D.Collision.b2SimplexVertex,
      b2TimeOfImpact = Box2D.Collision.b2TimeOfImpact,
      b2TOIInput = Box2D.Collision.b2TOIInput,
      b2WorldManifold = Box2D.Collision.b2WorldManifold,
      ClipVertex = Box2D.Collision.ClipVertex,
      Features = Box2D.Collision.Features,
      IBroadPhase = Box2D.Collision.IBroadPhase;

   Box2D.inherit(b2CircleShape, Box2D.Collision.Shapes.b2Shape);
   b2CircleShape.prototype.__super = Box2D.Collision.Shapes.b2Shape.prototype;
   b2CircleShape.b2CircleShape = function () {
      Box2D.Collision.Shapes.b2Shape.b2Shape.apply(this, arguments);
      this.m_p = new b2Vec2();
   };
   b2CircleShape.prototype.Copy = function () {
      var s = new b2CircleShape();
      s.Set(this);
      return s;
   }
   b2CircleShape.prototype.Set = function (other) {
      this.__super.Set.call(this, other);
      if (Box2D.is(other, b2CircleShape)) {
         var other2 = (other instanceof b2CircleShape ? other : null);
         this.m_p.SetV(other2.m_p);
      }
   }
   b2CircleShape.prototype.TestPoint = function (transform, p) {
      var tMat = transform.R;
      var dX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);
      var dY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);
      dX = p.x - dX;
      dY = p.y - dY;
      return (dX * dX + dY * dY) <= this.m_radius * this.m_radius;
   }
   b2CircleShape.prototype.RayCast = function (output, input, transform) {
      var tMat = transform.R;
      var positionX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);
      var positionY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);
      var sX = input.p1.x - positionX;
      var sY = input.p1.y - positionY;
      var b = (sX * sX + sY * sY) - this.m_radius * this.m_radius;
      var rX = input.p2.x - input.p1.x;
      var rY = input.p2.y - input.p1.y;
      var c = (sX * rX + sY * rY);
      var rr = (rX * rX + rY * rY);
      var sigma = c * c - rr * b;
      if (sigma < 0.0 || rr < Number.MIN_VALUE) {
         return false;
      }
      var a = (-(c + Math.sqrt(sigma)));
      if (0.0 <= a && a <= input.maxFraction * rr) {
         a /= rr;
         output.fraction = a;
         output.normal.x = sX + a * rX;
         output.normal.y = sY + a * rY;
         output.normal.Normalize();
         return true;
      }
      return false;
   }
   b2CircleShape.prototype.ComputeAABB = function (aabb, transform) {
      var tMat = transform.R;
      var pX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);
      var pY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);
      aabb.lowerBound.Set(pX - this.m_radius, pY - this.m_radius);
      aabb.upperBound.Set(pX + this.m_radius, pY + this.m_radius);
   }
   b2CircleShape.prototype.ComputeMass = function (massData, density) {
      if (density === undefined) density = 0;
      massData.mass = density * b2Settings.b2_pi * this.m_radius * this.m_radius;
      massData.center.SetV(this.m_p);
      massData.I = massData.mass * (0.5 * this.m_radius * this.m_radius + (this.m_p.x * this.m_p.x + this.m_p.y * this.m_p.y));
   }
   b2CircleShape.prototype.ComputeSubmergedArea = function (normal, offset, xf, c) {
      if (offset === undefined) offset = 0;
      var p = b2Math.MulX(xf, this.m_p);
      var l = (-(b2Math.Dot(normal, p) - offset));
      if (l < (-this.m_radius) + Number.MIN_VALUE) {
         return 0;
      }
      if (l > this.m_radius) {
         c.SetV(p);
         return Math.PI * this.m_radius * this.m_radius;
      }
      var r2 = this.m_radius * this.m_radius;
      var l2 = l * l;
      var area = r2 * (Math.asin(l / this.m_radius) + Math.PI / 2) + l * Math.sqrt(r2 - l2);
      var com = (-2 / 3 * Math.pow(r2 - l2, 1.5) / area);
      c.x = p.x + normal.x * com;
      c.y = p.y + normal.y * com;
      return area;
   }
   b2CircleShape.prototype.GetLocalPosition = function () {
      return this.m_p;
   }
   b2CircleShape.prototype.SetLocalPosition = function (position) {
      this.m_p.SetV(position);
   }
   b2CircleShape.prototype.GetRadius = function () {
      return this.m_radius;
   }
   b2CircleShape.prototype.SetRadius = function (radius) {
      if (radius === undefined) radius = 0;
      this.m_radius = radius;
   }
   b2CircleShape.prototype.b2CircleShape = function (radius) {
      if (radius === undefined) radius = 0;
      this.__super.b2Shape.call(this);
      this.m_type = b2Shape.e_circleShape;
      this.m_radius = radius;
   }
   b2EdgeChainDef.b2EdgeChainDef = function () {};
   b2EdgeChainDef.prototype.b2EdgeChainDef = function () {
      this.vertexCount = 0;
      this.isALoop = true;
      this.vertices = [];
   }
   Box2D.inherit(b2EdgeShape, Box2D.Collision.Shapes.b2Shape);
   b2EdgeShape.prototype.__super = Box2D.Collision.Shapes.b2Shape.prototype;
   b2EdgeShape.b2EdgeShape = function () {
      Box2D.Collision.Shapes.b2Shape.b2Shape.apply(this, arguments);
      this.s_supportVec = new b2Vec2();
      this.m_v1 = new b2Vec2();
      this.m_v2 = new b2Vec2();
      this.m_coreV1 = new b2Vec2();
      this.m_coreV2 = new b2Vec2();
      this.m_normal = new b2Vec2();
      this.m_direction = new b2Vec2();
      this.m_cornerDir1 = new b2Vec2();
      this.m_cornerDir2 = new b2Vec2();
   };
   b2EdgeShape.prototype.TestPoint = function (transform, p) {
      return false;
   }
   b2EdgeShape.prototype.RayCast = function (output, input, transform) {
      var tMat;
      var rX = input.p2.x - input.p1.x;
      var rY = input.p2.y - input.p1.y;
      tMat = transform.R;
      var v1X = transform.position.x + (tMat.col1.x * this.m_v1.x + tMat.col2.x * this.m_v1.y);
      var v1Y = transform.position.y + (tMat.col1.y * this.m_v1.x + tMat.col2.y * this.m_v1.y);
      var nX = transform.position.y + (tMat.col1.y * this.m_v2.x + tMat.col2.y * this.m_v2.y) - v1Y;
      var nY = (-(transform.position.x + (tMat.col1.x * this.m_v2.x + tMat.col2.x * this.m_v2.y) - v1X));
      var k_slop = 100.0 * Number.MIN_VALUE;
      var denom = (-(rX * nX + rY * nY));
      if (denom > k_slop) {
         var bX = input.p1.x - v1X;
         var bY = input.p1.y - v1Y;
         var a = (bX * nX + bY * nY);
         if (0.0 <= a && a <= input.maxFraction * denom) {
            var mu2 = (-rX * bY) + rY * bX;
            if ((-k_slop * denom) <= mu2 && mu2 <= denom * (1.0 + k_slop)) {
               a /= denom;
               output.fraction = a;
               var nLen = Math.sqrt(nX * nX + nY * nY);
               output.normal.x = nX / nLen;
               output.normal.y = nY / nLen;
               return true;
            }
         }
      }
      return false;
   }
   b2EdgeShape.prototype.ComputeAABB = function (aabb, transform) {
      var tMat = transform.R;
      var v1X = transform.position.x + (tMat.col1.x * this.m_v1.x + tMat.col2.x * this.m_v1.y);
      var v1Y = transform.position.y + (tMat.col1.y * this.m_v1.x + tMat.col2.y * this.m_v1.y);
      var v2X = transform.position.x + (tMat.col1.x * this.m_v2.x + tMat.col2.x * this.m_v2.y);
      var v2Y = transform.position.y + (tMat.col1.y * this.m_v2.x + tMat.col2.y * this.m_v2.y);
      if (v1X < v2X) {
         aabb.lowerBound.x = v1X;
         aabb.upperBound.x = v2X;
      }
      else {
         aabb.lowerBound.x = v2X;
         aabb.upperBound.x = v1X;
      }
      if (v1Y < v2Y) {
         aabb.lowerBound.y = v1Y;
         aabb.upperBound.y = v2Y;
      }
      else {
         aabb.lowerBound.y = v2Y;
         aabb.upperBound.y = v1Y;
      }
   }
   b2EdgeShape.prototype.ComputeMass = function (massData, density) {
      if (density === undefined) density = 0;
      massData.mass = 0;
      massData.center.SetV(this.m_v1);
      massData.I = 0;
   }
   b2EdgeShape.prototype.ComputeSubmergedArea = function (normal, offset, xf, c) {
      if (offset === undefined) offset = 0;
      var v0 = new b2Vec2(normal.x * offset, normal.y * offset);
      var v1 = b2Math.MulX(xf, this.m_v1);
      var v2 = b2Math.MulX(xf, this.m_v2);
      var d1 = b2Math.Dot(normal, v1) - offset;
      var d2 = b2Math.Dot(normal, v2) - offset;
      if (d1 > 0) {
         if (d2 > 0) {
            return 0;
         }
         else {
            v1.x = (-d2 / (d1 - d2) * v1.x) + d1 / (d1 - d2) * v2.x;
            v1.y = (-d2 / (d1 - d2) * v1.y) + d1 / (d1 - d2) * v2.y;
         }
      }
      else {
         if (d2 > 0) {
            v2.x = (-d2 / (d1 - d2) * v1.x) + d1 / (d1 - d2) * v2.x;
            v2.y = (-d2 / (d1 - d2) * v1.y) + d1 / (d1 - d2) * v2.y;
         }
         else {}
      }
      c.x = (v0.x + v1.x + v2.x) / 3;
      c.y = (v0.y + v1.y + v2.y) / 3;
      return 0.5 * ((v1.x - v0.x) * (v2.y - v0.y) - (v1.y - v0.y) * (v2.x - v0.x));
   }
   b2EdgeShape.prototype.GetLength = function () {
      return this.m_length;
   }
   b2EdgeShape.prototype.GetVertex1 = function () {
      return this.m_v1;
   }
   b2EdgeShape.prototype.GetVertex2 = function () {
      return this.m_v2;
   }
   b2EdgeShape.prototype.GetCoreVertex1 = function () {
      return this.m_coreV1;
   }
   b2EdgeShape.prototype.GetCoreVertex2 = function () {
      return this.m_coreV2;
   }
   b2EdgeShape.prototype.GetNormalVector = function () {
      return this.m_normal;
   }
   b2EdgeShape.prototype.GetDirectionVector = function () {
      return this.m_direction;
   }
   b2EdgeShape.prototype.GetCorner1Vector = function () {
      return this.m_cornerDir1;
   }
   b2EdgeShape.prototype.GetCorner2Vector = function () {
      return this.m_cornerDir2;
   }
   b2EdgeShape.prototype.Corner1IsConvex = function () {
      return this.m_cornerConvex1;
   }
   b2EdgeShape.prototype.Corner2IsConvex = function () {
      return this.m_cornerConvex2;
   }
   b2EdgeShape.prototype.GetFirstVertex = function (xf) {
      var tMat = xf.R;
      return new b2Vec2(xf.position.x + (tMat.col1.x * this.m_coreV1.x + tMat.col2.x * this.m_coreV1.y), xf.position.y + (tMat.col1.y * this.m_coreV1.x + tMat.col2.y * this.m_coreV1.y));
   }
   b2EdgeShape.prototype.GetNextEdge = function () {
      return this.m_nextEdge;
   }
   b2EdgeShape.prototype.GetPrevEdge = function () {
      return this.m_prevEdge;
   }
   b2EdgeShape.prototype.Support = function (xf, dX, dY) {
      if (dX === undefined) dX = 0;
      if (dY === undefined) dY = 0;
      var tMat = xf.R;
      var v1X = xf.position.x + (tMat.col1.x * this.m_coreV1.x + tMat.col2.x * this.m_coreV1.y);
      var v1Y = xf.position.y + (tMat.col1.y * this.m_coreV1.x + tMat.col2.y * this.m_coreV1.y);
      var v2X = xf.position.x + (tMat.col1.x * this.m_coreV2.x + tMat.col2.x * this.m_coreV2.y);
      var v2Y = xf.position.y + (tMat.col1.y * this.m_coreV2.x + tMat.col2.y * this.m_coreV2.y);
      if ((v1X * dX + v1Y * dY) > (v2X * dX + v2Y * dY)) {
         this.s_supportVec.x = v1X;
         this.s_supportVec.y = v1Y;
      }
      else {
         this.s_supportVec.x = v2X;
         this.s_supportVec.y = v2Y;
      }
      return this.s_supportVec;
   }
   b2EdgeShape.prototype.b2EdgeShape = function (v1, v2) {
      this.__super.b2Shape.call(this);
      this.m_type = b2Shape.e_edgeShape;
      this.m_prevEdge = null;
      this.m_nextEdge = null;
      this.m_v1 = v1;
      this.m_v2 = v2;
      this.m_direction.Set(this.m_v2.x - this.m_v1.x, this.m_v2.y - this.m_v1.y);
      this.m_length = this.m_direction.Normalize();
      this.m_normal.Set(this.m_direction.y, (-this.m_direction.x));
      this.m_coreV1.Set((-b2Settings.b2_toiSlop * (this.m_normal.x - this.m_direction.x)) + this.m_v1.x, (-b2Settings.b2_toiSlop * (this.m_normal.y - this.m_direction.y)) + this.m_v1.y);
      this.m_coreV2.Set((-b2Settings.b2_toiSlop * (this.m_normal.x + this.m_direction.x)) + this.m_v2.x, (-b2Settings.b2_toiSlop * (this.m_normal.y + this.m_direction.y)) + this.m_v2.y);
      this.m_cornerDir1 = this.m_normal;
      this.m_cornerDir2.Set((-this.m_normal.x), (-this.m_normal.y));
   }
   b2EdgeShape.prototype.SetPrevEdge = function (edge, core, cornerDir, convex) {
      this.m_prevEdge = edge;
      this.m_coreV1 = core;
      this.m_cornerDir1 = cornerDir;
      this.m_cornerConvex1 = convex;
   }
   b2EdgeShape.prototype.SetNextEdge = function (edge, core, cornerDir, convex) {
      this.m_nextEdge = edge;
      this.m_coreV2 = core;
      this.m_cornerDir2 = cornerDir;
      this.m_cornerConvex2 = convex;
   }
   b2MassData.b2MassData = function () {
      this.mass = 0.0;
      this.center = new b2Vec2(0, 0);
      this.I = 0.0;
   };
   Box2D.inherit(b2PolygonShape, Box2D.Collision.Shapes.b2Shape);
   b2PolygonShape.prototype.__super = Box2D.Collision.Shapes.b2Shape.prototype;
   b2PolygonShape.b2PolygonShape = function () {
      Box2D.Collision.Shapes.b2Shape.b2Shape.apply(this, arguments);
   };
   b2PolygonShape.prototype.Copy = function () {
      var s = new b2PolygonShape();
      s.Set(this);
      return s;
   }
   b2PolygonShape.prototype.Set = function (other) {
      this.__super.Set.call(this, other);
      if (Box2D.is(other, b2PolygonShape)) {
         var other2 = (other instanceof b2PolygonShape ? other : null);
         this.m_centroid.SetV(other2.m_centroid);
         this.m_vertexCount = other2.m_vertexCount;
         this.Reserve(this.m_vertexCount);
         for (var i = 0; i < this.m_vertexCount; i++) {
            this.m_vertices[i].SetV(other2.m_vertices[i]);
            this.m_normals[i].SetV(other2.m_normals[i]);
         }
      }
   }
   b2PolygonShape.prototype.SetAsArray = function (vertices, vertexCount) {
      if (vertexCount === undefined) vertexCount = 0;
      var v = new Vector();
      var i = 0,
         tVec;
      for (i = 0;
      i < vertices.length; ++i) {
         tVec = vertices[i];
         v.push(tVec);
      }
      this.SetAsVector(v, vertexCount);
   }
   b2PolygonShape.AsArray = function (vertices, vertexCount) {
      if (vertexCount === undefined) vertexCount = 0;
      var polygonShape = new b2PolygonShape();
      polygonShape.SetAsArray(vertices, vertexCount);
      return polygonShape;
   }
   b2PolygonShape.prototype.SetAsVector = function (vertices, vertexCount) {
      if (vertexCount === undefined) vertexCount = 0;
      if (vertexCount == 0) vertexCount = vertices.length;
      b2Settings.b2Assert(2 <= vertexCount);
      this.m_vertexCount = vertexCount;
      this.Reserve(vertexCount);
      var i = 0;
      for (i = 0;
      i < this.m_vertexCount; i++) {
         this.m_vertices[i].SetV(vertices[i]);
      }
      for (i = 0;
      i < this.m_vertexCount; ++i) {
         var i1 = parseInt(i);
         var i2 = parseInt(i + 1 < this.m_vertexCount ? i + 1 : 0);
         var edge = b2Math.SubtractVV(this.m_vertices[i2], this.m_vertices[i1]);
         b2Settings.b2Assert(edge.LengthSquared() > Number.MIN_VALUE);
         this.m_normals[i].SetV(b2Math.CrossVF(edge, 1.0));
         this.m_normals[i].Normalize();
      }
      this.m_centroid = b2PolygonShape.ComputeCentroid(this.m_vertices, this.m_vertexCount);
   }
   b2PolygonShape.AsVector = function (vertices, vertexCount) {
      if (vertexCount === undefined) vertexCount = 0;
      var polygonShape = new b2PolygonShape();
      polygonShape.SetAsVector(vertices, vertexCount);
      return polygonShape;
   }
   b2PolygonShape.prototype.SetAsBox = function (hx, hy) {
      if (hx === undefined) hx = 0;
      if (hy === undefined) hy = 0;
      this.m_vertexCount = 4;
      this.Reserve(4);
      this.m_vertices[0].Set((-hx), (-hy));
      this.m_vertices[1].Set(hx, (-hy));
      this.m_vertices[2].Set(hx, hy);
      this.m_vertices[3].Set((-hx), hy);
      this.m_normals[0].Set(0.0, (-1.0));
      this.m_normals[1].Set(1.0, 0.0);
      this.m_normals[2].Set(0.0, 1.0);
      this.m_normals[3].Set((-1.0), 0.0);
      this.m_centroid.SetZero();
   }
   b2PolygonShape.AsBox = function (hx, hy) {
      if (hx === undefined) hx = 0;
      if (hy === undefined) hy = 0;
      var polygonShape = new b2PolygonShape();
      polygonShape.SetAsBox(hx, hy);
      return polygonShape;
   }
   b2PolygonShape.prototype.SetAsOrientedBox = function (hx, hy, center, angle) {
      if (hx === undefined) hx = 0;
      if (hy === undefined) hy = 0;
      if (center === undefined) center = null;
      if (angle === undefined) angle = 0.0;
      this.m_vertexCount = 4;
      this.Reserve(4);
      this.m_vertices[0].Set((-hx), (-hy));
      this.m_vertices[1].Set(hx, (-hy));
      this.m_vertices[2].Set(hx, hy);
      this.m_vertices[3].Set((-hx), hy);
      this.m_normals[0].Set(0.0, (-1.0));
      this.m_normals[1].Set(1.0, 0.0);
      this.m_normals[2].Set(0.0, 1.0);
      this.m_normals[3].Set((-1.0), 0.0);
      this.m_centroid = center;
      var xf = new b2Transform();
      xf.position = center;
      xf.R.Set(angle);
      for (var i = 0; i < this.m_vertexCount; ++i) {
         this.m_vertices[i] = b2Math.MulX(xf, this.m_vertices[i]);
         this.m_normals[i] = b2Math.MulMV(xf.R, this.m_normals[i]);
      }
   }
   b2PolygonShape.AsOrientedBox = function (hx, hy, center, angle) {
      if (hx === undefined) hx = 0;
      if (hy === undefined) hy = 0;
      if (center === undefined) center = null;
      if (angle === undefined) angle = 0.0;
      var polygonShape = new b2PolygonShape();
      polygonShape.SetAsOrientedBox(hx, hy, center, angle);
      return polygonShape;
   }
   b2PolygonShape.prototype.SetAsEdge = function (v1, v2) {
      this.m_vertexCount = 2;
      this.Reserve(2);
      this.m_vertices[0].SetV(v1);
      this.m_vertices[1].SetV(v2);
      this.m_centroid.x = 0.5 * (v1.x + v2.x);
      this.m_centroid.y = 0.5 * (v1.y + v2.y);
      this.m_normals[0] = b2Math.CrossVF(b2Math.SubtractVV(v2, v1), 1.0);
      this.m_normals[0].Normalize();
      this.m_normals[1].x = (-this.m_normals[0].x);
      this.m_normals[1].y = (-this.m_normals[0].y);
   }
   b2PolygonShape.AsEdge = function (v1, v2) {
      var polygonShape = new b2PolygonShape();
      polygonShape.SetAsEdge(v1, v2);
      return polygonShape;
   }
   b2PolygonShape.prototype.TestPoint = function (xf, p) {
      var tVec;
      var tMat = xf.R;
      var tX = p.x - xf.position.x;
      var tY = p.y - xf.position.y;
      var pLocalX = (tX * tMat.col1.x + tY * tMat.col1.y);
      var pLocalY = (tX * tMat.col2.x + tY * tMat.col2.y);
      for (var i = 0; i < this.m_vertexCount; ++i) {
         tVec = this.m_vertices[i];
         tX = pLocalX - tVec.x;
         tY = pLocalY - tVec.y;
         tVec = this.m_normals[i];
         var dot = (tVec.x * tX + tVec.y * tY);
         if (dot > 0.0) {
            return false;
         }
      }
      return true;
   }
   b2PolygonShape.prototype.RayCast = function (output, input, transform) {
      var lower = 0.0;
      var upper = input.maxFraction;
      var tX = 0;
      var tY = 0;
      var tMat;
      var tVec;
      tX = input.p1.x - transform.position.x;
      tY = input.p1.y - transform.position.y;
      tMat = transform.R;
      var p1X = (tX * tMat.col1.x + tY * tMat.col1.y);
      var p1Y = (tX * tMat.col2.x + tY * tMat.col2.y);
      tX = input.p2.x - transform.position.x;
      tY = input.p2.y - transform.position.y;
      tMat = transform.R;
      var p2X = (tX * tMat.col1.x + tY * tMat.col1.y);
      var p2Y = (tX * tMat.col2.x + tY * tMat.col2.y);
      var dX = p2X - p1X;
      var dY = p2Y - p1Y;
      var index = parseInt((-1));
      for (var i = 0; i < this.m_vertexCount; ++i) {
         tVec = this.m_vertices[i];
         tX = tVec.x - p1X;
         tY = tVec.y - p1Y;
         tVec = this.m_normals[i];
         var numerator = (tVec.x * tX + tVec.y * tY);
         var denominator = (tVec.x * dX + tVec.y * dY);
         if (denominator == 0.0) {
            if (numerator < 0.0) {
               return false;
            }
         }
         else {
            if (denominator < 0.0 && numerator < lower * denominator) {
               lower = numerator / denominator;
               index = i;
            }
            else if (denominator > 0.0 && numerator < upper * denominator) {
               upper = numerator / denominator;
            }
         }
         if (upper < lower - Number.MIN_VALUE) {
            return false;
         }
      }
      if (index >= 0) {
         output.fraction = lower;
         tMat = transform.R;
         tVec = this.m_normals[index];
         output.normal.x = (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
         output.normal.y = (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
         return true;
      }
      return false;
   }
   b2PolygonShape.prototype.ComputeAABB = function (aabb, xf) {
      var tMat = xf.R;
      var tVec = this.m_vertices[0];
      var lowerX = xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var lowerY = xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      var upperX = lowerX;
      var upperY = lowerY;
      for (var i = 1; i < this.m_vertexCount; ++i) {
         tVec = this.m_vertices[i];
         var vX = xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
         var vY = xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
         lowerX = lowerX < vX ? lowerX : vX;
         lowerY = lowerY < vY ? lowerY : vY;
         upperX = upperX > vX ? upperX : vX;
         upperY = upperY > vY ? upperY : vY;
      }
      aabb.lowerBound.x = lowerX - this.m_radius;
      aabb.lowerBound.y = lowerY - this.m_radius;
      aabb.upperBound.x = upperX + this.m_radius;
      aabb.upperBound.y = upperY + this.m_radius;
   }
   b2PolygonShape.prototype.ComputeMass = function (massData, density) {
      if (density === undefined) density = 0;
      if (this.m_vertexCount == 2) {
         massData.center.x = 0.5 * (this.m_vertices[0].x + this.m_vertices[1].x);
         massData.center.y = 0.5 * (this.m_vertices[0].y + this.m_vertices[1].y);
         massData.mass = 0.0;
         massData.I = 0.0;
         return;
      }
      var centerX = 0.0;
      var centerY = 0.0;
      var area = 0.0;
      var I = 0.0;
      var p1X = 0.0;
      var p1Y = 0.0;
      var k_inv3 = 1.0 / 3.0;
      for (var i = 0; i < this.m_vertexCount; ++i) {
         var p2 = this.m_vertices[i];
         var p3 = i + 1 < this.m_vertexCount ? this.m_vertices[parseInt(i + 1)] : this.m_vertices[0];
         var e1X = p2.x - p1X;
         var e1Y = p2.y - p1Y;
         var e2X = p3.x - p1X;
         var e2Y = p3.y - p1Y;
         var D = e1X * e2Y - e1Y * e2X;
         var triangleArea = 0.5 * D;area += triangleArea;
         centerX += triangleArea * k_inv3 * (p1X + p2.x + p3.x);
         centerY += triangleArea * k_inv3 * (p1Y + p2.y + p3.y);
         var px = p1X;
         var py = p1Y;
         var ex1 = e1X;
         var ey1 = e1Y;
         var ex2 = e2X;
         var ey2 = e2Y;
         var intx2 = k_inv3 * (0.25 * (ex1 * ex1 + ex2 * ex1 + ex2 * ex2) + (px * ex1 + px * ex2)) + 0.5 * px * px;
         var inty2 = k_inv3 * (0.25 * (ey1 * ey1 + ey2 * ey1 + ey2 * ey2) + (py * ey1 + py * ey2)) + 0.5 * py * py;I += D * (intx2 + inty2);
      }
      massData.mass = density * area;
      centerX *= 1.0 / area;
      centerY *= 1.0 / area;
      massData.center.Set(centerX, centerY);
      massData.I = density * I;
   }
   b2PolygonShape.prototype.ComputeSubmergedArea = function (normal, offset, xf, c) {
      if (offset === undefined) offset = 0;
      var normalL = b2Math.MulTMV(xf.R, normal);
      var offsetL = offset - b2Math.Dot(normal, xf.position);
      var depths = new Vector_a2j_Number();
      var diveCount = 0;
      var intoIndex = parseInt((-1));
      var outoIndex = parseInt((-1));
      var lastSubmerged = false;
      var i = 0;
      for (i = 0;
      i < this.m_vertexCount; ++i) {
         depths[i] = b2Math.Dot(normalL, this.m_vertices[i]) - offsetL;
         var isSubmerged = depths[i] < (-Number.MIN_VALUE);
         if (i > 0) {
            if (isSubmerged) {
               if (!lastSubmerged) {
                  intoIndex = i - 1;
                  diveCount++;
               }
            }
            else {
               if (lastSubmerged) {
                  outoIndex = i - 1;
                  diveCount++;
               }
            }
         }
         lastSubmerged = isSubmerged;
      }
      switch (diveCount) {
      case 0:
         if (lastSubmerged) {
            var md = new b2MassData();
            this.ComputeMass(md, 1);
            c.SetV(b2Math.MulX(xf, md.center));
            return md.mass;
         }
         else {
            return 0;
         }
         break;
      case 1:
         if (intoIndex == (-1)) {
            intoIndex = this.m_vertexCount - 1;
         }
         else {
            outoIndex = this.m_vertexCount - 1;
         }
         break;
      }
      var intoIndex2 = parseInt((intoIndex + 1) % this.m_vertexCount);
      var outoIndex2 = parseInt((outoIndex + 1) % this.m_vertexCount);
      var intoLamdda = (0 - depths[intoIndex]) / (depths[intoIndex2] - depths[intoIndex]);
      var outoLamdda = (0 - depths[outoIndex]) / (depths[outoIndex2] - depths[outoIndex]);
      var intoVec = new b2Vec2(this.m_vertices[intoIndex].x * (1 - intoLamdda) + this.m_vertices[intoIndex2].x * intoLamdda, this.m_vertices[intoIndex].y * (1 - intoLamdda) + this.m_vertices[intoIndex2].y * intoLamdda);
      var outoVec = new b2Vec2(this.m_vertices[outoIndex].x * (1 - outoLamdda) + this.m_vertices[outoIndex2].x * outoLamdda, this.m_vertices[outoIndex].y * (1 - outoLamdda) + this.m_vertices[outoIndex2].y * outoLamdda);
      var area = 0;
      var center = new b2Vec2();
      var p2 = this.m_vertices[intoIndex2];
      var p3;
      i = intoIndex2;
      while (i != outoIndex2) {
         i = (i + 1) % this.m_vertexCount;
         if (i == outoIndex2) p3 = outoVec;
         else p3 = this.m_vertices[i];
         var triangleArea = 0.5 * ((p2.x - intoVec.x) * (p3.y - intoVec.y) - (p2.y - intoVec.y) * (p3.x - intoVec.x));
         area += triangleArea;
         center.x += triangleArea * (intoVec.x + p2.x + p3.x) / 3;
         center.y += triangleArea * (intoVec.y + p2.y + p3.y) / 3;
         p2 = p3;
      }
      center.Multiply(1 / area);
      c.SetV(b2Math.MulX(xf, center));
      return area;
   }
   b2PolygonShape.prototype.GetVertexCount = function () {
      return this.m_vertexCount;
   }
   b2PolygonShape.prototype.GetVertices = function () {
      return this.m_vertices;
   }
   b2PolygonShape.prototype.GetNormals = function () {
      return this.m_normals;
   }
   b2PolygonShape.prototype.GetSupport = function (d) {
      var bestIndex = 0;
      var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
      for (var i = 1; i < this.m_vertexCount; ++i) {
         var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
         if (value > bestValue) {
            bestIndex = i;
            bestValue = value;
         }
      }
      return bestIndex;
   }
   b2PolygonShape.prototype.GetSupportVertex = function (d) {
      var bestIndex = 0;
      var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
      for (var i = 1; i < this.m_vertexCount; ++i) {
         var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
         if (value > bestValue) {
            bestIndex = i;
            bestValue = value;
         }
      }
      return this.m_vertices[bestIndex];
   }
   b2PolygonShape.prototype.Validate = function () {
      return false;
   }
   b2PolygonShape.prototype.b2PolygonShape = function () {
      this.__super.b2Shape.call(this);
      this.m_type = b2Shape.e_polygonShape;
      this.m_centroid = new b2Vec2();
      this.m_vertices = new Vector();
      this.m_normals = new Vector();
   }
   b2PolygonShape.prototype.Reserve = function (count) {
      if (count === undefined) count = 0;
      for (var i = parseInt(this.m_vertices.length); i < count; i++) {
         this.m_vertices[i] = new b2Vec2();
         this.m_normals[i] = new b2Vec2();
      }
   }
   b2PolygonShape.ComputeCentroid = function (vs, count) {
      if (count === undefined) count = 0;
      var c = new b2Vec2();
      var area = 0.0;
      var p1X = 0.0;
      var p1Y = 0.0;
      var inv3 = 1.0 / 3.0;
      for (var i = 0; i < count; ++i) {
         var p2 = vs[i];
         var p3 = i + 1 < count ? vs[parseInt(i + 1)] : vs[0];
         var e1X = p2.x - p1X;
         var e1Y = p2.y - p1Y;
         var e2X = p3.x - p1X;
         var e2Y = p3.y - p1Y;
         var D = (e1X * e2Y - e1Y * e2X);
         var triangleArea = 0.5 * D;area += triangleArea;
         c.x += triangleArea * inv3 * (p1X + p2.x + p3.x);
         c.y += triangleArea * inv3 * (p1Y + p2.y + p3.y);
      }
      c.x *= 1.0 / area;
      c.y *= 1.0 / area;
      return c;
   }
   b2PolygonShape.ComputeOBB = function (obb, vs, count) {
      if (count === undefined) count = 0;
      var i = 0;
      var p = new Vector(count + 1);
      for (i = 0;
      i < count; ++i) {
         p[i] = vs[i];
      }
      p[count] = p[0];
      var minArea = Number.MAX_VALUE;
      for (i = 1;
      i <= count; ++i) {
         var root = p[parseInt(i - 1)];
         var uxX = p[i].x - root.x;
         var uxY = p[i].y - root.y;
         var length = Math.sqrt(uxX * uxX + uxY * uxY);
         uxX /= length;
         uxY /= length;
         var uyX = (-uxY);
         var uyY = uxX;
         var lowerX = Number.MAX_VALUE;
         var lowerY = Number.MAX_VALUE;
         var upperX = (-Number.MAX_VALUE);
         var upperY = (-Number.MAX_VALUE);
         for (var j = 0; j < count; ++j) {
            var dX = p[j].x - root.x;
            var dY = p[j].y - root.y;
            var rX = (uxX * dX + uxY * dY);
            var rY = (uyX * dX + uyY * dY);
            if (rX < lowerX) lowerX = rX;
            if (rY < lowerY) lowerY = rY;
            if (rX > upperX) upperX = rX;
            if (rY > upperY) upperY = rY;
         }
         var area = (upperX - lowerX) * (upperY - lowerY);
         if (area < 0.95 * minArea) {
            minArea = area;
            obb.R.col1.x = uxX;
            obb.R.col1.y = uxY;
            obb.R.col2.x = uyX;
            obb.R.col2.y = uyY;
            var centerX = 0.5 * (lowerX + upperX);
            var centerY = 0.5 * (lowerY + upperY);
            var tMat = obb.R;
            obb.center.x = root.x + (tMat.col1.x * centerX + tMat.col2.x * centerY);
            obb.center.y = root.y + (tMat.col1.y * centerX + tMat.col2.y * centerY);
            obb.extents.x = 0.5 * (upperX - lowerX);
            obb.extents.y = 0.5 * (upperY - lowerY);
         }
      }
   }
   Box2D.postDefs.push(function () {
      Box2D.Collision.Shapes.b2PolygonShape.s_mat = new b2Mat22();
   });
   b2Shape.b2Shape = function () {};
   b2Shape.prototype.Copy = function () {
      return null;
   }
   b2Shape.prototype.Set = function (other) {
      this.m_radius = other.m_radius;
   }
   b2Shape.prototype.GetType = function () {
      return this.m_type;
   }
   b2Shape.prototype.TestPoint = function (xf, p) {
      return false;
   }
   b2Shape.prototype.RayCast = function (output, input, transform) {
      return false;
   }
   b2Shape.prototype.ComputeAABB = function (aabb, xf) {}
   b2Shape.prototype.ComputeMass = function (massData, density) {
      if (density === undefined) density = 0;
   }
   b2Shape.prototype.ComputeSubmergedArea = function (normal, offset, xf, c) {
      if (offset === undefined) offset = 0;
      return 0;
   }
   b2Shape.TestOverlap = function (shape1, transform1, shape2, transform2) {
      var input = new b2DistanceInput();
      input.proxyA = new b2DistanceProxy();
      input.proxyA.Set(shape1);
      input.proxyB = new b2DistanceProxy();
      input.proxyB.Set(shape2);
      input.transformA = transform1;
      input.transformB = transform2;
      input.useRadii = true;
      var simplexCache = new b2SimplexCache();
      simplexCache.count = 0;
      var output = new b2DistanceOutput();
      b2Distance.Distance(output, simplexCache, input);
      return output.distance < 10.0 * Number.MIN_VALUE;
   }
   b2Shape.prototype.b2Shape = function () {
      this.m_type = b2Shape.e_unknownShape;
      this.m_radius = b2Settings.b2_linearSlop;
   }
   Box2D.postDefs.push(function () {
      Box2D.Collision.Shapes.b2Shape.e_unknownShape = parseInt((-1));
      Box2D.Collision.Shapes.b2Shape.e_circleShape = 0;
      Box2D.Collision.Shapes.b2Shape.e_polygonShape = 1;
      Box2D.Collision.Shapes.b2Shape.e_edgeShape = 2;
      Box2D.Collision.Shapes.b2Shape.e_shapeTypeCount = 3;
      Box2D.Collision.Shapes.b2Shape.e_hitCollide = 1;
      Box2D.Collision.Shapes.b2Shape.e_missCollide = 0;
      Box2D.Collision.Shapes.b2Shape.e_startsInsideCollide = parseInt((-1));
   });
})();
(function () {
   var b2Color = Box2D.Common.b2Color,
      b2internal = Box2D.Common.b2internal,
      b2Settings = Box2D.Common.b2Settings,
      b2Mat22 = Box2D.Common.Math.b2Mat22,
      b2Mat33 = Box2D.Common.Math.b2Mat33,
      b2Math = Box2D.Common.Math.b2Math,
      b2Sweep = Box2D.Common.Math.b2Sweep,
      b2Transform = Box2D.Common.Math.b2Transform,
      b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2Vec3 = Box2D.Common.Math.b2Vec3;

   b2Color.b2Color = function () {
      this._r = 0;
      this._g = 0;
      this._b = 0;
   };
   b2Color.prototype.b2Color = function (rr, gg, bb) {
      if (rr === undefined) rr = 0;
      if (gg === undefined) gg = 0;
      if (bb === undefined) bb = 0;
      this._r = Box2D.parseUInt(255 * b2Math.Clamp(rr, 0.0, 1.0));
      this._g = Box2D.parseUInt(255 * b2Math.Clamp(gg, 0.0, 1.0));
      this._b = Box2D.parseUInt(255 * b2Math.Clamp(bb, 0.0, 1.0));
   }
   b2Color.prototype.Set = function (rr, gg, bb) {
      if (rr === undefined) rr = 0;
      if (gg === undefined) gg = 0;
      if (bb === undefined) bb = 0;
      this._r = Box2D.parseUInt(255 * b2Math.Clamp(rr, 0.0, 1.0));
      this._g = Box2D.parseUInt(255 * b2Math.Clamp(gg, 0.0, 1.0));
      this._b = Box2D.parseUInt(255 * b2Math.Clamp(bb, 0.0, 1.0));
   }
   Object.defineProperty(b2Color.prototype, 'r', {
      enumerable: false,
      configurable: true,
      set: function (rr) {
         if (rr === undefined) rr = 0;
         this._r = Box2D.parseUInt(255 * b2Math.Clamp(rr, 0.0, 1.0));
      }
   });
   Object.defineProperty(b2Color.prototype, 'g', {
      enumerable: false,
      configurable: true,
      set: function (gg) {
         if (gg === undefined) gg = 0;
         this._g = Box2D.parseUInt(255 * b2Math.Clamp(gg, 0.0, 1.0));
      }
   });
   Object.defineProperty(b2Color.prototype, 'b', {
      enumerable: false,
      configurable: true,
      set: function (bb) {
         if (bb === undefined) bb = 0;
         this._b = Box2D.parseUInt(255 * b2Math.Clamp(bb, 0.0, 1.0));
      }
   });
   Object.defineProperty(b2Color.prototype, 'color', {
      enumerable: false,
      configurable: true,
      get: function () {
         return (this._r << 16) | (this._g << 8) | (this._b);
      }
   });
   b2Settings.b2Settings = function () {};
   b2Settings.b2MixFriction = function (friction1, friction2) {
      if (friction1 === undefined) friction1 = 0;
      if (friction2 === undefined) friction2 = 0;
      return Math.sqrt(friction1 * friction2);
   }
   b2Settings.b2MixRestitution = function (restitution1, restitution2) {
      if (restitution1 === undefined) restitution1 = 0;
      if (restitution2 === undefined) restitution2 = 0;
      return restitution1 > restitution2 ? restitution1 : restitution2;
   }
   b2Settings.b2Assert = function (a) {
      if (!a) {
         throw "Assertion Failed";
      }
   }
   Box2D.postDefs.push(function () {
      Box2D.Common.b2Settings.VERSION = "2.1alpha";
      Box2D.Common.b2Settings.USHRT_MAX = 0x0000ffff;
      Box2D.Common.b2Settings.b2_pi = Math.PI;
      Box2D.Common.b2Settings.b2_maxManifoldPoints = 2;
      Box2D.Common.b2Settings.b2_aabbExtension = 0.1;
      Box2D.Common.b2Settings.b2_aabbMultiplier = 2.0;
      Box2D.Common.b2Settings.b2_polygonRadius = 2.0 * b2Settings.b2_linearSlop;
      Box2D.Common.b2Settings.b2_linearSlop = 0.005;
      Box2D.Common.b2Settings.b2_angularSlop = 2.0 / 180.0 * b2Settings.b2_pi;
      Box2D.Common.b2Settings.b2_toiSlop = 8.0 * b2Settings.b2_linearSlop;
      Box2D.Common.b2Settings.b2_maxTOIContactsPerIsland = 32;
      Box2D.Common.b2Settings.b2_maxTOIJointsPerIsland = 32;
      Box2D.Common.b2Settings.b2_velocityThreshold = 1.0;
      Box2D.Common.b2Settings.b2_maxLinearCorrection = 0.2;
      Box2D.Common.b2Settings.b2_maxAngularCorrection = 8.0 / 180.0 * b2Settings.b2_pi;
      Box2D.Common.b2Settings.b2_maxTranslation = 2.0;
      Box2D.Common.b2Settings.b2_maxTranslationSquared = b2Settings.b2_maxTranslation * b2Settings.b2_maxTranslation;
      Box2D.Common.b2Settings.b2_maxRotation = 0.5 * b2Settings.b2_pi;
      Box2D.Common.b2Settings.b2_maxRotationSquared = b2Settings.b2_maxRotation * b2Settings.b2_maxRotation;
      Box2D.Common.b2Settings.b2_contactBaumgarte = 0.2;
      Box2D.Common.b2Settings.b2_timeToSleep = 0.5;
      Box2D.Common.b2Settings.b2_linearSleepTolerance = 0.01;
      Box2D.Common.b2Settings.b2_angularSleepTolerance = 2.0 / 180.0 * b2Settings.b2_pi;
   });
})();
(function () {
   var b2AABB = Box2D.Collision.b2AABB,
      b2Color = Box2D.Common.b2Color,
      b2internal = Box2D.Common.b2internal,
      b2Settings = Box2D.Common.b2Settings,
      b2Mat22 = Box2D.Common.Math.b2Mat22,
      b2Mat33 = Box2D.Common.Math.b2Mat33,
      b2Math = Box2D.Common.Math.b2Math,
      b2Sweep = Box2D.Common.Math.b2Sweep,
      b2Transform = Box2D.Common.Math.b2Transform,
      b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2Vec3 = Box2D.Common.Math.b2Vec3;

   b2Mat22.b2Mat22 = function () {
      this.col1 = new b2Vec2();
      this.col2 = new b2Vec2();
   };
   b2Mat22.prototype.b2Mat22 = function () {
      this.SetIdentity();
   }
   b2Mat22.FromAngle = function (angle) {
      if (angle === undefined) angle = 0;
      var mat = new b2Mat22();
      mat.Set(angle);
      return mat;
   }
   b2Mat22.FromVV = function (c1, c2) {
      var mat = new b2Mat22();
      mat.SetVV(c1, c2);
      return mat;
   }
   b2Mat22.prototype.Set = function (angle) {
      if (angle === undefined) angle = 0;
      var c = Math.cos(angle);
      var s = Math.sin(angle);
      this.col1.x = c;
      this.col2.x = (-s);
      this.col1.y = s;
      this.col2.y = c;
   }
   b2Mat22.prototype.SetVV = function (c1, c2) {
      this.col1.SetV(c1);
      this.col2.SetV(c2);
   }
   b2Mat22.prototype.Copy = function () {
      var mat = new b2Mat22();
      mat.SetM(this);
      return mat;
   }
   b2Mat22.prototype.SetM = function (m) {
      this.col1.SetV(m.col1);
      this.col2.SetV(m.col2);
   }
   b2Mat22.prototype.AddM = function (m) {
      this.col1.x += m.col1.x;
      this.col1.y += m.col1.y;
      this.col2.x += m.col2.x;
      this.col2.y += m.col2.y;
   }
   b2Mat22.prototype.SetIdentity = function () {
      this.col1.x = 1.0;
      this.col2.x = 0.0;
      this.col1.y = 0.0;
      this.col2.y = 1.0;
   }
   b2Mat22.prototype.SetZero = function () {
      this.col1.x = 0.0;
      this.col2.x = 0.0;
      this.col1.y = 0.0;
      this.col2.y = 0.0;
   }
   b2Mat22.prototype.GetAngle = function () {
      return Math.atan2(this.col1.y, this.col1.x);
   }
   b2Mat22.prototype.GetInverse = function (out) {
      var a = this.col1.x;
      var b = this.col2.x;
      var c = this.col1.y;
      var d = this.col2.y;
      var det = a * d - b * c;
      if (det != 0.0) {
         det = 1.0 / det;
      }
      out.col1.x = det * d;
      out.col2.x = (-det * b);
      out.col1.y = (-det * c);
      out.col2.y = det * a;
      return out;
   }
   b2Mat22.prototype.Solve = function (out, bX, bY) {
      if (bX === undefined) bX = 0;
      if (bY === undefined) bY = 0;
      var a11 = this.col1.x;
      var a12 = this.col2.x;
      var a21 = this.col1.y;
      var a22 = this.col2.y;
      var det = a11 * a22 - a12 * a21;
      if (det != 0.0) {
         det = 1.0 / det;
      }
      out.x = det * (a22 * bX - a12 * bY);
      out.y = det * (a11 * bY - a21 * bX);
      return out;
   }
   b2Mat22.prototype.Abs = function () {
      this.col1.Abs();
      this.col2.Abs();
   }
   b2Mat33.b2Mat33 = function () {
      this.col1 = new b2Vec3();
      this.col2 = new b2Vec3();
      this.col3 = new b2Vec3();
   };
   b2Mat33.prototype.b2Mat33 = function (c1, c2, c3) {
      if (c1 === undefined) c1 = null;
      if (c2 === undefined) c2 = null;
      if (c3 === undefined) c3 = null;
      if (!c1 && !c2 && !c3) {
         this.col1.SetZero();
         this.col2.SetZero();
         this.col3.SetZero();
      }
      else {
         this.col1.SetV(c1);
         this.col2.SetV(c2);
         this.col3.SetV(c3);
      }
   }
   b2Mat33.prototype.SetVVV = function (c1, c2, c3) {
      this.col1.SetV(c1);
      this.col2.SetV(c2);
      this.col3.SetV(c3);
   }
   b2Mat33.prototype.Copy = function () {
      return new b2Mat33(this.col1, this.col2, this.col3);
   }
   b2Mat33.prototype.SetM = function (m) {
      this.col1.SetV(m.col1);
      this.col2.SetV(m.col2);
      this.col3.SetV(m.col3);
   }
   b2Mat33.prototype.AddM = function (m) {
      this.col1.x += m.col1.x;
      this.col1.y += m.col1.y;
      this.col1.z += m.col1.z;
      this.col2.x += m.col2.x;
      this.col2.y += m.col2.y;
      this.col2.z += m.col2.z;
      this.col3.x += m.col3.x;
      this.col3.y += m.col3.y;
      this.col3.z += m.col3.z;
   }
   b2Mat33.prototype.SetIdentity = function () {
      this.col1.x = 1.0;
      this.col2.x = 0.0;
      this.col3.x = 0.0;
      this.col1.y = 0.0;
      this.col2.y = 1.0;
      this.col3.y = 0.0;
      this.col1.z = 0.0;
      this.col2.z = 0.0;
      this.col3.z = 1.0;
   }
   b2Mat33.prototype.SetZero = function () {
      this.col1.x = 0.0;
      this.col2.x = 0.0;
      this.col3.x = 0.0;
      this.col1.y = 0.0;
      this.col2.y = 0.0;
      this.col3.y = 0.0;
      this.col1.z = 0.0;
      this.col2.z = 0.0;
      this.col3.z = 0.0;
   }
   b2Mat33.prototype.Solve22 = function (out, bX, bY) {
      if (bX === undefined) bX = 0;
      if (bY === undefined) bY = 0;
      var a11 = this.col1.x;
      var a12 = this.col2.x;
      var a21 = this.col1.y;
      var a22 = this.col2.y;
      var det = a11 * a22 - a12 * a21;
      if (det != 0.0) {
         det = 1.0 / det;
      }
      out.x = det * (a22 * bX - a12 * bY);
      out.y = det * (a11 * bY - a21 * bX);
      return out;
   }
   b2Mat33.prototype.Solve33 = function (out, bX, bY, bZ) {
      if (bX === undefined) bX = 0;
      if (bY === undefined) bY = 0;
      if (bZ === undefined) bZ = 0;
      var a11 = this.col1.x;
      var a21 = this.col1.y;
      var a31 = this.col1.z;
      var a12 = this.col2.x;
      var a22 = this.col2.y;
      var a32 = this.col2.z;
      var a13 = this.col3.x;
      var a23 = this.col3.y;
      var a33 = this.col3.z;
      var det = a11 * (a22 * a33 - a32 * a23) + a21 * (a32 * a13 - a12 * a33) + a31 * (a12 * a23 - a22 * a13);
      if (det != 0.0) {
         det = 1.0 / det;
      }
      out.x = det * (bX * (a22 * a33 - a32 * a23) + bY * (a32 * a13 - a12 * a33) + bZ * (a12 * a23 - a22 * a13));
      out.y = det * (a11 * (bY * a33 - bZ * a23) + a21 * (bZ * a13 - bX * a33) + a31 * (bX * a23 - bY * a13));
      out.z = det * (a11 * (a22 * bZ - a32 * bY) + a21 * (a32 * bX - a12 * bZ) + a31 * (a12 * bY - a22 * bX));
      return out;
   }
   b2Math.b2Math = function () {};
   b2Math.IsValid = function (x) {
      if (x === undefined) x = 0;
      return isFinite(x);
   }
   b2Math.Dot = function (a, b) {
      return a.x * b.x + a.y * b.y;
   }
   b2Math.CrossVV = function (a, b) {
      return a.x * b.y - a.y * b.x;
   }
   b2Math.CrossVF = function (a, s) {
      if (s === undefined) s = 0;
      var v = new b2Vec2(s * a.y, (-s * a.x));
      return v;
   }
   b2Math.CrossFV = function (s, a) {
      if (s === undefined) s = 0;
      var v = new b2Vec2((-s * a.y), s * a.x);
      return v;
   }
   b2Math.MulMV = function (A, v) {
      var u = new b2Vec2(A.col1.x * v.x + A.col2.x * v.y, A.col1.y * v.x + A.col2.y * v.y);
      return u;
   }
   b2Math.MulTMV = function (A, v) {
      var u = new b2Vec2(b2Math.Dot(v, A.col1), b2Math.Dot(v, A.col2));
      return u;
   }
   b2Math.MulX = function (T, v) {
      var a = b2Math.MulMV(T.R, v);
      a.x += T.position.x;
      a.y += T.position.y;
      return a;
   }
   b2Math.MulXT = function (T, v) {
      var a = b2Math.SubtractVV(v, T.position);
      var tX = (a.x * T.R.col1.x + a.y * T.R.col1.y);
      a.y = (a.x * T.R.col2.x + a.y * T.R.col2.y);
      a.x = tX;
      return a;
   }
   b2Math.AddVV = function (a, b) {
      var v = new b2Vec2(a.x + b.x, a.y + b.y);
      return v;
   }
   b2Math.SubtractVV = function (a, b) {
      var v = new b2Vec2(a.x - b.x, a.y - b.y);
      return v;
   }
   b2Math.Distance = function (a, b) {
      var cX = a.x - b.x;
      var cY = a.y - b.y;
      return Math.sqrt(cX * cX + cY * cY);
   }
   b2Math.DistanceSquared = function (a, b) {
      var cX = a.x - b.x;
      var cY = a.y - b.y;
      return (cX * cX + cY * cY);
   }
   b2Math.MulFV = function (s, a) {
      if (s === undefined) s = 0;
      var v = new b2Vec2(s * a.x, s * a.y);
      return v;
   }
   b2Math.AddMM = function (A, B) {
      var C = b2Mat22.FromVV(b2Math.AddVV(A.col1, B.col1), b2Math.AddVV(A.col2, B.col2));
      return C;
   }
   b2Math.MulMM = function (A, B) {
      var C = b2Mat22.FromVV(b2Math.MulMV(A, B.col1), b2Math.MulMV(A, B.col2));
      return C;
   }
   b2Math.MulTMM = function (A, B) {
      var c1 = new b2Vec2(b2Math.Dot(A.col1, B.col1), b2Math.Dot(A.col2, B.col1));
      var c2 = new b2Vec2(b2Math.Dot(A.col1, B.col2), b2Math.Dot(A.col2, B.col2));
      var C = b2Mat22.FromVV(c1, c2);
      return C;
   }
   b2Math.Abs = function (a) {
      if (a === undefined) a = 0;
      return a > 0.0 ? a : (-a);
   }
   b2Math.AbsV = function (a) {
      var b = new b2Vec2(b2Math.Abs(a.x), b2Math.Abs(a.y));
      return b;
   }
   b2Math.AbsM = function (A) {
      var B = b2Mat22.FromVV(b2Math.AbsV(A.col1), b2Math.AbsV(A.col2));
      return B;
   }
   b2Math.Min = function (a, b) {
      if (a === undefined) a = 0;
      if (b === undefined) b = 0;
      return a < b ? a : b;
   }
   b2Math.MinV = function (a, b) {
      var c = new b2Vec2(b2Math.Min(a.x, b.x), b2Math.Min(a.y, b.y));
      return c;
   }
   b2Math.Max = function (a, b) {
      if (a === undefined) a = 0;
      if (b === undefined) b = 0;
      return a > b ? a : b;
   }
   b2Math.MaxV = function (a, b) {
      var c = new b2Vec2(b2Math.Max(a.x, b.x), b2Math.Max(a.y, b.y));
      return c;
   }
   b2Math.Clamp = function (a, low, high) {
      if (a === undefined) a = 0;
      if (low === undefined) low = 0;
      if (high === undefined) high = 0;
      return a < low ? low : a > high ? high : a;
   }
   b2Math.ClampV = function (a, low, high) {
      return b2Math.MaxV(low, b2Math.MinV(a, high));
   }
   b2Math.Swap = function (a, b) {
      var tmp = a[0];
      a[0] = b[0];
      b[0] = tmp;
   }
   b2Math.Random = function () {
      return Math.random() * 2 - 1;
   }
   b2Math.RandomRange = function (lo, hi) {
      if (lo === undefined) lo = 0;
      if (hi === undefined) hi = 0;
      var r = Math.random();
      r = (hi - lo) * r + lo;
      return r;
   }
   b2Math.NextPowerOfTwo = function (x) {
      if (x === undefined) x = 0;
      x |= (x >> 1) & 0x7FFFFFFF;
      x |= (x >> 2) & 0x3FFFFFFF;
      x |= (x >> 4) & 0x0FFFFFFF;
      x |= (x >> 8) & 0x00FFFFFF;
      x |= (x >> 16) & 0x0000FFFF;
      return x + 1;
   }
   b2Math.IsPowerOfTwo = function (x) {
      if (x === undefined) x = 0;
      var result = x > 0 && (x & (x - 1)) == 0;
      return result;
   }
   Box2D.postDefs.push(function () {
      Box2D.Common.Math.b2Math.b2Vec2_zero = new b2Vec2(0.0, 0.0);
      Box2D.Common.Math.b2Math.b2Mat22_identity = b2Mat22.FromVV(new b2Vec2(1.0, 0.0), new b2Vec2(0.0, 1.0));
      Box2D.Common.Math.b2Math.b2Transform_identity = new b2Transform(b2Math.b2Vec2_zero, b2Math.b2Mat22_identity);
   });
   b2Sweep.b2Sweep = function () {
      this.localCenter = new b2Vec2();
      this.c0 = new b2Vec2;
      this.c = new b2Vec2();
   };
   b2Sweep.prototype.Set = function (other) {
      this.localCenter.SetV(other.localCenter);
      this.c0.SetV(other.c0);
      this.c.SetV(other.c);
      this.a0 = other.a0;
      this.a = other.a;
      this.t0 = other.t0;
   }
   b2Sweep.prototype.Copy = function () {
      var copy = new b2Sweep();
      copy.localCenter.SetV(this.localCenter);
      copy.c0.SetV(this.c0);
      copy.c.SetV(this.c);
      copy.a0 = this.a0;
      copy.a = this.a;
      copy.t0 = this.t0;
      return copy;
   }
   b2Sweep.prototype.GetTransform = function (xf, alpha) {
      if (alpha === undefined) alpha = 0;
      xf.position.x = (1.0 - alpha) * this.c0.x + alpha * this.c.x;
      xf.position.y = (1.0 - alpha) * this.c0.y + alpha * this.c.y;
      var angle = (1.0 - alpha) * this.a0 + alpha * this.a;
      xf.R.Set(angle);
      var tMat = xf.R;
      xf.position.x -= (tMat.col1.x * this.localCenter.x + tMat.col2.x * this.localCenter.y);
      xf.position.y -= (tMat.col1.y * this.localCenter.x + tMat.col2.y * this.localCenter.y);
   }
   b2Sweep.prototype.Advance = function (t) {
      if (t === undefined) t = 0;
      if (this.t0 < t && 1.0 - this.t0 > Number.MIN_VALUE) {
         var alpha = (t - this.t0) / (1.0 - this.t0);
         this.c0.x = (1.0 - alpha) * this.c0.x + alpha * this.c.x;
         this.c0.y = (1.0 - alpha) * this.c0.y + alpha * this.c.y;
         this.a0 = (1.0 - alpha) * this.a0 + alpha * this.a;
         this.t0 = t;
      }
   }
   b2Transform.b2Transform = function () {
      this.position = new b2Vec2;
      this.R = new b2Mat22();
   };
   b2Transform.prototype.b2Transform = function (pos, r) {
      if (pos === undefined) pos = null;
      if (r === undefined) r = null;
      if (pos) {
         this.position.SetV(pos);
         this.R.SetM(r);
      }
   }
   b2Transform.prototype.Initialize = function (pos, r) {
      this.position.SetV(pos);
      this.R.SetM(r);
   }
   b2Transform.prototype.SetIdentity = function () {
      this.position.SetZero();
      this.R.SetIdentity();
   }
   b2Transform.prototype.Set = function (x) {
      this.position.SetV(x.position);
      this.R.SetM(x.R);
   }
   b2Transform.prototype.GetAngle = function () {
      return Math.atan2(this.R.col1.y, this.R.col1.x);
   }
   b2Vec2.b2Vec2 = function () {};
   b2Vec2.prototype.b2Vec2 = function (x_, y_) {
      if (x_ === undefined) x_ = 0;
      if (y_ === undefined) y_ = 0;
      this.x = x_;
      this.y = y_;
   }
   b2Vec2.prototype.SetZero = function () {
      this.x = 0.0;
      this.y = 0.0;
   }
   b2Vec2.prototype.Set = function (x_, y_) {
      if (x_ === undefined) x_ = 0;
      if (y_ === undefined) y_ = 0;
      this.x = x_;
      this.y = y_;
   }
   b2Vec2.prototype.SetV = function (v) {
      this.x = v.x;
      this.y = v.y;
   }
   b2Vec2.prototype.GetNegative = function () {
      return new b2Vec2((-this.x), (-this.y));
   }
   b2Vec2.prototype.NegativeSelf = function () {
      this.x = (-this.x);
      this.y = (-this.y);
   }
   b2Vec2.Make = function (x_, y_) {
      if (x_ === undefined) x_ = 0;
      if (y_ === undefined) y_ = 0;
      return new b2Vec2(x_, y_);
   }
   b2Vec2.prototype.Copy = function () {
      return new b2Vec2(this.x, this.y);
   }
   b2Vec2.prototype.Add = function (v) {
      this.x += v.x;
      this.y += v.y;
   }
   b2Vec2.prototype.Subtract = function (v) {
      this.x -= v.x;
      this.y -= v.y;
   }
   b2Vec2.prototype.Multiply = function (a) {
      if (a === undefined) a = 0;
      this.x *= a;
      this.y *= a;
   }
   b2Vec2.prototype.MulM = function (A) {
      var tX = this.x;
      this.x = A.col1.x * tX + A.col2.x * this.y;
      this.y = A.col1.y * tX + A.col2.y * this.y;
   }
   b2Vec2.prototype.MulTM = function (A) {
      var tX = b2Math.Dot(this, A.col1);
      this.y = b2Math.Dot(this, A.col2);
      this.x = tX;
   }
   b2Vec2.prototype.CrossVF = function (s) {
      if (s === undefined) s = 0;
      var tX = this.x;
      this.x = s * this.y;
      this.y = (-s * tX);
   }
   b2Vec2.prototype.CrossFV = function (s) {
      if (s === undefined) s = 0;
      var tX = this.x;
      this.x = (-s * this.y);
      this.y = s * tX;
   }
   b2Vec2.prototype.MinV = function (b) {
      this.x = this.x < b.x ? this.x : b.x;
      this.y = this.y < b.y ? this.y : b.y;
   }
   b2Vec2.prototype.MaxV = function (b) {
      this.x = this.x > b.x ? this.x : b.x;
      this.y = this.y > b.y ? this.y : b.y;
   }
   b2Vec2.prototype.Abs = function () {
      if (this.x < 0) this.x = (-this.x);
      if (this.y < 0) this.y = (-this.y);
   }
   b2Vec2.prototype.Length = function () {
      return Math.sqrt(this.x * this.x + this.y * this.y);
   }
   b2Vec2.prototype.LengthSquared = function () {
      return (this.x * this.x + this.y * this.y);
   }
   b2Vec2.prototype.Normalize = function () {
      var length = Math.sqrt(this.x * this.x + this.y * this.y);
      if (length < Number.MIN_VALUE) {
         return 0.0;
      }
      var invLength = 1.0 / length;
      this.x *= invLength;
      this.y *= invLength;
      return length;
   }
   b2Vec2.prototype.IsValid = function () {
      return b2Math.IsValid(this.x) && b2Math.IsValid(this.y);
   }
   b2Vec3.b2Vec3 = function () {};
   b2Vec3.prototype.b2Vec3 = function (x, y, z) {
      if (x === undefined) x = 0;
      if (y === undefined) y = 0;
      if (z === undefined) z = 0;
      this.x = x;
      this.y = y;
      this.z = z;
   }
   b2Vec3.prototype.SetZero = function () {
      this.x = this.y = this.z = 0.0;
   }
   b2Vec3.prototype.Set = function (x, y, z) {
      if (x === undefined) x = 0;
      if (y === undefined) y = 0;
      if (z === undefined) z = 0;
      this.x = x;
      this.y = y;
      this.z = z;
   }
   b2Vec3.prototype.SetV = function (v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
   }
   b2Vec3.prototype.GetNegative = function () {
      return new b2Vec3((-this.x), (-this.y), (-this.z));
   }
   b2Vec3.prototype.NegativeSelf = function () {
      this.x = (-this.x);
      this.y = (-this.y);
      this.z = (-this.z);
   }
   b2Vec3.prototype.Copy = function () {
      return new b2Vec3(this.x, this.y, this.z);
   }
   b2Vec3.prototype.Add = function (v) {
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
   }
   b2Vec3.prototype.Subtract = function (v) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
   }
   b2Vec3.prototype.Multiply = function (a) {
      if (a === undefined) a = 0;
      this.x *= a;
      this.y *= a;
      this.z *= a;
   }
})();
(function () {
   var b2ControllerEdge = Box2D.Dynamics.Controllers.b2ControllerEdge,
      b2Mat22 = Box2D.Common.Math.b2Mat22,
      b2Mat33 = Box2D.Common.Math.b2Mat33,
      b2Math = Box2D.Common.Math.b2Math,
      b2Sweep = Box2D.Common.Math.b2Sweep,
      b2Transform = Box2D.Common.Math.b2Transform,
      b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2Vec3 = Box2D.Common.Math.b2Vec3,
      b2Color = Box2D.Common.b2Color,
      b2internal = Box2D.Common.b2internal,
      b2Settings = Box2D.Common.b2Settings,
      b2AABB = Box2D.Collision.b2AABB,
      b2Bound = Box2D.Collision.b2Bound,
      b2BoundValues = Box2D.Collision.b2BoundValues,
      b2Collision = Box2D.Collision.b2Collision,
      b2ContactID = Box2D.Collision.b2ContactID,
      b2ContactPoint = Box2D.Collision.b2ContactPoint,
      b2Distance = Box2D.Collision.b2Distance,
      b2DistanceInput = Box2D.Collision.b2DistanceInput,
      b2DistanceOutput = Box2D.Collision.b2DistanceOutput,
      b2DistanceProxy = Box2D.Collision.b2DistanceProxy,
      b2DynamicTree = Box2D.Collision.b2DynamicTree,
      b2DynamicTreeBroadPhase = Box2D.Collision.b2DynamicTreeBroadPhase,
      b2DynamicTreeNode = Box2D.Collision.b2DynamicTreeNode,
      b2DynamicTreePair = Box2D.Collision.b2DynamicTreePair,
      b2Manifold = Box2D.Collision.b2Manifold,
      b2ManifoldPoint = Box2D.Collision.b2ManifoldPoint,
      b2Point = Box2D.Collision.b2Point,
      b2RayCastInput = Box2D.Collision.b2RayCastInput,
      b2RayCastOutput = Box2D.Collision.b2RayCastOutput,
      b2Segment = Box2D.Collision.b2Segment,
      b2SeparationFunction = Box2D.Collision.b2SeparationFunction,
      b2Simplex = Box2D.Collision.b2Simplex,
      b2SimplexCache = Box2D.Collision.b2SimplexCache,
      b2SimplexVertex = Box2D.Collision.b2SimplexVertex,
      b2TimeOfImpact = Box2D.Collision.b2TimeOfImpact,
      b2TOIInput = Box2D.Collision.b2TOIInput,
      b2WorldManifold = Box2D.Collision.b2WorldManifold,
      ClipVertex = Box2D.Collision.ClipVertex,
      Features = Box2D.Collision.Features,
      IBroadPhase = Box2D.Collision.IBroadPhase,
      b2CircleShape = Box2D.Collision.Shapes.b2CircleShape,
      b2EdgeChainDef = Box2D.Collision.Shapes.b2EdgeChainDef,
      b2EdgeShape = Box2D.Collision.Shapes.b2EdgeShape,
      b2MassData = Box2D.Collision.Shapes.b2MassData,
      b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape,
      b2Shape = Box2D.Collision.Shapes.b2Shape,
      b2Body = Box2D.Dynamics.b2Body,
      b2BodyDef = Box2D.Dynamics.b2BodyDef,
      b2ContactFilter = Box2D.Dynamics.b2ContactFilter,
      b2ContactImpulse = Box2D.Dynamics.b2ContactImpulse,
      b2ContactListener = Box2D.Dynamics.b2ContactListener,
      b2ContactManager = Box2D.Dynamics.b2ContactManager,
      b2DebugDraw = Box2D.Dynamics.b2DebugDraw,
      b2DestructionListener = Box2D.Dynamics.b2DestructionListener,
      b2FilterData = Box2D.Dynamics.b2FilterData,
      b2Fixture = Box2D.Dynamics.b2Fixture,
      b2FixtureDef = Box2D.Dynamics.b2FixtureDef,
      b2Island = Box2D.Dynamics.b2Island,
      b2TimeStep = Box2D.Dynamics.b2TimeStep,
      b2World = Box2D.Dynamics.b2World,
      b2CircleContact = Box2D.Dynamics.Contacts.b2CircleContact,
      b2Contact = Box2D.Dynamics.Contacts.b2Contact,
      b2ContactConstraint = Box2D.Dynamics.Contacts.b2ContactConstraint,
      b2ContactConstraintPoint = Box2D.Dynamics.Contacts.b2ContactConstraintPoint,
      b2ContactEdge = Box2D.Dynamics.Contacts.b2ContactEdge,
      b2ContactFactory = Box2D.Dynamics.Contacts.b2ContactFactory,
      b2ContactRegister = Box2D.Dynamics.Contacts.b2ContactRegister,
      b2ContactResult = Box2D.Dynamics.Contacts.b2ContactResult,
      b2ContactSolver = Box2D.Dynamics.Contacts.b2ContactSolver,
      b2EdgeAndCircleContact = Box2D.Dynamics.Contacts.b2EdgeAndCircleContact,
      b2NullContact = Box2D.Dynamics.Contacts.b2NullContact,
      b2PolyAndCircleContact = Box2D.Dynamics.Contacts.b2PolyAndCircleContact,
      b2PolyAndEdgeContact = Box2D.Dynamics.Contacts.b2PolyAndEdgeContact,
      b2PolygonContact = Box2D.Dynamics.Contacts.b2PolygonContact,
      b2PositionSolverManifold = Box2D.Dynamics.Contacts.b2PositionSolverManifold,
      b2Controller = Box2D.Dynamics.Controllers.b2Controller,
      b2DistanceJoint = Box2D.Dynamics.Joints.b2DistanceJoint,
      b2DistanceJointDef = Box2D.Dynamics.Joints.b2DistanceJointDef,
      b2FrictionJoint = Box2D.Dynamics.Joints.b2FrictionJoint,
      b2FrictionJointDef = Box2D.Dynamics.Joints.b2FrictionJointDef,
      b2GearJoint = Box2D.Dynamics.Joints.b2GearJoint,
      b2GearJointDef = Box2D.Dynamics.Joints.b2GearJointDef,
      b2Jacobian = Box2D.Dynamics.Joints.b2Jacobian,
      b2Joint = Box2D.Dynamics.Joints.b2Joint,
      b2JointDef = Box2D.Dynamics.Joints.b2JointDef,
      b2JointEdge = Box2D.Dynamics.Joints.b2JointEdge,
      b2LineJoint = Box2D.Dynamics.Joints.b2LineJoint,
      b2LineJointDef = Box2D.Dynamics.Joints.b2LineJointDef,
      b2MouseJoint = Box2D.Dynamics.Joints.b2MouseJoint,
      b2MouseJointDef = Box2D.Dynamics.Joints.b2MouseJointDef,
      b2PrismaticJoint = Box2D.Dynamics.Joints.b2PrismaticJoint,
      b2PrismaticJointDef = Box2D.Dynamics.Joints.b2PrismaticJointDef,
      b2PulleyJoint = Box2D.Dynamics.Joints.b2PulleyJoint,
      b2PulleyJointDef = Box2D.Dynamics.Joints.b2PulleyJointDef,
      b2RevoluteJoint = Box2D.Dynamics.Joints.b2RevoluteJoint,
      b2RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef,
      b2WeldJoint = Box2D.Dynamics.Joints.b2WeldJoint,
      b2WeldJointDef = Box2D.Dynamics.Joints.b2WeldJointDef;

   b2Body.b2Body = function () {
      this.m_xf = new b2Transform();
      this.m_sweep = new b2Sweep();
      this.m_linearVelocity = new b2Vec2();
      this.m_force = new b2Vec2();
   };
   b2Body.prototype.connectEdges = function (s1, s2, angle1) {
      if (angle1 === undefined) angle1 = 0;
      var angle2 = Math.atan2(s2.GetDirectionVector().y, s2.GetDirectionVector().x);
      var coreOffset = Math.tan((angle2 - angle1) * 0.5);
      var core = b2Math.MulFV(coreOffset, s2.GetDirectionVector());
      core = b2Math.SubtractVV(core, s2.GetNormalVector());
      core = b2Math.MulFV(b2Settings.b2_toiSlop, core);
      core = b2Math.AddVV(core, s2.GetVertex1());
      var cornerDir = b2Math.AddVV(s1.GetDirectionVector(), s2.GetDirectionVector());
      cornerDir.Normalize();
      var convex = b2Math.Dot(s1.GetDirectionVector(), s2.GetNormalVector()) > 0.0;
      s1.SetNextEdge(s2, core, cornerDir, convex);
      s2.SetPrevEdge(s1, core, cornerDir, convex);
      return angle2;
   }
   b2Body.prototype.CreateFixture = function (def) {
      if (this.m_world.IsLocked() == true) {
         return null;
      }
      var fixture = new b2Fixture();
      fixture.Create(this, this.m_xf, def);
      if (this.m_flags & b2Body.e_activeFlag) {
         var broadPhase = this.m_world.m_contactManager.m_broadPhase;
         fixture.CreateProxy(broadPhase, this.m_xf);
      }
      fixture.m_next = this.m_fixtureList;
      this.m_fixtureList = fixture;
      ++this.m_fixtureCount;
      fixture.m_body = this;
      if (fixture.m_density > 0.0) {
         this.ResetMassData();
      }
      this.m_world.m_flags |= b2World.e_newFixture;
      return fixture;
   }
   b2Body.prototype.CreateFixture2 = function (shape, density) {
      if (density === undefined) density = 0.0;
      var def = new b2FixtureDef();
      def.shape = shape;
      def.density = density;
      return this.CreateFixture(def);
   }
   b2Body.prototype.DestroyFixture = function (fixture) {
      if (this.m_world.IsLocked() == true) {
         return;
      }
      var node = this.m_fixtureList;
      var ppF = null;
      var found = false;
      while (node != null) {
         if (node == fixture) {
            if (ppF) ppF.m_next = fixture.m_next;
            else this.m_fixtureList = fixture.m_next;
            found = true;
            break;
         }
         ppF = node;
         node = node.m_next;
      }
      var edge = this.m_contactList;
      while (edge) {
         var c = edge.contact;
         edge = edge.next;
         var fixtureA = c.GetFixtureA();
         var fixtureB = c.GetFixtureB();
         if (fixture == fixtureA || fixture == fixtureB) {
            this.m_world.m_contactManager.Destroy(c);
         }
      }
      if (this.m_flags & b2Body.e_activeFlag) {
         var broadPhase = this.m_world.m_contactManager.m_broadPhase;
         fixture.DestroyProxy(broadPhase);
      }
      else {}
      fixture.Destroy();
      fixture.m_body = null;
      fixture.m_next = null;
      --this.m_fixtureCount;
      this.ResetMassData();
   }
   b2Body.prototype.SetPositionAndAngle = function (position, angle) {
      if (angle === undefined) angle = 0;
      var f;
      if (this.m_world.IsLocked() == true) {
         return;
      }
      this.m_xf.R.Set(angle);
      this.m_xf.position.SetV(position);
      var tMat = this.m_xf.R;
      var tVec = this.m_sweep.localCenter;
      this.m_sweep.c.x = (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      this.m_sweep.c.y = (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      this.m_sweep.c.x += this.m_xf.position.x;
      this.m_sweep.c.y += this.m_xf.position.y;
      this.m_sweep.c0.SetV(this.m_sweep.c);
      this.m_sweep.a0 = this.m_sweep.a = angle;
      var broadPhase = this.m_world.m_contactManager.m_broadPhase;
      for (f = this.m_fixtureList;
      f; f = f.m_next) {
         f.Synchronize(broadPhase, this.m_xf, this.m_xf);
      }
      this.m_world.m_contactManager.FindNewContacts();
   }
   b2Body.prototype.SetTransform = function (xf) {
      this.SetPositionAndAngle(xf.position, xf.GetAngle());
   }
   b2Body.prototype.GetTransform = function () {
      return this.m_xf;
   }
   b2Body.prototype.GetPosition = function () {
      return this.m_xf.position;
   }
   b2Body.prototype.SetPosition = function (position) {
      this.SetPositionAndAngle(position, this.GetAngle());
   }
   b2Body.prototype.GetAngle = function () {
      return this.m_sweep.a;
   }
   b2Body.prototype.SetAngle = function (angle) {
      if (angle === undefined) angle = 0;
      this.SetPositionAndAngle(this.GetPosition(), angle);
   }
   b2Body.prototype.GetWorldCenter = function () {
      return this.m_sweep.c;
   }
   b2Body.prototype.GetLocalCenter = function () {
      return this.m_sweep.localCenter;
   }
   b2Body.prototype.SetLinearVelocity = function (v) {
      if (this.m_type == b2Body.b2_staticBody) {
         return;
      }
      this.m_linearVelocity.SetV(v);
   }
   b2Body.prototype.GetLinearVelocity = function () {
      return this.m_linearVelocity;
   }
   b2Body.prototype.SetAngularVelocity = function (omega) {
      if (omega === undefined) omega = 0;
      if (this.m_type == b2Body.b2_staticBody) {
         return;
      }
      this.m_angularVelocity = omega;
   }
   b2Body.prototype.GetAngularVelocity = function () {
      return this.m_angularVelocity;
   }
   b2Body.prototype.GetDefinition = function () {
      var bd = new b2BodyDef();
      bd.type = this.GetType();
      bd.allowSleep = (this.m_flags & b2Body.e_allowSleepFlag) == b2Body.e_allowSleepFlag;
      bd.angle = this.GetAngle();
      bd.angularDamping = this.m_angularDamping;
      bd.angularVelocity = this.m_angularVelocity;
      bd.fixedRotation = (this.m_flags & b2Body.e_fixedRotationFlag) == b2Body.e_fixedRotationFlag;
      bd.bullet = (this.m_flags & b2Body.e_bulletFlag) == b2Body.e_bulletFlag;
      bd.awake = (this.m_flags & b2Body.e_awakeFlag) == b2Body.e_awakeFlag;
      bd.linearDamping = this.m_linearDamping;
      bd.linearVelocity.SetV(this.GetLinearVelocity());
      bd.position = this.GetPosition();
      bd.userData = this.GetUserData();
      return bd;
   }
   b2Body.prototype.ApplyForce = function (force, point) {
      if (this.m_type != b2Body.b2_dynamicBody) {
         return;
      }
      if (this.IsAwake() == false) {
         this.SetAwake(true);
      }
      this.m_force.x += force.x;
      this.m_force.y += force.y;
      this.m_torque += ((point.x - this.m_sweep.c.x) * force.y - (point.y - this.m_sweep.c.y) * force.x);
   }
   b2Body.prototype.ApplyTorque = function (torque) {
      if (torque === undefined) torque = 0;
      if (this.m_type != b2Body.b2_dynamicBody) {
         return;
      }
      if (this.IsAwake() == false) {
         this.SetAwake(true);
      }
      this.m_torque += torque;
   }
   b2Body.prototype.ApplyImpulse = function (impulse, point) {
      if (this.m_type != b2Body.b2_dynamicBody) {
         return;
      }
      if (this.IsAwake() == false) {
         this.SetAwake(true);
      }
      this.m_linearVelocity.x += this.m_invMass * impulse.x;
      this.m_linearVelocity.y += this.m_invMass * impulse.y;
      this.m_angularVelocity += this.m_invI * ((point.x - this.m_sweep.c.x) * impulse.y - (point.y - this.m_sweep.c.y) * impulse.x);
   }
   b2Body.prototype.Split = function (callback) {
      var linearVelocity = this.GetLinearVelocity().Copy();
      var angularVelocity = this.GetAngularVelocity();
      var center = this.GetWorldCenter();
      var body1 = this;
      var body2 = this.m_world.CreateBody(this.GetDefinition());
      var prev;
      for (var f = body1.m_fixtureList; f;) {
         if (callback(f)) {
            var next = f.m_next;
            if (prev) {
               prev.m_next = next;
            }
            else {
               body1.m_fixtureList = next;
            }
            body1.m_fixtureCount--;
            f.m_next = body2.m_fixtureList;
            body2.m_fixtureList = f;
            body2.m_fixtureCount++;
            f.m_body = body2;
            f = next;
         }
         else {
            prev = f;
            f = f.m_next;
         }
      }
      body1.ResetMassData();
      body2.ResetMassData();
      var center1 = body1.GetWorldCenter();
      var center2 = body2.GetWorldCenter();
      var velocity1 = b2Math.AddVV(linearVelocity, b2Math.CrossFV(angularVelocity, b2Math.SubtractVV(center1, center)));
      var velocity2 = b2Math.AddVV(linearVelocity, b2Math.CrossFV(angularVelocity, b2Math.SubtractVV(center2, center)));
      body1.SetLinearVelocity(velocity1);
      body2.SetLinearVelocity(velocity2);
      body1.SetAngularVelocity(angularVelocity);
      body2.SetAngularVelocity(angularVelocity);
      body1.SynchronizeFixtures();
      body2.SynchronizeFixtures();
      return body2;
   }
   b2Body.prototype.Merge = function (other) {
      var f;
      for (f = other.m_fixtureList;
      f;) {
         var next = f.m_next;
         other.m_fixtureCount--;
         f.m_next = this.m_fixtureList;
         this.m_fixtureList = f;
         this.m_fixtureCount++;
         f.m_body = body2;
         f = next;
      }
      body1.m_fixtureCount = 0;
      var body1 = this;
      var body2 = other;
      var center1 = body1.GetWorldCenter();
      var center2 = body2.GetWorldCenter();
      var velocity1 = body1.GetLinearVelocity().Copy();
      var velocity2 = body2.GetLinearVelocity().Copy();
      var angular1 = body1.GetAngularVelocity();
      var angular = body2.GetAngularVelocity();
      body1.ResetMassData();
      this.SynchronizeFixtures();
   }
   b2Body.prototype.GetMass = function () {
      return this.m_mass;
   }
   b2Body.prototype.GetInertia = function () {
      return this.m_I;
   }
   b2Body.prototype.GetMassData = function (data) {
      data.mass = this.m_mass;
      data.I = this.m_I;
      data.center.SetV(this.m_sweep.localCenter);
   }
   b2Body.prototype.SetMassData = function (massData) {
      b2Settings.b2Assert(this.m_world.IsLocked() == false);
      if (this.m_world.IsLocked() == true) {
         return;
      }
      if (this.m_type != b2Body.b2_dynamicBody) {
         return;
      }
      this.m_invMass = 0.0;
      this.m_I = 0.0;
      this.m_invI = 0.0;
      this.m_mass = massData.mass;
      if (this.m_mass <= 0.0) {
         this.m_mass = 1.0;
      }
      this.m_invMass = 1.0 / this.m_mass;
      if (massData.I > 0.0 && (this.m_flags & b2Body.e_fixedRotationFlag) == 0) {
         this.m_I = massData.I - this.m_mass * (massData.center.x * massData.center.x + massData.center.y * massData.center.y);
         this.m_invI = 1.0 / this.m_I;
      }
      var oldCenter = this.m_sweep.c.Copy();
      this.m_sweep.localCenter.SetV(massData.center);
      this.m_sweep.c0.SetV(b2Math.MulX(this.m_xf, this.m_sweep.localCenter));
      this.m_sweep.c.SetV(this.m_sweep.c0);
      this.m_linearVelocity.x += this.m_angularVelocity * (-(this.m_sweep.c.y - oldCenter.y));
      this.m_linearVelocity.y += this.m_angularVelocity * (+(this.m_sweep.c.x - oldCenter.x));
   }
   b2Body.prototype.ResetMassData = function () {
      this.m_mass = 0.0;
      this.m_invMass = 0.0;
      this.m_I = 0.0;
      this.m_invI = 0.0;
      this.m_sweep.localCenter.SetZero();
      if (this.m_type == b2Body.b2_staticBody || this.m_type == b2Body.b2_kinematicBody) {
         return;
      }
      var center = b2Vec2.Make(0, 0);
      for (var f = this.m_fixtureList; f; f = f.m_next) {
         if (f.m_density == 0.0) {
            continue;
         }
         var massData = f.GetMassData();
         this.m_mass += massData.mass;
         center.x += massData.center.x * massData.mass;
         center.y += massData.center.y * massData.mass;
         this.m_I += massData.I;
      }
      if (this.m_mass > 0.0) {
         this.m_invMass = 1.0 / this.m_mass;
         center.x *= this.m_invMass;
         center.y *= this.m_invMass;
      }
      else {
         this.m_mass = 1.0;
         this.m_invMass = 1.0;
      }
      if (this.m_I > 0.0 && (this.m_flags & b2Body.e_fixedRotationFlag) == 0) {
         this.m_I -= this.m_mass * (center.x * center.x + center.y * center.y);
         this.m_I *= this.m_inertiaScale;
         b2Settings.b2Assert(this.m_I > 0);
         this.m_invI = 1.0 / this.m_I;
      }
      else {
         this.m_I = 0.0;
         this.m_invI = 0.0;
      }
      var oldCenter = this.m_sweep.c.Copy();
      this.m_sweep.localCenter.SetV(center);
      this.m_sweep.c0.SetV(b2Math.MulX(this.m_xf, this.m_sweep.localCenter));
      this.m_sweep.c.SetV(this.m_sweep.c0);
      this.m_linearVelocity.x += this.m_angularVelocity * (-(this.m_sweep.c.y - oldCenter.y));
      this.m_linearVelocity.y += this.m_angularVelocity * (+(this.m_sweep.c.x - oldCenter.x));
   }
   b2Body.prototype.GetWorldPoint = function (localPoint) {
      var A = this.m_xf.R;
      var u = new b2Vec2(A.col1.x * localPoint.x + A.col2.x * localPoint.y, A.col1.y * localPoint.x + A.col2.y * localPoint.y);
      u.x += this.m_xf.position.x;
      u.y += this.m_xf.position.y;
      return u;
   }
   b2Body.prototype.GetWorldVector = function (localVector) {
      return b2Math.MulMV(this.m_xf.R, localVector);
   }
   b2Body.prototype.GetLocalPoint = function (worldPoint) {
      return b2Math.MulXT(this.m_xf, worldPoint);
   }
   b2Body.prototype.GetLocalVector = function (worldVector) {
      return b2Math.MulTMV(this.m_xf.R, worldVector);
   }
   b2Body.prototype.GetLinearVelocityFromWorldPoint = function (worldPoint) {
      return new b2Vec2(this.m_linearVelocity.x - this.m_angularVelocity * (worldPoint.y - this.m_sweep.c.y), this.m_linearVelocity.y + this.m_angularVelocity * (worldPoint.x - this.m_sweep.c.x));
   }
   b2Body.prototype.GetLinearVelocityFromLocalPoint = function (localPoint) {
      var A = this.m_xf.R;
      var worldPoint = new b2Vec2(A.col1.x * localPoint.x + A.col2.x * localPoint.y, A.col1.y * localPoint.x + A.col2.y * localPoint.y);
      worldPoint.x += this.m_xf.position.x;
      worldPoint.y += this.m_xf.position.y;
      return new b2Vec2(this.m_linearVelocity.x - this.m_angularVelocity * (worldPoint.y - this.m_sweep.c.y), this.m_linearVelocity.y + this.m_angularVelocity * (worldPoint.x - this.m_sweep.c.x));
   }
   b2Body.prototype.GetLinearDamping = function () {
      return this.m_linearDamping;
   }
   b2Body.prototype.SetLinearDamping = function (linearDamping) {
      if (linearDamping === undefined) linearDamping = 0;
      this.m_linearDamping = linearDamping;
   }
   b2Body.prototype.GetAngularDamping = function () {
      return this.m_angularDamping;
   }
   b2Body.prototype.SetAngularDamping = function (angularDamping) {
      if (angularDamping === undefined) angularDamping = 0;
      this.m_angularDamping = angularDamping;
   }
   b2Body.prototype.SetType = function (type) {
      if (type === undefined) type = 0;
      if (this.m_type == type) {
         return;
      }
      this.m_type = type;
      this.ResetMassData();
      if (this.m_type == b2Body.b2_staticBody) {
         this.m_linearVelocity.SetZero();
         this.m_angularVelocity = 0.0;
      }
      this.SetAwake(true);
      this.m_force.SetZero();
      this.m_torque = 0.0;
      for (var ce = this.m_contactList; ce; ce = ce.next) {
         ce.contact.FlagForFiltering();
      }
   }
   b2Body.prototype.GetType = function () {
      return this.m_type;
   }
   b2Body.prototype.SetBullet = function (flag) {
      if (flag) {
         this.m_flags |= b2Body.e_bulletFlag;
      }
      else {
         this.m_flags &= ~b2Body.e_bulletFlag;
      }
   }
   b2Body.prototype.IsBullet = function () {
      return (this.m_flags & b2Body.e_bulletFlag) == b2Body.e_bulletFlag;
   }
   b2Body.prototype.SetSleepingAllowed = function (flag) {
      if (flag) {
         this.m_flags |= b2Body.e_allowSleepFlag;
      }
      else {
         this.m_flags &= ~b2Body.e_allowSleepFlag;
         this.SetAwake(true);
      }
   }
   b2Body.prototype.SetAwake = function (flag) {
      if (flag) {
         this.m_flags |= b2Body.e_awakeFlag;
         this.m_sleepTime = 0.0;
      }
      else {
         this.m_flags &= ~b2Body.e_awakeFlag;
         this.m_sleepTime = 0.0;
         this.m_linearVelocity.SetZero();
         this.m_angularVelocity = 0.0;
         this.m_force.SetZero();
         this.m_torque = 0.0;
      }
   }
   b2Body.prototype.IsAwake = function () {
      return (this.m_flags & b2Body.e_awakeFlag) == b2Body.e_awakeFlag;
   }
   b2Body.prototype.SetFixedRotation = function (fixed) {
      if (fixed) {
         this.m_flags |= b2Body.e_fixedRotationFlag;
      }
      else {
         this.m_flags &= ~b2Body.e_fixedRotationFlag;
      }
      this.ResetMassData();
   }
   b2Body.prototype.IsFixedRotation = function () {
      return (this.m_flags & b2Body.e_fixedRotationFlag) == b2Body.e_fixedRotationFlag;
   }
   b2Body.prototype.SetActive = function (flag) {
      if (flag == this.IsActive()) {
         return;
      }
      var broadPhase;
      var f;
      if (flag) {
         this.m_flags |= b2Body.e_activeFlag;
         broadPhase = this.m_world.m_contactManager.m_broadPhase;
         for (f = this.m_fixtureList;
         f; f = f.m_next) {
            f.CreateProxy(broadPhase, this.m_xf);
         }
      }
      else {
         this.m_flags &= ~b2Body.e_activeFlag;
         broadPhase = this.m_world.m_contactManager.m_broadPhase;
         for (f = this.m_fixtureList;
         f; f = f.m_next) {
            f.DestroyProxy(broadPhase);
         }
         var ce = this.m_contactList;
         while (ce) {
            var ce0 = ce;
            ce = ce.next;
            this.m_world.m_contactManager.Destroy(ce0.contact);
         }
         this.m_contactList = null;
      }
   }
   b2Body.prototype.IsActive = function () {
      return (this.m_flags & b2Body.e_activeFlag) == b2Body.e_activeFlag;
   }
   b2Body.prototype.IsSleepingAllowed = function () {
      return (this.m_flags & b2Body.e_allowSleepFlag) == b2Body.e_allowSleepFlag;
   }
   b2Body.prototype.GetFixtureList = function () {
      return this.m_fixtureList;
   }
   b2Body.prototype.GetJointList = function () {
      return this.m_jointList;
   }
   b2Body.prototype.GetControllerList = function () {
      return this.m_controllerList;
   }
   b2Body.prototype.GetContactList = function () {
      return this.m_contactList;
   }
   b2Body.prototype.GetNext = function () {
      return this.m_next;
   }
   b2Body.prototype.GetUserData = function () {
      return this.m_userData;
   }
   b2Body.prototype.SetUserData = function (data) {
      this.m_userData = data;
   }
   b2Body.prototype.GetWorld = function () {
      return this.m_world;
   }
   b2Body.prototype.b2Body = function (bd, world) {
      this.m_flags = 0;
      if (bd.bullet) {
         this.m_flags |= b2Body.e_bulletFlag;
      }
      if (bd.fixedRotation) {
         this.m_flags |= b2Body.e_fixedRotationFlag;
      }
      if (bd.allowSleep) {
         this.m_flags |= b2Body.e_allowSleepFlag;
      }
      if (bd.awake) {
         this.m_flags |= b2Body.e_awakeFlag;
      }
      if (bd.active) {
         this.m_flags |= b2Body.e_activeFlag;
      }
      this.m_world = world;
      this.m_xf.position.SetV(bd.position);
      this.m_xf.R.Set(bd.angle);
      this.m_sweep.localCenter.SetZero();
      this.m_sweep.t0 = 1.0;
      this.m_sweep.a0 = this.m_sweep.a = bd.angle;
      var tMat = this.m_xf.R;
      var tVec = this.m_sweep.localCenter;
      this.m_sweep.c.x = (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      this.m_sweep.c.y = (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      this.m_sweep.c.x += this.m_xf.position.x;
      this.m_sweep.c.y += this.m_xf.position.y;
      this.m_sweep.c0.SetV(this.m_sweep.c);
      this.m_jointList = null;
      this.m_controllerList = null;
      this.m_contactList = null;
      this.m_controllerCount = 0;
      this.m_prev = null;
      this.m_next = null;
      this.m_linearVelocity.SetV(bd.linearVelocity);
      this.m_angularVelocity = bd.angularVelocity;
      this.m_linearDamping = bd.linearDamping;
      this.m_angularDamping = bd.angularDamping;
      this.m_force.Set(0.0, 0.0);
      this.m_torque = 0.0;
      this.m_sleepTime = 0.0;
      this.m_type = bd.type;
      if (this.m_type == b2Body.b2_dynamicBody) {
         this.m_mass = 1.0;
         this.m_invMass = 1.0;
      }
      else {
         this.m_mass = 0.0;
         this.m_invMass = 0.0;
      }
      this.m_I = 0.0;
      this.m_invI = 0.0;
      this.m_inertiaScale = bd.inertiaScale;
      this.m_userData = bd.userData;
      this.m_fixtureList = null;
      this.m_fixtureCount = 0;
   }
   b2Body.prototype.SynchronizeFixtures = function () {
      var xf1 = b2Body.s_xf1;
      xf1.R.Set(this.m_sweep.a0);
      var tMat = xf1.R;
      var tVec = this.m_sweep.localCenter;
      xf1.position.x = this.m_sweep.c0.x - (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      xf1.position.y = this.m_sweep.c0.y - (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      var f;
      var broadPhase = this.m_world.m_contactManager.m_broadPhase;
      for (f = this.m_fixtureList;
      f; f = f.m_next) {
         f.Synchronize(broadPhase, xf1, this.m_xf);
      }
   }
   b2Body.prototype.SynchronizeTransform = function () {
      this.m_xf.R.Set(this.m_sweep.a);
      var tMat = this.m_xf.R;
      var tVec = this.m_sweep.localCenter;
      this.m_xf.position.x = this.m_sweep.c.x - (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      this.m_xf.position.y = this.m_sweep.c.y - (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
   }
   b2Body.prototype.ShouldCollide = function (other) {
      if (this.m_type != b2Body.b2_dynamicBody && other.m_type != b2Body.b2_dynamicBody) {
         return false;
      }
      for (var jn = this.m_jointList; jn; jn = jn.next) {
         if (jn.other == other) if (jn.joint.m_collideConnected == false) {
            return false;
         }
      }
      return true;
   }
   b2Body.prototype.Advance = function (t) {
      if (t === undefined) t = 0;
      this.m_sweep.Advance(t);
      this.m_sweep.c.SetV(this.m_sweep.c0);
      this.m_sweep.a = this.m_sweep.a0;
      this.SynchronizeTransform();
   }
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2Body.s_xf1 = new b2Transform();
      Box2D.Dynamics.b2Body.e_islandFlag = 0x0001;
      Box2D.Dynamics.b2Body.e_awakeFlag = 0x0002;
      Box2D.Dynamics.b2Body.e_allowSleepFlag = 0x0004;
      Box2D.Dynamics.b2Body.e_bulletFlag = 0x0008;
      Box2D.Dynamics.b2Body.e_fixedRotationFlag = 0x0010;
      Box2D.Dynamics.b2Body.e_activeFlag = 0x0020;
      Box2D.Dynamics.b2Body.b2_staticBody = 0;
      Box2D.Dynamics.b2Body.b2_kinematicBody = 1;
      Box2D.Dynamics.b2Body.b2_dynamicBody = 2;
   });
   b2BodyDef.b2BodyDef = function () {
      this.position = new b2Vec2();
      this.linearVelocity = new b2Vec2();
   };
   b2BodyDef.prototype.b2BodyDef = function () {
      this.userData = null;
      this.position.Set(0.0, 0.0);
      this.angle = 0.0;
      this.linearVelocity.Set(0, 0);
      this.angularVelocity = 0.0;
      this.linearDamping = 0.0;
      this.angularDamping = 0.0;
      this.allowSleep = true;
      this.awake = true;
      this.fixedRotation = false;
      this.bullet = false;
      this.type = b2Body.b2_staticBody;
      this.active = true;
      this.inertiaScale = 1.0;
   }
   b2ContactFilter.b2ContactFilter = function () {};
   b2ContactFilter.prototype.ShouldCollide = function (fixtureA, fixtureB) {
      var filter1 = fixtureA.GetFilterData();
      var filter2 = fixtureB.GetFilterData();
      if (filter1.groupIndex == filter2.groupIndex && filter1.groupIndex != 0) {
         return filter1.groupIndex > 0;
      }
      var collide = (filter1.maskBits & filter2.categoryBits) != 0 && (filter1.categoryBits & filter2.maskBits) != 0;
      return collide;
   }
   b2ContactFilter.prototype.RayCollide = function (userData, fixture) {
      if (!userData) return true;
      return this.ShouldCollide((userData instanceof b2Fixture ? userData : null), fixture);
   }
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2ContactFilter.b2_defaultFilter = new b2ContactFilter();
   });
   b2ContactImpulse.b2ContactImpulse = function () {
      this.normalImpulses = new Vector_a2j_Number(b2Settings.b2_maxManifoldPoints);
      this.tangentImpulses = new Vector_a2j_Number(b2Settings.b2_maxManifoldPoints);
   };
   b2ContactListener.b2ContactListener = function () {};
   b2ContactListener.prototype.BeginContact = function (contact) {}
   b2ContactListener.prototype.EndContact = function (contact) {}
   b2ContactListener.prototype.PreSolve = function (contact, oldManifold) {}
   b2ContactListener.prototype.PostSolve = function (contact, impulse) {}
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2ContactListener.b2_defaultListener = new b2ContactListener();
   });
   b2ContactManager.b2ContactManager = function () {};
   b2ContactManager.prototype.b2ContactManager = function () {
      this.m_world = null;
      this.m_contactCount = 0;
      this.m_contactFilter = b2ContactFilter.b2_defaultFilter;
      this.m_contactListener = b2ContactListener.b2_defaultListener;
      this.m_contactFactory = new b2ContactFactory(this.m_allocator);
      this.m_broadPhase = new b2DynamicTreeBroadPhase();
   }
   b2ContactManager.prototype.AddPair = function (proxyUserDataA, proxyUserDataB) {
      var fixtureA = (proxyUserDataA instanceof b2Fixture ? proxyUserDataA : null);
      var fixtureB = (proxyUserDataB instanceof b2Fixture ? proxyUserDataB : null);
      var bodyA = fixtureA.GetBody();
      var bodyB = fixtureB.GetBody();
      if (bodyA == bodyB) return;
      var edge = bodyB.GetContactList();
      while (edge) {
         if (edge.other == bodyA) {
            var fA = edge.contact.GetFixtureA();
            var fB = edge.contact.GetFixtureB();
            if (fA == fixtureA && fB == fixtureB) return;
            if (fA == fixtureB && fB == fixtureA) return;
         }
         edge = edge.next;
      }
      if (bodyB.ShouldCollide(bodyA) == false) {
         return;
      }
      if (this.m_contactFilter.ShouldCollide(fixtureA, fixtureB) == false) {
         return;
      }
      var c = this.m_contactFactory.Create(fixtureA, fixtureB);
      fixtureA = c.GetFixtureA();
      fixtureB = c.GetFixtureB();
      bodyA = fixtureA.m_body;
      bodyB = fixtureB.m_body;
      c.m_prev = null;
      c.m_next = this.m_world.m_contactList;
      if (this.m_world.m_contactList != null) {
         this.m_world.m_contactList.m_prev = c;
      }
      this.m_world.m_contactList = c;
      c.m_nodeA.contact = c;
      c.m_nodeA.other = bodyB;
      c.m_nodeA.prev = null;
      c.m_nodeA.next = bodyA.m_contactList;
      if (bodyA.m_contactList != null) {
         bodyA.m_contactList.prev = c.m_nodeA;
      }
      bodyA.m_contactList = c.m_nodeA;
      c.m_nodeB.contact = c;
      c.m_nodeB.other = bodyA;
      c.m_nodeB.prev = null;
      c.m_nodeB.next = bodyB.m_contactList;
      if (bodyB.m_contactList != null) {
         bodyB.m_contactList.prev = c.m_nodeB;
      }
      bodyB.m_contactList = c.m_nodeB;
      ++this.m_world.m_contactCount;
      return;
   }
   b2ContactManager.prototype.FindNewContacts = function () {
      this.m_broadPhase.UpdatePairs(Box2D.generateCallback(this, this.AddPair));
   }
   b2ContactManager.prototype.Destroy = function (c) {
      var fixtureA = c.GetFixtureA();
      var fixtureB = c.GetFixtureB();
      var bodyA = fixtureA.GetBody();
      var bodyB = fixtureB.GetBody();
      if (c.IsTouching()) {
         this.m_contactListener.EndContact(c);
      }
      if (c.m_prev) {
         c.m_prev.m_next = c.m_next;
      }
      if (c.m_next) {
         c.m_next.m_prev = c.m_prev;
      }
      if (c == this.m_world.m_contactList) {
         this.m_world.m_contactList = c.m_next;
      }
      if (c.m_nodeA.prev) {
         c.m_nodeA.prev.next = c.m_nodeA.next;
      }
      if (c.m_nodeA.next) {
         c.m_nodeA.next.prev = c.m_nodeA.prev;
      }
      if (c.m_nodeA == bodyA.m_contactList) {
         bodyA.m_contactList = c.m_nodeA.next;
      }
      if (c.m_nodeB.prev) {
         c.m_nodeB.prev.next = c.m_nodeB.next;
      }
      if (c.m_nodeB.next) {
         c.m_nodeB.next.prev = c.m_nodeB.prev;
      }
      if (c.m_nodeB == bodyB.m_contactList) {
         bodyB.m_contactList = c.m_nodeB.next;
      }
      this.m_contactFactory.Destroy(c);
      --this.m_contactCount;
   }
   b2ContactManager.prototype.Collide = function () {
      var c = this.m_world.m_contactList;
      while (c) {
         var fixtureA = c.GetFixtureA();
         var fixtureB = c.GetFixtureB();
         var bodyA = fixtureA.GetBody();
         var bodyB = fixtureB.GetBody();
         if (bodyA.IsAwake() == false && bodyB.IsAwake() == false) {
            c = c.GetNext();
            continue;
         }
         if (c.m_flags & b2Contact.e_filterFlag) {
            if (bodyB.ShouldCollide(bodyA) == false) {
               var cNuke = c;
               c = cNuke.GetNext();
               this.Destroy(cNuke);
               continue;
            }
            if (this.m_contactFilter.ShouldCollide(fixtureA, fixtureB) == false) {
               cNuke = c;
               c = cNuke.GetNext();
               this.Destroy(cNuke);
               continue;
            }
            c.m_flags &= ~b2Contact.e_filterFlag;
         }
         var proxyA = fixtureA.m_proxy;
         var proxyB = fixtureB.m_proxy;
         var overlap = this.m_broadPhase.TestOverlap(proxyA, proxyB);
         if (overlap == false) {
            cNuke = c;
            c = cNuke.GetNext();
            this.Destroy(cNuke);
            continue;
         }
         c.Update(this.m_contactListener);
         c = c.GetNext();
      }
   }
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2ContactManager.s_evalCP = new b2ContactPoint();
   });
   b2DebugDraw.b2DebugDraw = function () {};
   b2DebugDraw.prototype.b2DebugDraw = function () {}
   b2DebugDraw.prototype.SetFlags = function (flags) {
      if (flags === undefined) flags = 0;
   }
   b2DebugDraw.prototype.GetFlags = function () {}
   b2DebugDraw.prototype.AppendFlags = function (flags) {
      if (flags === undefined) flags = 0;
   }
   b2DebugDraw.prototype.ClearFlags = function (flags) {
      if (flags === undefined) flags = 0;
   }
   b2DebugDraw.prototype.SetSprite = function (sprite) {}
   b2DebugDraw.prototype.GetSprite = function () {}
   b2DebugDraw.prototype.SetDrawScale = function (drawScale) {
      if (drawScale === undefined) drawScale = 0;
   }
   b2DebugDraw.prototype.GetDrawScale = function () {}
   b2DebugDraw.prototype.SetLineThickness = function (lineThickness) {
      if (lineThickness === undefined) lineThickness = 0;
   }
   b2DebugDraw.prototype.GetLineThickness = function () {}
   b2DebugDraw.prototype.SetAlpha = function (alpha) {
      if (alpha === undefined) alpha = 0;
   }
   b2DebugDraw.prototype.GetAlpha = function () {}
   b2DebugDraw.prototype.SetFillAlpha = function (alpha) {
      if (alpha === undefined) alpha = 0;
   }
   b2DebugDraw.prototype.GetFillAlpha = function () {}
   b2DebugDraw.prototype.SetXFormScale = function (xformScale) {
      if (xformScale === undefined) xformScale = 0;
   }
   b2DebugDraw.prototype.GetXFormScale = function () {}
   b2DebugDraw.prototype.DrawPolygon = function (vertices, vertexCount, color) {
      if (vertexCount === undefined) vertexCount = 0;
   }
   b2DebugDraw.prototype.DrawSolidPolygon = function (vertices, vertexCount, color) {
      if (vertexCount === undefined) vertexCount = 0;
   }
   b2DebugDraw.prototype.DrawCircle = function (center, radius, color) {
      if (radius === undefined) radius = 0;
   }
   b2DebugDraw.prototype.DrawSolidCircle = function (center, radius, axis, color) {
      if (radius === undefined) radius = 0;
   }
   b2DebugDraw.prototype.DrawSegment = function (p1, p2, color) {}
   b2DebugDraw.prototype.DrawTransform = function (xf) {}
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2DebugDraw.e_shapeBit = 0x0001;
      Box2D.Dynamics.b2DebugDraw.e_jointBit = 0x0002;
      Box2D.Dynamics.b2DebugDraw.e_aabbBit = 0x0004;
      Box2D.Dynamics.b2DebugDraw.e_pairBit = 0x0008;
      Box2D.Dynamics.b2DebugDraw.e_centerOfMassBit = 0x0010;
      Box2D.Dynamics.b2DebugDraw.e_controllerBit = 0x0020;
   });
   b2DestructionListener.b2DestructionListener = function () {};
   b2DestructionListener.prototype.SayGoodbyeJoint = function (joint) {}
   b2DestructionListener.prototype.SayGoodbyeFixture = function (fixture) {}
   b2FilterData.b2FilterData = function () {
      this.categoryBits = 0x0001;
      this.maskBits = 0xFFFF;
      this.groupIndex = 0;
   };
   b2FilterData.prototype.Copy = function () {
      var copy = new b2FilterData();
      copy.categoryBits = this.categoryBits;
      copy.maskBits = this.maskBits;
      copy.groupIndex = this.groupIndex;
      return copy;
   }
   b2Fixture.b2Fixture = function () {
      this.m_filter = new b2FilterData();
   };
   b2Fixture.prototype.GetType = function () {
      return this.m_shape.GetType();
   }
   b2Fixture.prototype.GetShape = function () {
      return this.m_shape;
   }
   b2Fixture.prototype.SetSensor = function (sensor) {
      if (this.m_isSensor == sensor) return;
      this.m_isSensor = sensor;
      if (this.m_body == null) return;
      var edge = this.m_body.GetContactList();
      while (edge) {
         var contact = edge.contact;
         var fixtureA = contact.GetFixtureA();
         var fixtureB = contact.GetFixtureB();
         if (fixtureA == this || fixtureB == this) contact.SetSensor(fixtureA.IsSensor() || fixtureB.IsSensor());
         edge = edge.next;
      }
   }
   b2Fixture.prototype.IsSensor = function () {
      return this.m_isSensor;
   }
   b2Fixture.prototype.SetFilterData = function (filter) {
      this.m_filter = filter.Copy();
      if (this.m_body) return;
      var edge = this.m_body.GetContactList();
      while (edge) {
         var contact = edge.contact;
         var fixtureA = contact.GetFixtureA();
         var fixtureB = contact.GetFixtureB();
         if (fixtureA == this || fixtureB == this) contact.FlagForFiltering();
         edge = edge.next;
      }
   }
   b2Fixture.prototype.GetFilterData = function () {
      return this.m_filter.Copy();
   }
   b2Fixture.prototype.GetBody = function () {
      return this.m_body;
   }
   b2Fixture.prototype.GetNext = function () {
      return this.m_next;
   }
   b2Fixture.prototype.GetUserData = function () {
      return this.m_userData;
   }
   b2Fixture.prototype.SetUserData = function (data) {
      this.m_userData = data;
   }
   b2Fixture.prototype.TestPoint = function (p) {
      return this.m_shape.TestPoint(this.m_body.GetTransform(), p);
   }
   b2Fixture.prototype.RayCast = function (output, input) {
      return this.m_shape.RayCast(output, input, this.m_body.GetTransform());
   }
   b2Fixture.prototype.GetMassData = function (massData) {
      if (massData === undefined) massData = null;
      if (massData == null) {
         massData = new b2MassData();
      }
      this.m_shape.ComputeMass(massData, this.m_density);
      return massData;
   }
   b2Fixture.prototype.SetDensity = function (density) {
      if (density === undefined) density = 0;
      this.m_density = density;
   }
   b2Fixture.prototype.GetDensity = function () {
      return this.m_density;
   }
   b2Fixture.prototype.GetFriction = function () {
      return this.m_friction;
   }
   b2Fixture.prototype.SetFriction = function (friction) {
      if (friction === undefined) friction = 0;
      this.m_friction = friction;
   }
   b2Fixture.prototype.GetRestitution = function () {
      return this.m_restitution;
   }
   b2Fixture.prototype.SetRestitution = function (restitution) {
      if (restitution === undefined) restitution = 0;
      this.m_restitution = restitution;
   }
   b2Fixture.prototype.GetAABB = function () {
      return this.m_aabb;
   }
   b2Fixture.prototype.b2Fixture = function () {
      this.m_aabb = new b2AABB();
      this.m_userData = null;
      this.m_body = null;
      this.m_next = null;
      this.m_shape = null;
      this.m_density = 0.0;
      this.m_friction = 0.0;
      this.m_restitution = 0.0;
   }
   b2Fixture.prototype.Create = function (body, xf, def) {
      this.m_userData = def.userData;
      this.m_friction = def.friction;
      this.m_restitution = def.restitution;
      this.m_body = body;
      this.m_next = null;
      this.m_filter = def.filter.Copy();
      this.m_isSensor = def.isSensor;
      this.m_shape = def.shape.Copy();
      this.m_density = def.density;
   }
   b2Fixture.prototype.Destroy = function () {
      this.m_shape = null;
   }
   b2Fixture.prototype.CreateProxy = function (broadPhase, xf) {
      this.m_shape.ComputeAABB(this.m_aabb, xf);
      this.m_proxy = broadPhase.CreateProxy(this.m_aabb, this);
   }
   b2Fixture.prototype.DestroyProxy = function (broadPhase) {
      if (this.m_proxy == null) {
         return;
      }
      broadPhase.DestroyProxy(this.m_proxy);
      this.m_proxy = null;
   }
   b2Fixture.prototype.Synchronize = function (broadPhase, transform1, transform2) {
      if (!this.m_proxy) return;
      var aabb1 = new b2AABB();
      var aabb2 = new b2AABB();
      this.m_shape.ComputeAABB(aabb1, transform1);
      this.m_shape.ComputeAABB(aabb2, transform2);
      this.m_aabb.Combine(aabb1, aabb2);
      var displacement = b2Math.SubtractVV(transform2.position, transform1.position);
      broadPhase.MoveProxy(this.m_proxy, this.m_aabb, displacement);
   }
   b2FixtureDef.b2FixtureDef = function () {
      this.filter = new b2FilterData();
   };
   b2FixtureDef.prototype.b2FixtureDef = function () {
      this.shape = null;
      this.userData = null;
      this.friction = 0.2;
      this.restitution = 0.0;
      this.density = 0.0;
      this.filter.categoryBits = 0x0001;
      this.filter.maskBits = 0xFFFF;
      this.filter.groupIndex = 0;
      this.isSensor = false;
   }
   b2Island.b2Island = function () {};
   b2Island.prototype.b2Island = function () {
      this.m_bodies = new Vector();
      this.m_contacts = new Vector();
      this.m_joints = new Vector();
   }
   b2Island.prototype.Initialize = function (bodyCapacity, contactCapacity, jointCapacity, allocator, listener, contactSolver) {
      if (bodyCapacity === undefined) bodyCapacity = 0;
      if (contactCapacity === undefined) contactCapacity = 0;
      if (jointCapacity === undefined) jointCapacity = 0;
      var i = 0;
      this.m_bodyCapacity = bodyCapacity;
      this.m_contactCapacity = contactCapacity;
      this.m_jointCapacity = jointCapacity;
      this.m_bodyCount = 0;
      this.m_contactCount = 0;
      this.m_jointCount = 0;
      this.m_allocator = allocator;
      this.m_listener = listener;
      this.m_contactSolver = contactSolver;
      for (i = this.m_bodies.length;
      i < bodyCapacity; i++)
      this.m_bodies[i] = null;
      for (i = this.m_contacts.length;
      i < contactCapacity; i++)
      this.m_contacts[i] = null;
      for (i = this.m_joints.length;
      i < jointCapacity; i++)
      this.m_joints[i] = null;
   }
   b2Island.prototype.Clear = function () {
      this.m_bodyCount = 0;
      this.m_contactCount = 0;
      this.m_jointCount = 0;
   }
   b2Island.prototype.Solve = function (step, gravity, allowSleep) {
      var i = 0;
      var j = 0;
      var b;
      var joint;
      for (i = 0;
      i < this.m_bodyCount; ++i) {
         b = this.m_bodies[i];
         if (b.GetType() != b2Body.b2_dynamicBody) continue;
         b.m_linearVelocity.x += step.dt * (gravity.x + b.m_invMass * b.m_force.x);
         b.m_linearVelocity.y += step.dt * (gravity.y + b.m_invMass * b.m_force.y);
         b.m_angularVelocity += step.dt * b.m_invI * b.m_torque;
         b.m_linearVelocity.Multiply(b2Math.Clamp(1.0 - step.dt * b.m_linearDamping, 0.0, 1.0));
         b.m_angularVelocity *= b2Math.Clamp(1.0 - step.dt * b.m_angularDamping, 0.0, 1.0);
      }
      this.m_contactSolver.Initialize(step, this.m_contacts, this.m_contactCount, this.m_allocator);
      var contactSolver = this.m_contactSolver;
      contactSolver.InitVelocityConstraints(step);
      for (i = 0;
      i < this.m_jointCount; ++i) {
         joint = this.m_joints[i];
         joint.InitVelocityConstraints(step);
      }
      for (i = 0;
      i < step.velocityIterations; ++i) {
         for (j = 0;
         j < this.m_jointCount; ++j) {
            joint = this.m_joints[j];
            joint.SolveVelocityConstraints(step);
         }
         contactSolver.SolveVelocityConstraints();
      }
      for (i = 0;
      i < this.m_jointCount; ++i) {
         joint = this.m_joints[i];
         joint.FinalizeVelocityConstraints();
      }
      contactSolver.FinalizeVelocityConstraints();
      for (i = 0;
      i < this.m_bodyCount; ++i) {
         b = this.m_bodies[i];
         if (b.GetType() == b2Body.b2_staticBody) continue;
         var translationX = step.dt * b.m_linearVelocity.x;
         var translationY = step.dt * b.m_linearVelocity.y;
         if ((translationX * translationX + translationY * translationY) > b2Settings.b2_maxTranslationSquared) {
            b.m_linearVelocity.Normalize();
            b.m_linearVelocity.x *= b2Settings.b2_maxTranslation * step.inv_dt;
            b.m_linearVelocity.y *= b2Settings.b2_maxTranslation * step.inv_dt;
         }
         var rotation = step.dt * b.m_angularVelocity;
         if (rotation * rotation > b2Settings.b2_maxRotationSquared) {
            if (b.m_angularVelocity < 0.0) {
               b.m_angularVelocity = (-b2Settings.b2_maxRotation * step.inv_dt);
            }
            else {
               b.m_angularVelocity = b2Settings.b2_maxRotation * step.inv_dt;
            }
         }
         b.m_sweep.c0.SetV(b.m_sweep.c);
         b.m_sweep.a0 = b.m_sweep.a;
         b.m_sweep.c.x += step.dt * b.m_linearVelocity.x;
         b.m_sweep.c.y += step.dt * b.m_linearVelocity.y;
         b.m_sweep.a += step.dt * b.m_angularVelocity;
         b.SynchronizeTransform();
      }
      for (i = 0;
      i < step.positionIterations; ++i) {
         var contactsOkay = contactSolver.SolvePositionConstraints(b2Settings.b2_contactBaumgarte);
         var jointsOkay = true;
         for (j = 0;
         j < this.m_jointCount; ++j) {
            joint = this.m_joints[j];
            var jointOkay = joint.SolvePositionConstraints(b2Settings.b2_contactBaumgarte);
            jointsOkay = jointsOkay && jointOkay;
         }
         if (contactsOkay && jointsOkay) {
            break;
         }
      }
      this.Report(contactSolver.m_constraints);
      if (allowSleep) {
         var minSleepTime = Number.MAX_VALUE;
         var linTolSqr = b2Settings.b2_linearSleepTolerance * b2Settings.b2_linearSleepTolerance;
         var angTolSqr = b2Settings.b2_angularSleepTolerance * b2Settings.b2_angularSleepTolerance;
         for (i = 0;
         i < this.m_bodyCount; ++i) {
            b = this.m_bodies[i];
            if (b.GetType() == b2Body.b2_staticBody) {
               continue;
            }
            if ((b.m_flags & b2Body.e_allowSleepFlag) == 0) {
               b.m_sleepTime = 0.0;
               minSleepTime = 0.0;
            }
            if ((b.m_flags & b2Body.e_allowSleepFlag) == 0 || b.m_angularVelocity * b.m_angularVelocity > angTolSqr || b2Math.Dot(b.m_linearVelocity, b.m_linearVelocity) > linTolSqr) {
               b.m_sleepTime = 0.0;
               minSleepTime = 0.0;
            }
            else {
               b.m_sleepTime += step.dt;
               minSleepTime = b2Math.Min(minSleepTime, b.m_sleepTime);
            }
         }
         if (minSleepTime >= b2Settings.b2_timeToSleep) {
            for (i = 0;
            i < this.m_bodyCount; ++i) {
               b = this.m_bodies[i];
               b.SetAwake(false);
            }
         }
      }
   }
   b2Island.prototype.SolveTOI = function (subStep) {
      var i = 0;
      var j = 0;
      this.m_contactSolver.Initialize(subStep, this.m_contacts, this.m_contactCount, this.m_allocator);
      var contactSolver = this.m_contactSolver;
      for (i = 0;
      i < this.m_jointCount; ++i) {
         this.m_joints[i].InitVelocityConstraints(subStep);
      }
      for (i = 0;
      i < subStep.velocityIterations; ++i) {
         contactSolver.SolveVelocityConstraints();
         for (j = 0;
         j < this.m_jointCount; ++j) {
            this.m_joints[j].SolveVelocityConstraints(subStep);
         }
      }
      for (i = 0;
      i < this.m_bodyCount; ++i) {
         var b = this.m_bodies[i];
         if (b.GetType() == b2Body.b2_staticBody) continue;
         var translationX = subStep.dt * b.m_linearVelocity.x;
         var translationY = subStep.dt * b.m_linearVelocity.y;
         if ((translationX * translationX + translationY * translationY) > b2Settings.b2_maxTranslationSquared) {
            b.m_linearVelocity.Normalize();
            b.m_linearVelocity.x *= b2Settings.b2_maxTranslation * subStep.inv_dt;
            b.m_linearVelocity.y *= b2Settings.b2_maxTranslation * subStep.inv_dt;
         }
         var rotation = subStep.dt * b.m_angularVelocity;
         if (rotation * rotation > b2Settings.b2_maxRotationSquared) {
            if (b.m_angularVelocity < 0.0) {
               b.m_angularVelocity = (-b2Settings.b2_maxRotation * subStep.inv_dt);
            }
            else {
               b.m_angularVelocity = b2Settings.b2_maxRotation * subStep.inv_dt;
            }
         }
         b.m_sweep.c0.SetV(b.m_sweep.c);
         b.m_sweep.a0 = b.m_sweep.a;
         b.m_sweep.c.x += subStep.dt * b.m_linearVelocity.x;
         b.m_sweep.c.y += subStep.dt * b.m_linearVelocity.y;
         b.m_sweep.a += subStep.dt * b.m_angularVelocity;
         b.SynchronizeTransform();
      }
      var k_toiBaumgarte = 0.75;
      for (i = 0;
      i < subStep.positionIterations; ++i) {
         var contactsOkay = contactSolver.SolvePositionConstraints(k_toiBaumgarte);
         var jointsOkay = true;
         for (j = 0;
         j < this.m_jointCount; ++j) {
            var jointOkay = this.m_joints[j].SolvePositionConstraints(b2Settings.b2_contactBaumgarte);
            jointsOkay = jointsOkay && jointOkay;
         }
         if (contactsOkay && jointsOkay) {
            break;
         }
      }
      this.Report(contactSolver.m_constraints);
   }
   b2Island.prototype.Report = function (constraints) {
      if (this.m_listener == null) {
         return;
      }
      for (var i = 0; i < this.m_contactCount; ++i) {
         var c = this.m_contacts[i];
         var cc = constraints[i];
         for (var j = 0; j < cc.pointCount; ++j) {
            b2Island.s_impulse.normalImpulses[j] = cc.points[j].normalImpulse;
            b2Island.s_impulse.tangentImpulses[j] = cc.points[j].tangentImpulse;
         }
         this.m_listener.PostSolve(c, b2Island.s_impulse);
      }
   }
   b2Island.prototype.AddBody = function (body) {
      body.m_islandIndex = this.m_bodyCount;
      this.m_bodies[this.m_bodyCount++] = body;
   }
   b2Island.prototype.AddContact = function (contact) {
      this.m_contacts[this.m_contactCount++] = contact;
   }
   b2Island.prototype.AddJoint = function (joint) {
      this.m_joints[this.m_jointCount++] = joint;
   }
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2Island.s_impulse = new b2ContactImpulse();
   });
   b2TimeStep.b2TimeStep = function () {};
   b2TimeStep.prototype.Set = function (step) {
      this.dt = step.dt;
      this.inv_dt = step.inv_dt;
      this.positionIterations = step.positionIterations;
      this.velocityIterations = step.velocityIterations;
      this.warmStarting = step.warmStarting;
   }
   b2World.b2World = function () {
      this.s_stack = new Vector();
      this.m_contactManager = new b2ContactManager();
      this.m_contactSolver = new b2ContactSolver();
      this.m_island = new b2Island();
   };
   b2World.prototype.b2World = function (gravity, doSleep) {
      this.m_destructionListener = null;
      this.m_debugDraw = null;
      this.m_bodyList = null;
      this.m_contactList = null;
      this.m_jointList = null;
      this.m_controllerList = null;
      this.m_bodyCount = 0;
      this.m_contactCount = 0;
      this.m_jointCount = 0;
      this.m_controllerCount = 0;
      b2World.m_warmStarting = true;
      b2World.m_continuousPhysics = true;
      this.m_allowSleep = doSleep;
      this.m_gravity = gravity;
      this.m_inv_dt0 = 0.0;
      this.m_contactManager.m_world = this;
      var bd = new b2BodyDef();
      this.m_groundBody = this.CreateBody(bd);
   }
   b2World.prototype.SetDestructionListener = function (listener) {
      this.m_destructionListener = listener;
   }
   b2World.prototype.SetContactFilter = function (filter) {
      this.m_contactManager.m_contactFilter = filter;
   }
   b2World.prototype.SetContactListener = function (listener) {
      this.m_contactManager.m_contactListener = listener;
   }
   b2World.prototype.SetDebugDraw = function (debugDraw) {
      this.m_debugDraw = debugDraw;
   }
   b2World.prototype.SetBroadPhase = function (broadPhase) {
      var oldBroadPhase = this.m_contactManager.m_broadPhase;
      this.m_contactManager.m_broadPhase = broadPhase;
      for (var b = this.m_bodyList; b; b = b.m_next) {
         for (var f = b.m_fixtureList; f; f = f.m_next) {
            f.m_proxy = broadPhase.CreateProxy(oldBroadPhase.GetFatAABB(f.m_proxy), f);
         }
      }
   }
   b2World.prototype.Validate = function () {
      this.m_contactManager.m_broadPhase.Validate();
   }
   b2World.prototype.GetProxyCount = function () {
      return this.m_contactManager.m_broadPhase.GetProxyCount();
   }
   b2World.prototype.CreateBody = function (def) {
      if (this.IsLocked() == true) {
         return null;
      }
      var b = new b2Body(def, this);
      b.m_prev = null;
      b.m_next = this.m_bodyList;
      if (this.m_bodyList) {
         this.m_bodyList.m_prev = b;
      }
      this.m_bodyList = b;
      ++this.m_bodyCount;
      return b;
   }
   b2World.prototype.DestroyBody = function (b) {
      if (this.IsLocked() == true) {
         return;
      }
      var jn = b.m_jointList;
      while (jn) {
         var jn0 = jn;
         jn = jn.next;
         if (this.m_destructionListener) {
            this.m_destructionListener.SayGoodbyeJoint(jn0.joint);
         }
         this.DestroyJoint(jn0.joint);
      }
      var coe = b.m_controllerList;
      while (coe) {
         var coe0 = coe;
         coe = coe.nextController;
         coe0.controller.RemoveBody(b);
      }
      var ce = b.m_contactList;
      while (ce) {
         var ce0 = ce;
         ce = ce.next;
         this.m_contactManager.Destroy(ce0.contact);
      }
      b.m_contactList = null;
      var f = b.m_fixtureList;
      while (f) {
         var f0 = f;
         f = f.m_next;
         if (this.m_destructionListener) {
            this.m_destructionListener.SayGoodbyeFixture(f0);
         }
         f0.DestroyProxy(this.m_contactManager.m_broadPhase);
         f0.Destroy();
      }
      b.m_fixtureList = null;
      b.m_fixtureCount = 0;
      if (b.m_prev) {
         b.m_prev.m_next = b.m_next;
      }
      if (b.m_next) {
         b.m_next.m_prev = b.m_prev;
      }
      if (b == this.m_bodyList) {
         this.m_bodyList = b.m_next;
      }--this.m_bodyCount;
   }
   b2World.prototype.CreateJoint = function (def) {
      var j = b2Joint.Create(def, null);
      j.m_prev = null;
      j.m_next = this.m_jointList;
      if (this.m_jointList) {
         this.m_jointList.m_prev = j;
      }
      this.m_jointList = j;
      ++this.m_jointCount;
      j.m_edgeA.joint = j;
      j.m_edgeA.other = j.m_bodyB;
      j.m_edgeA.prev = null;
      j.m_edgeA.next = j.m_bodyA.m_jointList;
      if (j.m_bodyA.m_jointList) j.m_bodyA.m_jointList.prev = j.m_edgeA;
      j.m_bodyA.m_jointList = j.m_edgeA;
      j.m_edgeB.joint = j;
      j.m_edgeB.other = j.m_bodyA;
      j.m_edgeB.prev = null;
      j.m_edgeB.next = j.m_bodyB.m_jointList;
      if (j.m_bodyB.m_jointList) j.m_bodyB.m_jointList.prev = j.m_edgeB;
      j.m_bodyB.m_jointList = j.m_edgeB;
      var bodyA = def.bodyA;
      var bodyB = def.bodyB;
      if (def.collideConnected == false) {
         var edge = bodyB.GetContactList();
         while (edge) {
            if (edge.other == bodyA) {
               edge.contact.FlagForFiltering();
            }
            edge = edge.next;
         }
      }
      return j;
   }
   b2World.prototype.DestroyJoint = function (j) {
      var collideConnected = j.m_collideConnected;
      if (j.m_prev) {
         j.m_prev.m_next = j.m_next;
      }
      if (j.m_next) {
         j.m_next.m_prev = j.m_prev;
      }
      if (j == this.m_jointList) {
         this.m_jointList = j.m_next;
      }
      var bodyA = j.m_bodyA;
      var bodyB = j.m_bodyB;
      bodyA.SetAwake(true);
      bodyB.SetAwake(true);
      if (j.m_edgeA.prev) {
         j.m_edgeA.prev.next = j.m_edgeA.next;
      }
      if (j.m_edgeA.next) {
         j.m_edgeA.next.prev = j.m_edgeA.prev;
      }
      if (j.m_edgeA == bodyA.m_jointList) {
         bodyA.m_jointList = j.m_edgeA.next;
      }
      j.m_edgeA.prev = null;
      j.m_edgeA.next = null;
      if (j.m_edgeB.prev) {
         j.m_edgeB.prev.next = j.m_edgeB.next;
      }
      if (j.m_edgeB.next) {
         j.m_edgeB.next.prev = j.m_edgeB.prev;
      }
      if (j.m_edgeB == bodyB.m_jointList) {
         bodyB.m_jointList = j.m_edgeB.next;
      }
      j.m_edgeB.prev = null;
      j.m_edgeB.next = null;
      b2Joint.Destroy(j, null);
      --this.m_jointCount;
      if (collideConnected == false) {
         var edge = bodyB.GetContactList();
         while (edge) {
            if (edge.other == bodyA) {
               edge.contact.FlagForFiltering();
            }
            edge = edge.next;
         }
      }
   }
   b2World.prototype.AddController = function (c) {
      c.m_next = this.m_controllerList;
      c.m_prev = null;
      this.m_controllerList = c;
      c.m_world = this;
      this.m_controllerCount++;
      return c;
   }
   b2World.prototype.RemoveController = function (c) {
      if (c.m_prev) c.m_prev.m_next = c.m_next;
      if (c.m_next) c.m_next.m_prev = c.m_prev;
      if (this.m_controllerList == c) this.m_controllerList = c.m_next;
      this.m_controllerCount--;
   }
   b2World.prototype.CreateController = function (controller) {
      if (controller.m_world != this) throw new Error("Controller can only be a member of one world");
      controller.m_next = this.m_controllerList;
      controller.m_prev = null;
      if (this.m_controllerList) this.m_controllerList.m_prev = controller;
      this.m_controllerList = controller;
      ++this.m_controllerCount;
      controller.m_world = this;
      return controller;
   }
   b2World.prototype.DestroyController = function (controller) {
      controller.Clear();
      if (controller.m_next) controller.m_next.m_prev = controller.m_prev;
      if (controller.m_prev) controller.m_prev.m_next = controller.m_next;
      if (controller == this.m_controllerList) this.m_controllerList = controller.m_next;
      --this.m_controllerCount;
   }
   b2World.prototype.SetWarmStarting = function (flag) {
      b2World.m_warmStarting = flag;
   }
   b2World.prototype.SetContinuousPhysics = function (flag) {
      b2World.m_continuousPhysics = flag;
   }
   b2World.prototype.GetBodyCount = function () {
      return this.m_bodyCount;
   }
   b2World.prototype.GetJointCount = function () {
      return this.m_jointCount;
   }
   b2World.prototype.GetContactCount = function () {
      return this.m_contactCount;
   }
   b2World.prototype.SetGravity = function (gravity) {
      this.m_gravity = gravity;
   }
   b2World.prototype.GetGravity = function () {
      return this.m_gravity;
   }
   b2World.prototype.GetGroundBody = function () {
      return this.m_groundBody;
   }
   b2World.prototype.Step = function (dt, velocityIterations, positionIterations) {
      if (dt === undefined) dt = 0;
      if (velocityIterations === undefined) velocityIterations = 0;
      if (positionIterations === undefined) positionIterations = 0;
      if (this.m_flags & b2World.e_newFixture) {
         this.m_contactManager.FindNewContacts();
         this.m_flags &= ~b2World.e_newFixture;
      }
      this.m_flags |= b2World.e_locked;
      var step = b2World.s_timestep2;
      step.dt = dt;
      step.velocityIterations = velocityIterations;
      step.positionIterations = positionIterations;
      if (dt > 0.0) {
         step.inv_dt = 1.0 / dt;
      }
      else {
         step.inv_dt = 0.0;
      }
      step.dtRatio = this.m_inv_dt0 * dt;
      step.warmStarting = b2World.m_warmStarting;
      this.m_contactManager.Collide();
      if (step.dt > 0.0) {
         this.Solve(step);
      }
      if (b2World.m_continuousPhysics && step.dt > 0.0) {
         this.SolveTOI(step);
      }
      if (step.dt > 0.0) {
         this.m_inv_dt0 = step.inv_dt;
      }
      this.m_flags &= ~b2World.e_locked;
   }
   b2World.prototype.ClearForces = function () {
      for (var body = this.m_bodyList; body; body = body.m_next) {
         body.m_force.SetZero();
         body.m_torque = 0.0;
      }
   }
   b2World.prototype.DrawDebugData = function () {
      if (this.m_debugDraw == null) {
         return;
      }
      this.m_debugDraw.m_sprite.graphics.clear();
      var flags = this.m_debugDraw.GetFlags();
      var i = 0;
      var b;
      var f;
      var s;
      var j;
      var bp;
      var invQ = new b2Vec2;
      var x1 = new b2Vec2;
      var x2 = new b2Vec2;
      var xf;
      var b1 = new b2AABB();
      var b2 = new b2AABB();
      var vs = [new b2Vec2(), new b2Vec2(), new b2Vec2(), new b2Vec2()];
      var color = new b2Color(0, 0, 0);
      if (flags & b2DebugDraw.e_shapeBit) {
         for (b = this.m_bodyList;
         b; b = b.m_next) {
            xf = b.m_xf;
            for (f = b.GetFixtureList();
            f; f = f.m_next) {
               s = f.GetShape();
               if (b.IsActive() == false) {
                  color.Set(0.5, 0.5, 0.3);
                  this.DrawShape(s, xf, color);
               }
               else if (b.GetType() == b2Body.b2_staticBody) {
                  color.Set(0.5, 0.9, 0.5);
                  this.DrawShape(s, xf, color);
               }
               else if (b.GetType() == b2Body.b2_kinematicBody) {
                  color.Set(0.5, 0.5, 0.9);
                  this.DrawShape(s, xf, color);
               }
               else if (b.IsAwake() == false) {
                  color.Set(0.6, 0.6, 0.6);
                  this.DrawShape(s, xf, color);
               }
               else {
                  color.Set(0.9, 0.7, 0.7);
                  this.DrawShape(s, xf, color);
               }
            }
         }
      }
      if (flags & b2DebugDraw.e_jointBit) {
         for (j = this.m_jointList;
         j; j = j.m_next) {
            this.DrawJoint(j);
         }
      }
      if (flags & b2DebugDraw.e_controllerBit) {
         for (var c = this.m_controllerList; c; c = c.m_next) {
            c.Draw(this.m_debugDraw);
         }
      }
      if (flags & b2DebugDraw.e_pairBit) {
         color.Set(0.3, 0.9, 0.9);
         for (var contact = this.m_contactManager.m_contactList; contact; contact = contact.GetNext()) {
            var fixtureA = contact.GetFixtureA();
            var fixtureB = contact.GetFixtureB();
            var cA = fixtureA.GetAABB().GetCenter();
            var cB = fixtureB.GetAABB().GetCenter();
            this.m_debugDraw.DrawSegment(cA, cB, color);
         }
      }
      if (flags & b2DebugDraw.e_aabbBit) {
         bp = this.m_contactManager.m_broadPhase;
         vs = [new b2Vec2(), new b2Vec2(), new b2Vec2(), new b2Vec2()];
         for (b = this.m_bodyList;
         b; b = b.GetNext()) {
            if (b.IsActive() == false) {
               continue;
            }
            for (f = b.GetFixtureList();
            f; f = f.GetNext()) {
               var aabb = bp.GetFatAABB(f.m_proxy);
               vs[0].Set(aabb.lowerBound.x, aabb.lowerBound.y);
               vs[1].Set(aabb.upperBound.x, aabb.lowerBound.y);
               vs[2].Set(aabb.upperBound.x, aabb.upperBound.y);
               vs[3].Set(aabb.lowerBound.x, aabb.upperBound.y);
               this.m_debugDraw.DrawPolygon(vs, 4, color);
            }
         }
      }
      if (flags & b2DebugDraw.e_centerOfMassBit) {
         for (b = this.m_bodyList;
         b; b = b.m_next) {
            xf = b2World.s_xf;
            xf.R = b.m_xf.R;
            xf.position = b.GetWorldCenter();
            this.m_debugDraw.DrawTransform(xf);
         }
      }
   }
   b2World.prototype.QueryAABB = function (callback, aabb) {
      var __this = this;
      var broadPhase = __this.m_contactManager.m_broadPhase;

      function WorldQueryWrapper(proxy) {
         return callback(broadPhase.GetUserData(proxy));
      };
      broadPhase.Query(WorldQueryWrapper, aabb);
   }
   b2World.prototype.QueryShape = function (callback, shape, transform) {
      var __this = this;
      if (transform === undefined) transform = null;
      if (transform == null) {
         transform = new b2Transform();
         transform.SetIdentity();
      }
      var broadPhase = __this.m_contactManager.m_broadPhase;

      function WorldQueryWrapper(proxy) {
         var fixture = (broadPhase.GetUserData(proxy) instanceof b2Fixture ? broadPhase.GetUserData(proxy) : null);
         if (b2Shape.TestOverlap(shape, transform, fixture.GetShape(), fixture.GetBody().GetTransform())) return callback(fixture);
         return true;
      };
      var aabb = new b2AABB();
      shape.ComputeAABB(aabb, transform);
      broadPhase.Query(WorldQueryWrapper, aabb);
   }
   b2World.prototype.QueryPoint = function (callback, p) {
      var __this = this;
      var broadPhase = __this.m_contactManager.m_broadPhase;

      function WorldQueryWrapper(proxy) {
         var fixture = (broadPhase.GetUserData(proxy) instanceof b2Fixture ? broadPhase.GetUserData(proxy) : null);
         if (fixture.TestPoint(p)) return callback(fixture);
         return true;
      };
      var aabb = new b2AABB();
      aabb.lowerBound.Set(p.x - b2Settings.b2_linearSlop, p.y - b2Settings.b2_linearSlop);
      aabb.upperBound.Set(p.x + b2Settings.b2_linearSlop, p.y + b2Settings.b2_linearSlop);
      broadPhase.Query(WorldQueryWrapper, aabb);
   }
   b2World.prototype.RayCast = function (callback, point1, point2) {
      var __this = this;
      var broadPhase = __this.m_contactManager.m_broadPhase;
      var output = new b2RayCastOutput;

      function RayCastWrapper(input, proxy) {
         var userData = broadPhase.GetUserData(proxy);
         var fixture = (userData instanceof b2Fixture ? userData : null);
         var hit = fixture.RayCast(output, input);
         if (hit) {
            var fraction = output.fraction;
            var point = new b2Vec2((1.0 - fraction) * point1.x + fraction * point2.x, (1.0 - fraction) * point1.y + fraction * point2.y);
            return callback(fixture, point, output.normal, fraction);
         }
         return input.maxFraction;
      };
      var input = new b2RayCastInput(point1, point2);
      broadPhase.RayCast(RayCastWrapper, input);
   }
   b2World.prototype.RayCastOne = function (point1, point2) {
      var __this = this;
      var result;

      function RayCastOneWrapper(fixture, point, normal, fraction) {
         if (fraction === undefined) fraction = 0;
         result = fixture;
         return fraction;
      };
      __this.RayCast(RayCastOneWrapper, point1, point2);
      return result;
   }
   b2World.prototype.RayCastAll = function (point1, point2) {
      var __this = this;
      var result = new Vector();

      function RayCastAllWrapper(fixture, point, normal, fraction) {
         if (fraction === undefined) fraction = 0;
         result[result.length] = fixture;
         return 1;
      };
      __this.RayCast(RayCastAllWrapper, point1, point2);
      return result;
   }
   b2World.prototype.GetBodyList = function () {
      return this.m_bodyList;
   }
   b2World.prototype.GetJointList = function () {
      return this.m_jointList;
   }
   b2World.prototype.GetContactList = function () {
      return this.m_contactList;
   }
   b2World.prototype.IsLocked = function () {
      return (this.m_flags & b2World.e_locked) > 0;
   }
   b2World.prototype.Solve = function (step) {
      var b;
      for (var controller = this.m_controllerList; controller; controller = controller.m_next) {
         controller.Step(step);
      }
      var island = this.m_island;
      island.Initialize(this.m_bodyCount, this.m_contactCount, this.m_jointCount, null, this.m_contactManager.m_contactListener, this.m_contactSolver);
      for (b = this.m_bodyList;
      b; b = b.m_next) {
         b.m_flags &= ~b2Body.e_islandFlag;
      }
      for (var c = this.m_contactList; c; c = c.m_next) {
         c.m_flags &= ~b2Contact.e_islandFlag;
      }
      for (var j = this.m_jointList; j; j = j.m_next) {
         j.m_islandFlag = false;
      }
      var stackSize = parseInt(this.m_bodyCount);
      var stack = this.s_stack;
      for (var seed = this.m_bodyList; seed; seed = seed.m_next) {
         if (seed.m_flags & b2Body.e_islandFlag) {
            continue;
         }
         if (seed.IsAwake() == false || seed.IsActive() == false) {
            continue;
         }
         if (seed.GetType() == b2Body.b2_staticBody) {
            continue;
         }
         island.Clear();
         var stackCount = 0;
         stack[stackCount++] = seed;
         seed.m_flags |= b2Body.e_islandFlag;
         while (stackCount > 0) {
            b = stack[--stackCount];
            island.AddBody(b);
            if (b.IsAwake() == false) {
               b.SetAwake(true);
            }
            if (b.GetType() == b2Body.b2_staticBody) {
               continue;
            }
            var other;
            for (var ce = b.m_contactList; ce; ce = ce.next) {
               if (ce.contact.m_flags & b2Contact.e_islandFlag) {
                  continue;
               }
               if (ce.contact.IsSensor() == true || ce.contact.IsEnabled() == false || ce.contact.IsTouching() == false) {
                  continue;
               }
               island.AddContact(ce.contact);
               ce.contact.m_flags |= b2Contact.e_islandFlag;
               other = ce.other;
               if (other.m_flags & b2Body.e_islandFlag) {
                  continue;
               }
               stack[stackCount++] = other;
               other.m_flags |= b2Body.e_islandFlag;
            }
            for (var jn = b.m_jointList; jn; jn = jn.next) {
               if (jn.joint.m_islandFlag == true) {
                  continue;
               }
               other = jn.other;
               if (other.IsActive() == false) {
                  continue;
               }
               island.AddJoint(jn.joint);
               jn.joint.m_islandFlag = true;
               if (other.m_flags & b2Body.e_islandFlag) {
                  continue;
               }
               stack[stackCount++] = other;
               other.m_flags |= b2Body.e_islandFlag;
            }
         }
         island.Solve(step, this.m_gravity, this.m_allowSleep);
         for (var i = 0; i < island.m_bodyCount; ++i) {
            b = island.m_bodies[i];
            if (b.GetType() == b2Body.b2_staticBody) {
               b.m_flags &= ~b2Body.e_islandFlag;
            }
         }
      }
      for (i = 0;
      i < stack.length; ++i) {
         if (!stack[i]) break;
         stack[i] = null;
      }
      for (b = this.m_bodyList;
      b; b = b.m_next) {
         if (b.IsAwake() == false || b.IsActive() == false) {
            continue;
         }
         if (b.GetType() == b2Body.b2_staticBody) {
            continue;
         }
         b.SynchronizeFixtures();
      }
      this.m_contactManager.FindNewContacts();
   }
   b2World.prototype.SolveTOI = function (step) {
      var b;
      var fA;
      var fB;
      var bA;
      var bB;
      var cEdge;
      var j;
      var island = this.m_island;
      island.Initialize(this.m_bodyCount, b2Settings.b2_maxTOIContactsPerIsland, b2Settings.b2_maxTOIJointsPerIsland, null, this.m_contactManager.m_contactListener, this.m_contactSolver);
      var queue = b2World.s_queue;
      for (b = this.m_bodyList;
      b; b = b.m_next) {
         b.m_flags &= ~b2Body.e_islandFlag;
         b.m_sweep.t0 = 0.0;
      }
      var c;
      for (c = this.m_contactList;
      c; c = c.m_next) {
         c.m_flags &= ~ (b2Contact.e_toiFlag | b2Contact.e_islandFlag);
      }
      for (j = this.m_jointList;
      j; j = j.m_next) {
         j.m_islandFlag = false;
      }
      for (;;) {
         var minContact = null;
         var minTOI = 1.0;
         for (c = this.m_contactList;
         c; c = c.m_next) {
            if (c.IsSensor() == true || c.IsEnabled() == false || c.IsContinuous() == false) {
               continue;
            }
            var toi = 1.0;
            if (c.m_flags & b2Contact.e_toiFlag) {
               toi = c.m_toi;
            }
            else {
               fA = c.m_fixtureA;
               fB = c.m_fixtureB;
               bA = fA.m_body;
               bB = fB.m_body;
               if ((bA.GetType() != b2Body.b2_dynamicBody || bA.IsAwake() == false) && (bB.GetType() != b2Body.b2_dynamicBody || bB.IsAwake() == false)) {
                  continue;
               }
               var t0 = bA.m_sweep.t0;
               if (bA.m_sweep.t0 < bB.m_sweep.t0) {
                  t0 = bB.m_sweep.t0;
                  bA.m_sweep.Advance(t0);
               }
               else if (bB.m_sweep.t0 < bA.m_sweep.t0) {
                  t0 = bA.m_sweep.t0;
                  bB.m_sweep.Advance(t0);
               }
               toi = c.ComputeTOI(bA.m_sweep, bB.m_sweep);
               b2Settings.b2Assert(0.0 <= toi && toi <= 1.0);
               if (toi > 0.0 && toi < 1.0) {
                  toi = (1.0 - toi) * t0 + toi;
                  if (toi > 1) toi = 1;
               }
               c.m_toi = toi;
               c.m_flags |= b2Contact.e_toiFlag;
            }
            if (Number.MIN_VALUE < toi && toi < minTOI) {
               minContact = c;
               minTOI = toi;
            }
         }
         if (minContact == null || 1.0 - 100.0 * Number.MIN_VALUE < minTOI) {
            break;
         }
         fA = minContact.m_fixtureA;
         fB = minContact.m_fixtureB;
         bA = fA.m_body;
         bB = fB.m_body;
         b2World.s_backupA.Set(bA.m_sweep);
         b2World.s_backupB.Set(bB.m_sweep);
         bA.Advance(minTOI);
         bB.Advance(minTOI);
         minContact.Update(this.m_contactManager.m_contactListener);
         minContact.m_flags &= ~b2Contact.e_toiFlag;
         if (minContact.IsSensor() == true || minContact.IsEnabled() == false) {
            bA.m_sweep.Set(b2World.s_backupA);
            bB.m_sweep.Set(b2World.s_backupB);
            bA.SynchronizeTransform();
            bB.SynchronizeTransform();
            continue;
         }
         if (minContact.IsTouching() == false) {
            continue;
         }
         var seed = bA;
         if (seed.GetType() != b2Body.b2_dynamicBody) {
            seed = bB;
         }
         island.Clear();
         var queueStart = 0;
         var queueSize = 0;
         queue[queueStart + queueSize++] = seed;
         seed.m_flags |= b2Body.e_islandFlag;
         while (queueSize > 0) {
            b = queue[queueStart++];
            --queueSize;
            island.AddBody(b);
            if (b.IsAwake() == false) {
               b.SetAwake(true);
            }
            if (b.GetType() != b2Body.b2_dynamicBody) {
               continue;
            }
            for (cEdge = b.m_contactList;
            cEdge; cEdge = cEdge.next) {
               if (island.m_contactCount == island.m_contactCapacity) {
                  break;
               }
               if (cEdge.contact.m_flags & b2Contact.e_islandFlag) {
                  continue;
               }
               if (cEdge.contact.IsSensor() == true || cEdge.contact.IsEnabled() == false || cEdge.contact.IsTouching() == false) {
                  continue;
               }
               island.AddContact(cEdge.contact);
               cEdge.contact.m_flags |= b2Contact.e_islandFlag;
               var other = cEdge.other;
               if (other.m_flags & b2Body.e_islandFlag) {
                  continue;
               }
               if (other.GetType() != b2Body.b2_staticBody) {
                  other.Advance(minTOI);
                  other.SetAwake(true);
               }
               queue[queueStart + queueSize] = other;
               ++queueSize;
               other.m_flags |= b2Body.e_islandFlag;
            }
            for (var jEdge = b.m_jointList; jEdge; jEdge = jEdge.next) {
               if (island.m_jointCount == island.m_jointCapacity) continue;
               if (jEdge.joint.m_islandFlag == true) continue;
               other = jEdge.other;
               if (other.IsActive() == false) {
                  continue;
               }
               island.AddJoint(jEdge.joint);
               jEdge.joint.m_islandFlag = true;
               if (other.m_flags & b2Body.e_islandFlag) continue;
               if (other.GetType() != b2Body.b2_staticBody) {
                  other.Advance(minTOI);
                  other.SetAwake(true);
               }
               queue[queueStart + queueSize] = other;
               ++queueSize;
               other.m_flags |= b2Body.e_islandFlag;
            }
         }
         var subStep = b2World.s_timestep;
         subStep.warmStarting = false;
         subStep.dt = (1.0 - minTOI) * step.dt;
         subStep.inv_dt = 1.0 / subStep.dt;
         subStep.dtRatio = 0.0;
         subStep.velocityIterations = step.velocityIterations;
         subStep.positionIterations = step.positionIterations;
         island.SolveTOI(subStep);
         var i = 0;
         for (i = 0;
         i < island.m_bodyCount; ++i) {
            b = island.m_bodies[i];
            b.m_flags &= ~b2Body.e_islandFlag;
            if (b.IsAwake() == false) {
               continue;
            }
            if (b.GetType() != b2Body.b2_dynamicBody) {
               continue;
            }
            b.SynchronizeFixtures();
            for (cEdge = b.m_contactList;
            cEdge; cEdge = cEdge.next) {
               cEdge.contact.m_flags &= ~b2Contact.e_toiFlag;
            }
         }
         for (i = 0;
         i < island.m_contactCount; ++i) {
            c = island.m_contacts[i];
            c.m_flags &= ~ (b2Contact.e_toiFlag | b2Contact.e_islandFlag);
         }
         for (i = 0;
         i < island.m_jointCount; ++i) {
            j = island.m_joints[i];
            j.m_islandFlag = false;
         }
         this.m_contactManager.FindNewContacts();
      }
   }
   b2World.prototype.DrawJoint = function (joint) {
      var b1 = joint.GetBodyA();
      var b2 = joint.GetBodyB();
      var xf1 = b1.m_xf;
      var xf2 = b2.m_xf;
      var x1 = xf1.position;
      var x2 = xf2.position;
      var p1 = joint.GetAnchorA();
      var p2 = joint.GetAnchorB();
      var color = b2World.s_jointColor;
      switch (joint.m_type) {
      case b2Joint.e_distanceJoint:
         this.m_debugDraw.DrawSegment(p1, p2, color);
         break;
      case b2Joint.e_pulleyJoint:
         {
            var pulley = ((joint instanceof b2PulleyJoint ? joint : null));
            var s1 = pulley.GetGroundAnchorA();
            var s2 = pulley.GetGroundAnchorB();
            this.m_debugDraw.DrawSegment(s1, p1, color);
            this.m_debugDraw.DrawSegment(s2, p2, color);
            this.m_debugDraw.DrawSegment(s1, s2, color);
         }
         break;
      case b2Joint.e_mouseJoint:
         this.m_debugDraw.DrawSegment(p1, p2, color);
         break;
      default:
         if (b1 != this.m_groundBody) this.m_debugDraw.DrawSegment(x1, p1, color);
         this.m_debugDraw.DrawSegment(p1, p2, color);
         if (b2 != this.m_groundBody) this.m_debugDraw.DrawSegment(x2, p2, color);
      }
   }
   b2World.prototype.DrawShape = function (shape, xf, color) {
      switch (shape.m_type) {
      case b2Shape.e_circleShape:
         {
            var circle = ((shape instanceof b2CircleShape ? shape : null));
            var center = b2Math.MulX(xf, circle.m_p);
            var radius = circle.m_radius;
            var axis = xf.R.col1;
            this.m_debugDraw.DrawSolidCircle(center, radius, axis, color);
         }
         break;
      case b2Shape.e_polygonShape:
         {
            var i = 0;
            var poly = ((shape instanceof b2PolygonShape ? shape : null));
            var vertexCount = parseInt(poly.GetVertexCount());
            var localVertices = poly.GetVertices();
            var vertices = new Vector(vertexCount);
            for (i = 0;
            i < vertexCount; ++i) {
               vertices[i] = b2Math.MulX(xf, localVertices[i]);
            }
            this.m_debugDraw.DrawSolidPolygon(vertices, vertexCount, color);
         }
         break;
      case b2Shape.e_edgeShape:
         {
            var edge = (shape instanceof b2EdgeShape ? shape : null);
            this.m_debugDraw.DrawSegment(b2Math.MulX(xf, edge.GetVertex1()), b2Math.MulX(xf, edge.GetVertex2()), color);
         }
         break;
      }
   }
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2World.s_timestep2 = new b2TimeStep();
      Box2D.Dynamics.b2World.s_xf = new b2Transform();
      Box2D.Dynamics.b2World.s_backupA = new b2Sweep();
      Box2D.Dynamics.b2World.s_backupB = new b2Sweep();
      Box2D.Dynamics.b2World.s_timestep = new b2TimeStep();
      Box2D.Dynamics.b2World.s_queue = new Vector();
      Box2D.Dynamics.b2World.s_jointColor = new b2Color(0.5, 0.8, 0.8);
      Box2D.Dynamics.b2World.e_newFixture = 0x0001;
      Box2D.Dynamics.b2World.e_locked = 0x0002;
   });
})();
(function () {
   var b2CircleShape = Box2D.Collision.Shapes.b2CircleShape,
      b2EdgeChainDef = Box2D.Collision.Shapes.b2EdgeChainDef,
      b2EdgeShape = Box2D.Collision.Shapes.b2EdgeShape,
      b2MassData = Box2D.Collision.Shapes.b2MassData,
      b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape,
      b2Shape = Box2D.Collision.Shapes.b2Shape,
      b2CircleContact = Box2D.Dynamics.Contacts.b2CircleContact,
      b2Contact = Box2D.Dynamics.Contacts.b2Contact,
      b2ContactConstraint = Box2D.Dynamics.Contacts.b2ContactConstraint,
      b2ContactConstraintPoint = Box2D.Dynamics.Contacts.b2ContactConstraintPoint,
      b2ContactEdge = Box2D.Dynamics.Contacts.b2ContactEdge,
      b2ContactFactory = Box2D.Dynamics.Contacts.b2ContactFactory,
      b2ContactRegister = Box2D.Dynamics.Contacts.b2ContactRegister,
      b2ContactResult = Box2D.Dynamics.Contacts.b2ContactResult,
      b2ContactSolver = Box2D.Dynamics.Contacts.b2ContactSolver,
      b2EdgeAndCircleContact = Box2D.Dynamics.Contacts.b2EdgeAndCircleContact,
      b2NullContact = Box2D.Dynamics.Contacts.b2NullContact,
      b2PolyAndCircleContact = Box2D.Dynamics.Contacts.b2PolyAndCircleContact,
      b2PolyAndEdgeContact = Box2D.Dynamics.Contacts.b2PolyAndEdgeContact,
      b2PolygonContact = Box2D.Dynamics.Contacts.b2PolygonContact,
      b2PositionSolverManifold = Box2D.Dynamics.Contacts.b2PositionSolverManifold,
      b2Body = Box2D.Dynamics.b2Body,
      b2BodyDef = Box2D.Dynamics.b2BodyDef,
      b2ContactFilter = Box2D.Dynamics.b2ContactFilter,
      b2ContactImpulse = Box2D.Dynamics.b2ContactImpulse,
      b2ContactListener = Box2D.Dynamics.b2ContactListener,
      b2ContactManager = Box2D.Dynamics.b2ContactManager,
      b2DebugDraw = Box2D.Dynamics.b2DebugDraw,
      b2DestructionListener = Box2D.Dynamics.b2DestructionListener,
      b2FilterData = Box2D.Dynamics.b2FilterData,
      b2Fixture = Box2D.Dynamics.b2Fixture,
      b2FixtureDef = Box2D.Dynamics.b2FixtureDef,
      b2Island = Box2D.Dynamics.b2Island,
      b2TimeStep = Box2D.Dynamics.b2TimeStep,
      b2World = Box2D.Dynamics.b2World,
      b2Color = Box2D.Common.b2Color,
      b2internal = Box2D.Common.b2internal,
      b2Settings = Box2D.Common.b2Settings,
      b2Mat22 = Box2D.Common.Math.b2Mat22,
      b2Mat33 = Box2D.Common.Math.b2Mat33,
      b2Math = Box2D.Common.Math.b2Math,
      b2Sweep = Box2D.Common.Math.b2Sweep,
      b2Transform = Box2D.Common.Math.b2Transform,
      b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2Vec3 = Box2D.Common.Math.b2Vec3,
      b2AABB = Box2D.Collision.b2AABB,
      b2Bound = Box2D.Collision.b2Bound,
      b2BoundValues = Box2D.Collision.b2BoundValues,
      b2Collision = Box2D.Collision.b2Collision,
      b2ContactID = Box2D.Collision.b2ContactID,
      b2ContactPoint = Box2D.Collision.b2ContactPoint,
      b2Distance = Box2D.Collision.b2Distance,
      b2DistanceInput = Box2D.Collision.b2DistanceInput,
      b2DistanceOutput = Box2D.Collision.b2DistanceOutput,
      b2DistanceProxy = Box2D.Collision.b2DistanceProxy,
      b2DynamicTree = Box2D.Collision.b2DynamicTree,
      b2DynamicTreeBroadPhase = Box2D.Collision.b2DynamicTreeBroadPhase,
      b2DynamicTreeNode = Box2D.Collision.b2DynamicTreeNode,
      b2DynamicTreePair = Box2D.Collision.b2DynamicTreePair,
      b2Manifold = Box2D.Collision.b2Manifold,
      b2ManifoldPoint = Box2D.Collision.b2ManifoldPoint,
      b2Point = Box2D.Collision.b2Point,
      b2RayCastInput = Box2D.Collision.b2RayCastInput,
      b2RayCastOutput = Box2D.Collision.b2RayCastOutput,
      b2Segment = Box2D.Collision.b2Segment,
      b2SeparationFunction = Box2D.Collision.b2SeparationFunction,
      b2Simplex = Box2D.Collision.b2Simplex,
      b2SimplexCache = Box2D.Collision.b2SimplexCache,
      b2SimplexVertex = Box2D.Collision.b2SimplexVertex,
      b2TimeOfImpact = Box2D.Collision.b2TimeOfImpact,
      b2TOIInput = Box2D.Collision.b2TOIInput,
      b2WorldManifold = Box2D.Collision.b2WorldManifold,
      ClipVertex = Box2D.Collision.ClipVertex,
      Features = Box2D.Collision.Features,
      IBroadPhase = Box2D.Collision.IBroadPhase;

   Box2D.inherit(b2CircleContact, Box2D.Dynamics.Contacts.b2Contact);
   b2CircleContact.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
   b2CircleContact.b2CircleContact = function () {
      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);
   };
   b2CircleContact.Create = function (allocator) {
      return new b2CircleContact();
   }
   b2CircleContact.Destroy = function (contact, allocator) {}
   b2CircleContact.prototype.Reset = function (fixtureA, fixtureB) {
      this.__super.Reset.call(this, fixtureA, fixtureB);
   }
   b2CircleContact.prototype.Evaluate = function () {
      var bA = this.m_fixtureA.GetBody();
      var bB = this.m_fixtureB.GetBody();
      b2Collision.CollideCircles(this.m_manifold, (this.m_fixtureA.GetShape() instanceof b2CircleShape ? this.m_fixtureA.GetShape() : null), bA.m_xf, (this.m_fixtureB.GetShape() instanceof b2CircleShape ? this.m_fixtureB.GetShape() : null), bB.m_xf);
   }
   b2Contact.b2Contact = function () {
      this.m_nodeA = new b2ContactEdge();
      this.m_nodeB = new b2ContactEdge();
      this.m_manifold = new b2Manifold();
      this.m_oldManifold = new b2Manifold();
   };
   b2Contact.prototype.GetManifold = function () {
      return this.m_manifold;
   }
   b2Contact.prototype.GetWorldManifold = function (worldManifold) {
      var bodyA = this.m_fixtureA.GetBody();
      var bodyB = this.m_fixtureB.GetBody();
      var shapeA = this.m_fixtureA.GetShape();
      var shapeB = this.m_fixtureB.GetShape();
      worldManifold.Initialize(this.m_manifold, bodyA.GetTransform(), shapeA.m_radius, bodyB.GetTransform(), shapeB.m_radius);
   }
   b2Contact.prototype.IsTouching = function () {
      return (this.m_flags & b2Contact.e_touchingFlag) == b2Contact.e_touchingFlag;
   }
   b2Contact.prototype.IsContinuous = function () {
      return (this.m_flags & b2Contact.e_continuousFlag) == b2Contact.e_continuousFlag;
   }
   b2Contact.prototype.SetSensor = function (sensor) {
      if (sensor) {
         this.m_flags |= b2Contact.e_sensorFlag;
      }
      else {
         this.m_flags &= ~b2Contact.e_sensorFlag;
      }
   }
   b2Contact.prototype.IsSensor = function () {
      return (this.m_flags & b2Contact.e_sensorFlag) == b2Contact.e_sensorFlag;
   }
   b2Contact.prototype.SetEnabled = function (flag) {
      if (flag) {
         this.m_flags |= b2Contact.e_enabledFlag;
      }
      else {
         this.m_flags &= ~b2Contact.e_enabledFlag;
      }
   }
   b2Contact.prototype.IsEnabled = function () {
      return (this.m_flags & b2Contact.e_enabledFlag) == b2Contact.e_enabledFlag;
   }
   b2Contact.prototype.GetNext = function () {
      return this.m_next;
   }
   b2Contact.prototype.GetFixtureA = function () {
      return this.m_fixtureA;
   }
   b2Contact.prototype.GetFixtureB = function () {
      return this.m_fixtureB;
   }
   b2Contact.prototype.FlagForFiltering = function () {
      this.m_flags |= b2Contact.e_filterFlag;
   }
   b2Contact.prototype.b2Contact = function () {}
   b2Contact.prototype.Reset = function (fixtureA, fixtureB) {
      if (fixtureA === undefined) fixtureA = null;
      if (fixtureB === undefined) fixtureB = null;
      this.m_flags = b2Contact.e_enabledFlag;
      if (!fixtureA || !fixtureB) {
         this.m_fixtureA = null;
         this.m_fixtureB = null;
         return;
      }
      if (fixtureA.IsSensor() || fixtureB.IsSensor()) {
         this.m_flags |= b2Contact.e_sensorFlag;
      }
      var bodyA = fixtureA.GetBody();
      var bodyB = fixtureB.GetBody();
      if (bodyA.GetType() != b2Body.b2_dynamicBody || bodyA.IsBullet() || bodyB.GetType() != b2Body.b2_dynamicBody || bodyB.IsBullet()) {
         this.m_flags |= b2Contact.e_continuousFlag;
      }
      this.m_fixtureA = fixtureA;
      this.m_fixtureB = fixtureB;
      this.m_manifold.m_pointCount = 0;
      this.m_prev = null;
      this.m_next = null;
      this.m_nodeA.contact = null;
      this.m_nodeA.prev = null;
      this.m_nodeA.next = null;
      this.m_nodeA.other = null;
      this.m_nodeB.contact = null;
      this.m_nodeB.prev = null;
      this.m_nodeB.next = null;
      this.m_nodeB.other = null;
   }
   b2Contact.prototype.Update = function (listener) {
      var tManifold = this.m_oldManifold;
      this.m_oldManifold = this.m_manifold;
      this.m_manifold = tManifold;
      this.m_flags |= b2Contact.e_enabledFlag;
      var touching = false;
      var wasTouching = (this.m_flags & b2Contact.e_touchingFlag) == b2Contact.e_touchingFlag;
      var bodyA = this.m_fixtureA.m_body;
      var bodyB = this.m_fixtureB.m_body;
      var aabbOverlap = this.m_fixtureA.m_aabb.TestOverlap(this.m_fixtureB.m_aabb);
      if (this.m_flags & b2Contact.e_sensorFlag) {
         if (aabbOverlap) {
            var shapeA = this.m_fixtureA.GetShape();
            var shapeB = this.m_fixtureB.GetShape();
            var xfA = bodyA.GetTransform();
            var xfB = bodyB.GetTransform();
            touching = b2Shape.TestOverlap(shapeA, xfA, shapeB, xfB);
         }
         this.m_manifold.m_pointCount = 0;
      }
      else {
         if (bodyA.GetType() != b2Body.b2_dynamicBody || bodyA.IsBullet() || bodyB.GetType() != b2Body.b2_dynamicBody || bodyB.IsBullet()) {
            this.m_flags |= b2Contact.e_continuousFlag;
         }
         else {
            this.m_flags &= ~b2Contact.e_continuousFlag;
         }
         if (aabbOverlap) {
            this.Evaluate();
            touching = this.m_manifold.m_pointCount > 0;
            for (var i = 0; i < this.m_manifold.m_pointCount; ++i) {
               var mp2 = this.m_manifold.m_points[i];
               mp2.m_normalImpulse = 0.0;
               mp2.m_tangentImpulse = 0.0;
               var id2 = mp2.m_id;
               for (var j = 0; j < this.m_oldManifold.m_pointCount; ++j) {
                  var mp1 = this.m_oldManifold.m_points[j];
                  if (mp1.m_id.key == id2.key) {
                     mp2.m_normalImpulse = mp1.m_normalImpulse;
                     mp2.m_tangentImpulse = mp1.m_tangentImpulse;
                     break;
                  }
               }
            }
         }
         else {
            this.m_manifold.m_pointCount = 0;
         }
         if (touching != wasTouching) {
            bodyA.SetAwake(true);
            bodyB.SetAwake(true);
         }
      }
      if (touching) {
         this.m_flags |= b2Contact.e_touchingFlag;
      }
      else {
         this.m_flags &= ~b2Contact.e_touchingFlag;
      }
      if (wasTouching == false && touching == true) {
         listener.BeginContact(this);
      }
      if (wasTouching == true && touching == false) {
         listener.EndContact(this);
      }
      if ((this.m_flags & b2Contact.e_sensorFlag) == 0) {
         listener.PreSolve(this, this.m_oldManifold);
      }
   }
   b2Contact.prototype.Evaluate = function () {}
   b2Contact.prototype.ComputeTOI = function (sweepA, sweepB) {
      b2Contact.s_input.proxyA.Set(this.m_fixtureA.GetShape());
      b2Contact.s_input.proxyB.Set(this.m_fixtureB.GetShape());
      b2Contact.s_input.sweepA = sweepA;
      b2Contact.s_input.sweepB = sweepB;
      b2Contact.s_input.tolerance = b2Settings.b2_linearSlop;
      return b2TimeOfImpact.TimeOfImpact(b2Contact.s_input);
   }
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.Contacts.b2Contact.e_sensorFlag = 0x0001;
      Box2D.Dynamics.Contacts.b2Contact.e_continuousFlag = 0x0002;
      Box2D.Dynamics.Contacts.b2Contact.e_islandFlag = 0x0004;
      Box2D.Dynamics.Contacts.b2Contact.e_toiFlag = 0x0008;
      Box2D.Dynamics.Contacts.b2Contact.e_touchingFlag = 0x0010;
      Box2D.Dynamics.Contacts.b2Contact.e_enabledFlag = 0x0020;
      Box2D.Dynamics.Contacts.b2Contact.e_filterFlag = 0x0040;
      Box2D.Dynamics.Contacts.b2Contact.s_input = new b2TOIInput();
   });
   b2ContactConstraint.b2ContactConstraint = function () {
      this.localPlaneNormal = new b2Vec2();
      this.localPoint = new b2Vec2();
      this.normal = new b2Vec2();
      this.normalMass = new b2Mat22();
      this.K = new b2Mat22();
   };
   b2ContactConstraint.prototype.b2ContactConstraint = function () {
      this.points = new Vector(b2Settings.b2_maxManifoldPoints);
      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {
         this.points[i] = new b2ContactConstraintPoint();
      }
   }
   b2ContactConstraintPoint.b2ContactConstraintPoint = function () {
      this.localPoint = new b2Vec2();
      this.rA = new b2Vec2();
      this.rB = new b2Vec2();
   };
   b2ContactEdge.b2ContactEdge = function () {};
   b2ContactFactory.b2ContactFactory = function () {};
   b2ContactFactory.prototype.b2ContactFactory = function (allocator) {
      this.m_allocator = allocator;
      this.InitializeRegisters();
   }
   b2ContactFactory.prototype.AddType = function (createFcn, destroyFcn, type1, type2) {
      if (type1 === undefined) type1 = 0;
      if (type2 === undefined) type2 = 0;
      this.m_registers[type1][type2].createFcn = createFcn;
      this.m_registers[type1][type2].destroyFcn = destroyFcn;
      this.m_registers[type1][type2].primary = true;
      if (type1 != type2) {
         this.m_registers[type2][type1].createFcn = createFcn;
         this.m_registers[type2][type1].destroyFcn = destroyFcn;
         this.m_registers[type2][type1].primary = false;
      }
   }
   b2ContactFactory.prototype.InitializeRegisters = function () {
      this.m_registers = new Vector(b2Shape.e_shapeTypeCount);
      for (var i = 0; i < b2Shape.e_shapeTypeCount; i++) {
         this.m_registers[i] = new Vector(b2Shape.e_shapeTypeCount);
         for (var j = 0; j < b2Shape.e_shapeTypeCount; j++) {
            this.m_registers[i][j] = new b2ContactRegister();
         }
      }
      this.AddType(b2CircleContact.Create, b2CircleContact.Destroy, b2Shape.e_circleShape, b2Shape.e_circleShape);
      this.AddType(b2PolyAndCircleContact.Create, b2PolyAndCircleContact.Destroy, b2Shape.e_polygonShape, b2Shape.e_circleShape);
      this.AddType(b2PolygonContact.Create, b2PolygonContact.Destroy, b2Shape.e_polygonShape, b2Shape.e_polygonShape);
      this.AddType(b2EdgeAndCircleContact.Create, b2EdgeAndCircleContact.Destroy, b2Shape.e_edgeShape, b2Shape.e_circleShape);
      this.AddType(b2PolyAndEdgeContact.Create, b2PolyAndEdgeContact.Destroy, b2Shape.e_polygonShape, b2Shape.e_edgeShape);
   }
   b2ContactFactory.prototype.Create = function (fixtureA, fixtureB) {
      var type1 = parseInt(fixtureA.GetType());
      var type2 = parseInt(fixtureB.GetType());
      var reg = this.m_registers[type1][type2];
      var c;
      if (reg.pool) {
         c = reg.pool;
         reg.pool = c.m_next;
         reg.poolCount--;
         c.Reset(fixtureA, fixtureB);
         return c;
      }
      var createFcn = reg.createFcn;
      if (createFcn != null) {
         if (reg.primary) {
            c = createFcn(this.m_allocator);
            c.Reset(fixtureA, fixtureB);
            return c;
         }
         else {
            c = createFcn(this.m_allocator);
            c.Reset(fixtureB, fixtureA);
            return c;
         }
      }
      else {
         return null;
      }
   }
   b2ContactFactory.prototype.Destroy = function (contact) {
      if (contact.m_manifold.m_pointCount > 0) {
         contact.m_fixtureA.m_body.SetAwake(true);
         contact.m_fixtureB.m_body.SetAwake(true);
      }
      var type1 = parseInt(contact.m_fixtureA.GetType());
      var type2 = parseInt(contact.m_fixtureB.GetType());
      var reg = this.m_registers[type1][type2];
      if (true) {
         reg.poolCount++;
         contact.m_next = reg.pool;
         reg.pool = contact;
      }
      var destroyFcn = reg.destroyFcn;
      destroyFcn(contact, this.m_allocator);
   }
   b2ContactRegister.b2ContactRegister = function () {};
   b2ContactResult.b2ContactResult = function () {
      this.position = new b2Vec2();
      this.normal = new b2Vec2();
      this.id = new b2ContactID();
   };
   b2ContactSolver.b2ContactSolver = function () {
      this.m_step = new b2TimeStep();
      this.m_constraints = new Vector();
   };
   b2ContactSolver.prototype.b2ContactSolver = function () {}
   b2ContactSolver.prototype.Initialize = function (step, contacts, contactCount, allocator) {
      if (contactCount === undefined) contactCount = 0;
      var contact;
      this.m_step.Set(step);
      this.m_allocator = allocator;
      var i = 0;
      var tVec;
      var tMat;
      this.m_constraintCount = contactCount;
      while (this.m_constraints.length < this.m_constraintCount) {
         this.m_constraints[this.m_constraints.length] = new b2ContactConstraint();
      }
      for (i = 0;
      i < contactCount; ++i) {
         contact = contacts[i];
         var fixtureA = contact.m_fixtureA;
         var fixtureB = contact.m_fixtureB;
         var shapeA = fixtureA.m_shape;
         var shapeB = fixtureB.m_shape;
         var radiusA = shapeA.m_radius;
         var radiusB = shapeB.m_radius;
         var bodyA = fixtureA.m_body;
         var bodyB = fixtureB.m_body;
         var manifold = contact.GetManifold();
         var friction = b2Settings.b2MixFriction(fixtureA.GetFriction(), fixtureB.GetFriction());
         var restitution = b2Settings.b2MixRestitution(fixtureA.GetRestitution(), fixtureB.GetRestitution());
         var vAX = bodyA.m_linearVelocity.x;
         var vAY = bodyA.m_linearVelocity.y;
         var vBX = bodyB.m_linearVelocity.x;
         var vBY = bodyB.m_linearVelocity.y;
         var wA = bodyA.m_angularVelocity;
         var wB = bodyB.m_angularVelocity;
         b2Settings.b2Assert(manifold.m_pointCount > 0);
         b2ContactSolver.s_worldManifold.Initialize(manifold, bodyA.m_xf, radiusA, bodyB.m_xf, radiusB);
         var normalX = b2ContactSolver.s_worldManifold.m_normal.x;
         var normalY = b2ContactSolver.s_worldManifold.m_normal.y;
         var cc = this.m_constraints[i];
         cc.bodyA = bodyA;
         cc.bodyB = bodyB;
         cc.manifold = manifold;
         cc.normal.x = normalX;
         cc.normal.y = normalY;
         cc.pointCount = manifold.m_pointCount;
         cc.friction = friction;
         cc.restitution = restitution;
         cc.localPlaneNormal.x = manifold.m_localPlaneNormal.x;
         cc.localPlaneNormal.y = manifold.m_localPlaneNormal.y;
         cc.localPoint.x = manifold.m_localPoint.x;
         cc.localPoint.y = manifold.m_localPoint.y;
         cc.radius = radiusA + radiusB;
         cc.type = manifold.m_type;
         for (var k = 0; k < cc.pointCount; ++k) {
            var cp = manifold.m_points[k];
            var ccp = cc.points[k];
            ccp.normalImpulse = cp.m_normalImpulse;
            ccp.tangentImpulse = cp.m_tangentImpulse;
            ccp.localPoint.SetV(cp.m_localPoint);
            var rAX = ccp.rA.x = b2ContactSolver.s_worldManifold.m_points[k].x - bodyA.m_sweep.c.x;
            var rAY = ccp.rA.y = b2ContactSolver.s_worldManifold.m_points[k].y - bodyA.m_sweep.c.y;
            var rBX = ccp.rB.x = b2ContactSolver.s_worldManifold.m_points[k].x - bodyB.m_sweep.c.x;
            var rBY = ccp.rB.y = b2ContactSolver.s_worldManifold.m_points[k].y - bodyB.m_sweep.c.y;
            var rnA = rAX * normalY - rAY * normalX;
            var rnB = rBX * normalY - rBY * normalX;
            rnA *= rnA;
            rnB *= rnB;
            var kNormal = bodyA.m_invMass + bodyB.m_invMass + bodyA.m_invI * rnA + bodyB.m_invI * rnB;
            ccp.normalMass = 1.0 / kNormal;
            var kEqualized = bodyA.m_mass * bodyA.m_invMass + bodyB.m_mass * bodyB.m_invMass;
            kEqualized += bodyA.m_mass * bodyA.m_invI * rnA + bodyB.m_mass * bodyB.m_invI * rnB;
            ccp.equalizedMass = 1.0 / kEqualized;
            var tangentX = normalY;
            var tangentY = (-normalX);
            var rtA = rAX * tangentY - rAY * tangentX;
            var rtB = rBX * tangentY - rBY * tangentX;
            rtA *= rtA;
            rtB *= rtB;
            var kTangent = bodyA.m_invMass + bodyB.m_invMass + bodyA.m_invI * rtA + bodyB.m_invI * rtB;
            ccp.tangentMass = 1.0 / kTangent;
            ccp.velocityBias = 0.0;
            var tX = vBX + ((-wB * rBY)) - vAX - ((-wA * rAY));
            var tY = vBY + (wB * rBX) - vAY - (wA * rAX);
            var vRel = cc.normal.x * tX + cc.normal.y * tY;
            if (vRel < (-b2Settings.b2_velocityThreshold)) {
               ccp.velocityBias += (-cc.restitution * vRel);
            }
         }
         if (cc.pointCount == 2) {
            var ccp1 = cc.points[0];
            var ccp2 = cc.points[1];
            var invMassA = bodyA.m_invMass;
            var invIA = bodyA.m_invI;
            var invMassB = bodyB.m_invMass;
            var invIB = bodyB.m_invI;
            var rn1A = ccp1.rA.x * normalY - ccp1.rA.y * normalX;
            var rn1B = ccp1.rB.x * normalY - ccp1.rB.y * normalX;
            var rn2A = ccp2.rA.x * normalY - ccp2.rA.y * normalX;
            var rn2B = ccp2.rB.x * normalY - ccp2.rB.y * normalX;
            var k11 = invMassA + invMassB + invIA * rn1A * rn1A + invIB * rn1B * rn1B;
            var k22 = invMassA + invMassB + invIA * rn2A * rn2A + invIB * rn2B * rn2B;
            var k12 = invMassA + invMassB + invIA * rn1A * rn2A + invIB * rn1B * rn2B;
            var k_maxConditionNumber = 100.0;
            if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {
               cc.K.col1.Set(k11, k12);
               cc.K.col2.Set(k12, k22);
               cc.K.GetInverse(cc.normalMass);
            }
            else {
               cc.pointCount = 1;
            }
         }
      }
   }
   b2ContactSolver.prototype.InitVelocityConstraints = function (step) {
      var tVec;
      var tVec2;
      var tMat;
      for (var i = 0; i < this.m_constraintCount; ++i) {
         var c = this.m_constraints[i];
         var bodyA = c.bodyA;
         var bodyB = c.bodyB;
         var invMassA = bodyA.m_invMass;
         var invIA = bodyA.m_invI;
         var invMassB = bodyB.m_invMass;
         var invIB = bodyB.m_invI;
         var normalX = c.normal.x;
         var normalY = c.normal.y;
         var tangentX = normalY;
         var tangentY = (-normalX);
         var tX = 0;
         var j = 0;
         var tCount = 0;
         if (step.warmStarting) {
            tCount = c.pointCount;
            for (j = 0;
            j < tCount; ++j) {
               var ccp = c.points[j];
               ccp.normalImpulse *= step.dtRatio;
               ccp.tangentImpulse *= step.dtRatio;
               var PX = ccp.normalImpulse * normalX + ccp.tangentImpulse * tangentX;
               var PY = ccp.normalImpulse * normalY + ccp.tangentImpulse * tangentY;
               bodyA.m_angularVelocity -= invIA * (ccp.rA.x * PY - ccp.rA.y * PX);
               bodyA.m_linearVelocity.x -= invMassA * PX;
               bodyA.m_linearVelocity.y -= invMassA * PY;
               bodyB.m_angularVelocity += invIB * (ccp.rB.x * PY - ccp.rB.y * PX);
               bodyB.m_linearVelocity.x += invMassB * PX;
               bodyB.m_linearVelocity.y += invMassB * PY;
            }
         }
         else {
            tCount = c.pointCount;
            for (j = 0;
            j < tCount; ++j) {
               var ccp2 = c.points[j];
               ccp2.normalImpulse = 0.0;
               ccp2.tangentImpulse = 0.0;
            }
         }
      }
   }
   b2ContactSolver.prototype.SolveVelocityConstraints = function () {
      var j = 0;
      var ccp;
      var rAX = 0;
      var rAY = 0;
      var rBX = 0;
      var rBY = 0;
      var dvX = 0;
      var dvY = 0;
      var vn = 0;
      var vt = 0;
      var lambda = 0;
      var maxFriction = 0;
      var newImpulse = 0;
      var PX = 0;
      var PY = 0;
      var dX = 0;
      var dY = 0;
      var P1X = 0;
      var P1Y = 0;
      var P2X = 0;
      var P2Y = 0;
      var tMat;
      var tVec;
      for (var i = 0; i < this.m_constraintCount; ++i) {
         var c = this.m_constraints[i];
         var bodyA = c.bodyA;
         var bodyB = c.bodyB;
         var wA = bodyA.m_angularVelocity;
         var wB = bodyB.m_angularVelocity;
         var vA = bodyA.m_linearVelocity;
         var vB = bodyB.m_linearVelocity;
         var invMassA = bodyA.m_invMass;
         var invIA = bodyA.m_invI;
         var invMassB = bodyB.m_invMass;
         var invIB = bodyB.m_invI;
         var normalX = c.normal.x;
         var normalY = c.normal.y;
         var tangentX = normalY;
         var tangentY = (-normalX);
         var friction = c.friction;
         var tX = 0;
         for (j = 0;
         j < c.pointCount; j++) {
            ccp = c.points[j];
            dvX = vB.x - wB * ccp.rB.y - vA.x + wA * ccp.rA.y;
            dvY = vB.y + wB * ccp.rB.x - vA.y - wA * ccp.rA.x;
            vt = dvX * tangentX + dvY * tangentY;
            lambda = ccp.tangentMass * (-vt);
            maxFriction = friction * ccp.normalImpulse;
            newImpulse = b2Math.Clamp(ccp.tangentImpulse + lambda, (-maxFriction), maxFriction);
            lambda = newImpulse - ccp.tangentImpulse;
            PX = lambda * tangentX;
            PY = lambda * tangentY;
            vA.x -= invMassA * PX;
            vA.y -= invMassA * PY;
            wA -= invIA * (ccp.rA.x * PY - ccp.rA.y * PX);
            vB.x += invMassB * PX;
            vB.y += invMassB * PY;
            wB += invIB * (ccp.rB.x * PY - ccp.rB.y * PX);
            ccp.tangentImpulse = newImpulse;
         }
         var tCount = parseInt(c.pointCount);
         if (c.pointCount == 1) {
            ccp = c.points[0];
            dvX = vB.x + ((-wB * ccp.rB.y)) - vA.x - ((-wA * ccp.rA.y));
            dvY = vB.y + (wB * ccp.rB.x) - vA.y - (wA * ccp.rA.x);
            vn = dvX * normalX + dvY * normalY;
            lambda = (-ccp.normalMass * (vn - ccp.velocityBias));
            newImpulse = ccp.normalImpulse + lambda;
            newImpulse = newImpulse > 0 ? newImpulse : 0.0;
            lambda = newImpulse - ccp.normalImpulse;
            PX = lambda * normalX;
            PY = lambda * normalY;
            vA.x -= invMassA * PX;
            vA.y -= invMassA * PY;
            wA -= invIA * (ccp.rA.x * PY - ccp.rA.y * PX);
            vB.x += invMassB * PX;
            vB.y += invMassB * PY;
            wB += invIB * (ccp.rB.x * PY - ccp.rB.y * PX);
            ccp.normalImpulse = newImpulse;
         }
         else {
            var cp1 = c.points[0];
            var cp2 = c.points[1];
            var aX = cp1.normalImpulse;
            var aY = cp2.normalImpulse;
            var dv1X = vB.x - wB * cp1.rB.y - vA.x + wA * cp1.rA.y;
            var dv1Y = vB.y + wB * cp1.rB.x - vA.y - wA * cp1.rA.x;
            var dv2X = vB.x - wB * cp2.rB.y - vA.x + wA * cp2.rA.y;
            var dv2Y = vB.y + wB * cp2.rB.x - vA.y - wA * cp2.rA.x;
            var vn1 = dv1X * normalX + dv1Y * normalY;
            var vn2 = dv2X * normalX + dv2Y * normalY;
            var bX = vn1 - cp1.velocityBias;
            var bY = vn2 - cp2.velocityBias;
            tMat = c.K;
            bX -= tMat.col1.x * aX + tMat.col2.x * aY;
            bY -= tMat.col1.y * aX + tMat.col2.y * aY;
            var k_errorTol = 0.001;
            for (;;) {
               tMat = c.normalMass;
               var xX = (-(tMat.col1.x * bX + tMat.col2.x * bY));
               var xY = (-(tMat.col1.y * bX + tMat.col2.y * bY));
               if (xX >= 0.0 && xY >= 0.0) {
                  dX = xX - aX;
                  dY = xY - aY;
                  P1X = dX * normalX;
                  P1Y = dX * normalY;
                  P2X = dY * normalX;
                  P2Y = dY * normalY;
                  vA.x -= invMassA * (P1X + P2X);
                  vA.y -= invMassA * (P1Y + P2Y);
                  wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);
                  vB.x += invMassB * (P1X + P2X);
                  vB.y += invMassB * (P1Y + P2Y);
                  wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);
                  cp1.normalImpulse = xX;
                  cp2.normalImpulse = xY;
                  break;
               }
               xX = (-cp1.normalMass * bX);
               xY = 0.0;
               vn1 = 0.0;
               vn2 = c.K.col1.y * xX + bY;
               if (xX >= 0.0 && vn2 >= 0.0) {
                  dX = xX - aX;
                  dY = xY - aY;
                  P1X = dX * normalX;
                  P1Y = dX * normalY;
                  P2X = dY * normalX;
                  P2Y = dY * normalY;
                  vA.x -= invMassA * (P1X + P2X);
                  vA.y -= invMassA * (P1Y + P2Y);
                  wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);
                  vB.x += invMassB * (P1X + P2X);
                  vB.y += invMassB * (P1Y + P2Y);
                  wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);
                  cp1.normalImpulse = xX;
                  cp2.normalImpulse = xY;
                  break;
               }
               xX = 0.0;
               xY = (-cp2.normalMass * bY);
               vn1 = c.K.col2.x * xY + bX;
               vn2 = 0.0;
               if (xY >= 0.0 && vn1 >= 0.0) {
                  dX = xX - aX;
                  dY = xY - aY;
                  P1X = dX * normalX;
                  P1Y = dX * normalY;
                  P2X = dY * normalX;
                  P2Y = dY * normalY;
                  vA.x -= invMassA * (P1X + P2X);
                  vA.y -= invMassA * (P1Y + P2Y);
                  wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);
                  vB.x += invMassB * (P1X + P2X);
                  vB.y += invMassB * (P1Y + P2Y);
                  wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);
                  cp1.normalImpulse = xX;
                  cp2.normalImpulse = xY;
                  break;
               }
               xX = 0.0;
               xY = 0.0;
               vn1 = bX;
               vn2 = bY;
               if (vn1 >= 0.0 && vn2 >= 0.0) {
                  dX = xX - aX;
                  dY = xY - aY;
                  P1X = dX * normalX;
                  P1Y = dX * normalY;
                  P2X = dY * normalX;
                  P2Y = dY * normalY;
                  vA.x -= invMassA * (P1X + P2X);
                  vA.y -= invMassA * (P1Y + P2Y);
                  wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);
                  vB.x += invMassB * (P1X + P2X);
                  vB.y += invMassB * (P1Y + P2Y);
                  wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);
                  cp1.normalImpulse = xX;
                  cp2.normalImpulse = xY;
                  break;
               }
               break;
            }
         }
         bodyA.m_angularVelocity = wA;
         bodyB.m_angularVelocity = wB;
      }
   }
   b2ContactSolver.prototype.FinalizeVelocityConstraints = function () {
      for (var i = 0; i < this.m_constraintCount; ++i) {
         var c = this.m_constraints[i];
         var m = c.manifold;
         for (var j = 0; j < c.pointCount; ++j) {
            var point1 = m.m_points[j];
            var point2 = c.points[j];
            point1.m_normalImpulse = point2.normalImpulse;
            point1.m_tangentImpulse = point2.tangentImpulse;
         }
      }
   }
   b2ContactSolver.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      var minSeparation = 0.0;
      for (var i = 0; i < this.m_constraintCount; i++) {
         var c = this.m_constraints[i];
         var bodyA = c.bodyA;
         var bodyB = c.bodyB;
         var invMassA = bodyA.m_mass * bodyA.m_invMass;
         var invIA = bodyA.m_mass * bodyA.m_invI;
         var invMassB = bodyB.m_mass * bodyB.m_invMass;
         var invIB = bodyB.m_mass * bodyB.m_invI;
         b2ContactSolver.s_psm.Initialize(c);
         var normal = b2ContactSolver.s_psm.m_normal;
         for (var j = 0; j < c.pointCount; j++) {
            var ccp = c.points[j];
            var point = b2ContactSolver.s_psm.m_points[j];
            var separation = b2ContactSolver.s_psm.m_separations[j];
            var rAX = point.x - bodyA.m_sweep.c.x;
            var rAY = point.y - bodyA.m_sweep.c.y;
            var rBX = point.x - bodyB.m_sweep.c.x;
            var rBY = point.y - bodyB.m_sweep.c.y;
            minSeparation = minSeparation < separation ? minSeparation : separation;
            var C = b2Math.Clamp(baumgarte * (separation + b2Settings.b2_linearSlop), (-b2Settings.b2_maxLinearCorrection), 0.0);
            var impulse = (-ccp.equalizedMass * C);
            var PX = impulse * normal.x;
            var PY = impulse * normal.y;bodyA.m_sweep.c.x -= invMassA * PX;
            bodyA.m_sweep.c.y -= invMassA * PY;
            bodyA.m_sweep.a -= invIA * (rAX * PY - rAY * PX);
            bodyA.SynchronizeTransform();
            bodyB.m_sweep.c.x += invMassB * PX;
            bodyB.m_sweep.c.y += invMassB * PY;
            bodyB.m_sweep.a += invIB * (rBX * PY - rBY * PX);
            bodyB.SynchronizeTransform();
         }
      }
      return minSeparation > (-1.5 * b2Settings.b2_linearSlop);
   }
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.Contacts.b2ContactSolver.s_worldManifold = new b2WorldManifold();
      Box2D.Dynamics.Contacts.b2ContactSolver.s_psm = new b2PositionSolverManifold();
   });
   Box2D.inherit(b2EdgeAndCircleContact, Box2D.Dynamics.Contacts.b2Contact);
   b2EdgeAndCircleContact.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
   b2EdgeAndCircleContact.b2EdgeAndCircleContact = function () {
      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);
   };
   b2EdgeAndCircleContact.Create = function (allocator) {
      return new b2EdgeAndCircleContact();
   }
   b2EdgeAndCircleContact.Destroy = function (contact, allocator) {}
   b2EdgeAndCircleContact.prototype.Reset = function (fixtureA, fixtureB) {
      this.__super.Reset.call(this, fixtureA, fixtureB);
   }
   b2EdgeAndCircleContact.prototype.Evaluate = function () {
      var bA = this.m_fixtureA.GetBody();
      var bB = this.m_fixtureB.GetBody();
      this.b2CollideEdgeAndCircle(this.m_manifold, (this.m_fixtureA.GetShape() instanceof b2EdgeShape ? this.m_fixtureA.GetShape() : null), bA.m_xf, (this.m_fixtureB.GetShape() instanceof b2CircleShape ? this.m_fixtureB.GetShape() : null), bB.m_xf);
   }
   b2EdgeAndCircleContact.prototype.b2CollideEdgeAndCircle = function (manifold, edge, xf1, circle, xf2) {}
   Box2D.inherit(b2NullContact, Box2D.Dynamics.Contacts.b2Contact);
   b2NullContact.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
   b2NullContact.b2NullContact = function () {
      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);
   };
   b2NullContact.prototype.b2NullContact = function () {
      this.__super.b2Contact.call(this);
   }
   b2NullContact.prototype.Evaluate = function () {}
   Box2D.inherit(b2PolyAndCircleContact, Box2D.Dynamics.Contacts.b2Contact);
   b2PolyAndCircleContact.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
   b2PolyAndCircleContact.b2PolyAndCircleContact = function () {
      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);
   };
   b2PolyAndCircleContact.Create = function (allocator) {
      return new b2PolyAndCircleContact();
   }
   b2PolyAndCircleContact.Destroy = function (contact, allocator) {}
   b2PolyAndCircleContact.prototype.Reset = function (fixtureA, fixtureB) {
      this.__super.Reset.call(this, fixtureA, fixtureB);
      b2Settings.b2Assert(fixtureA.GetType() == b2Shape.e_polygonShape);
      b2Settings.b2Assert(fixtureB.GetType() == b2Shape.e_circleShape);
   }
   b2PolyAndCircleContact.prototype.Evaluate = function () {
      var bA = this.m_fixtureA.m_body;
      var bB = this.m_fixtureB.m_body;
      b2Collision.CollidePolygonAndCircle(this.m_manifold, (this.m_fixtureA.GetShape() instanceof b2PolygonShape ? this.m_fixtureA.GetShape() : null), bA.m_xf, (this.m_fixtureB.GetShape() instanceof b2CircleShape ? this.m_fixtureB.GetShape() : null), bB.m_xf);
   }
   Box2D.inherit(b2PolyAndEdgeContact, Box2D.Dynamics.Contacts.b2Contact);
   b2PolyAndEdgeContact.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
   b2PolyAndEdgeContact.b2PolyAndEdgeContact = function () {
      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);
   };
   b2PolyAndEdgeContact.Create = function (allocator) {
      return new b2PolyAndEdgeContact();
   }
   b2PolyAndEdgeContact.Destroy = function (contact, allocator) {}
   b2PolyAndEdgeContact.prototype.Reset = function (fixtureA, fixtureB) {
      this.__super.Reset.call(this, fixtureA, fixtureB);
      b2Settings.b2Assert(fixtureA.GetType() == b2Shape.e_polygonShape);
      b2Settings.b2Assert(fixtureB.GetType() == b2Shape.e_edgeShape);
   }
   b2PolyAndEdgeContact.prototype.Evaluate = function () {
      var bA = this.m_fixtureA.GetBody();
      var bB = this.m_fixtureB.GetBody();
      this.b2CollidePolyAndEdge(this.m_manifold, (this.m_fixtureA.GetShape() instanceof b2PolygonShape ? this.m_fixtureA.GetShape() : null), bA.m_xf, (this.m_fixtureB.GetShape() instanceof b2EdgeShape ? this.m_fixtureB.GetShape() : null), bB.m_xf);
   }
   b2PolyAndEdgeContact.prototype.b2CollidePolyAndEdge = function (manifold, polygon, xf1, edge, xf2) {}
   Box2D.inherit(b2PolygonContact, Box2D.Dynamics.Contacts.b2Contact);
   b2PolygonContact.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
   b2PolygonContact.b2PolygonContact = function () {
      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);
   };
   b2PolygonContact.Create = function (allocator) {
      return new b2PolygonContact();
   }
   b2PolygonContact.Destroy = function (contact, allocator) {}
   b2PolygonContact.prototype.Reset = function (fixtureA, fixtureB) {
      this.__super.Reset.call(this, fixtureA, fixtureB);
   }
   b2PolygonContact.prototype.Evaluate = function () {
      var bA = this.m_fixtureA.GetBody();
      var bB = this.m_fixtureB.GetBody();
      b2Collision.CollidePolygons(this.m_manifold, (this.m_fixtureA.GetShape() instanceof b2PolygonShape ? this.m_fixtureA.GetShape() : null), bA.m_xf, (this.m_fixtureB.GetShape() instanceof b2PolygonShape ? this.m_fixtureB.GetShape() : null), bB.m_xf);
   }
   b2PositionSolverManifold.b2PositionSolverManifold = function () {};
   b2PositionSolverManifold.prototype.b2PositionSolverManifold = function () {
      this.m_normal = new b2Vec2();
      this.m_separations = new Vector_a2j_Number(b2Settings.b2_maxManifoldPoints);
      this.m_points = new Vector(b2Settings.b2_maxManifoldPoints);
      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {
         this.m_points[i] = new b2Vec2();
      }
   }
   b2PositionSolverManifold.prototype.Initialize = function (cc) {
      b2Settings.b2Assert(cc.pointCount > 0);
      var i = 0;
      var clipPointX = 0;
      var clipPointY = 0;
      var tMat;
      var tVec;
      var planePointX = 0;
      var planePointY = 0;
      switch (cc.type) {
      case b2Manifold.e_circles:
         {
            tMat = cc.bodyA.m_xf.R;
            tVec = cc.localPoint;
            var pointAX = cc.bodyA.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
            var pointAY = cc.bodyA.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
            tMat = cc.bodyB.m_xf.R;
            tVec = cc.points[0].localPoint;
            var pointBX = cc.bodyB.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
            var pointBY = cc.bodyB.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
            var dX = pointBX - pointAX;
            var dY = pointBY - pointAY;
            var d2 = dX * dX + dY * dY;
            if (d2 > Number.MIN_VALUE * Number.MIN_VALUE) {
               var d = Math.sqrt(d2);
               this.m_normal.x = dX / d;
               this.m_normal.y = dY / d;
            }
            else {
               this.m_normal.x = 1.0;
               this.m_normal.y = 0.0;
            }
            this.m_points[0].x = 0.5 * (pointAX + pointBX);
            this.m_points[0].y = 0.5 * (pointAY + pointBY);
            this.m_separations[0] = dX * this.m_normal.x + dY * this.m_normal.y - cc.radius;
         }
         break;
      case b2Manifold.e_faceA:
         {
            tMat = cc.bodyA.m_xf.R;
            tVec = cc.localPlaneNormal;
            this.m_normal.x = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            this.m_normal.y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            tMat = cc.bodyA.m_xf.R;
            tVec = cc.localPoint;
            planePointX = cc.bodyA.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
            planePointY = cc.bodyA.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
            tMat = cc.bodyB.m_xf.R;
            for (i = 0;
            i < cc.pointCount; ++i) {
               tVec = cc.points[i].localPoint;
               clipPointX = cc.bodyB.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
               clipPointY = cc.bodyB.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
               this.m_separations[i] = (clipPointX - planePointX) * this.m_normal.x + (clipPointY - planePointY) * this.m_normal.y - cc.radius;
               this.m_points[i].x = clipPointX;
               this.m_points[i].y = clipPointY;
            }
         }
         break;
      case b2Manifold.e_faceB:
         {
            tMat = cc.bodyB.m_xf.R;
            tVec = cc.localPlaneNormal;
            this.m_normal.x = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            this.m_normal.y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            tMat = cc.bodyB.m_xf.R;
            tVec = cc.localPoint;
            planePointX = cc.bodyB.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
            planePointY = cc.bodyB.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
            tMat = cc.bodyA.m_xf.R;
            for (i = 0;
            i < cc.pointCount; ++i) {
               tVec = cc.points[i].localPoint;
               clipPointX = cc.bodyA.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
               clipPointY = cc.bodyA.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
               this.m_separations[i] = (clipPointX - planePointX) * this.m_normal.x + (clipPointY - planePointY) * this.m_normal.y - cc.radius;
               this.m_points[i].Set(clipPointX, clipPointY);
            }
            this.m_normal.x *= (-1);
            this.m_normal.y *= (-1);
         }
         break;
      }
   }
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.Contacts.b2PositionSolverManifold.circlePointA = new b2Vec2();
      Box2D.Dynamics.Contacts.b2PositionSolverManifold.circlePointB = new b2Vec2();
   });
})();
(function () {
   var b2Body = Box2D.Dynamics.b2Body,
      b2BodyDef = Box2D.Dynamics.b2BodyDef,
      b2ContactFilter = Box2D.Dynamics.b2ContactFilter,
      b2ContactImpulse = Box2D.Dynamics.b2ContactImpulse,
      b2ContactListener = Box2D.Dynamics.b2ContactListener,
      b2ContactManager = Box2D.Dynamics.b2ContactManager,
      b2DebugDraw = Box2D.Dynamics.b2DebugDraw,
      b2DestructionListener = Box2D.Dynamics.b2DestructionListener,
      b2FilterData = Box2D.Dynamics.b2FilterData,
      b2Fixture = Box2D.Dynamics.b2Fixture,
      b2FixtureDef = Box2D.Dynamics.b2FixtureDef,
      b2Island = Box2D.Dynamics.b2Island,
      b2TimeStep = Box2D.Dynamics.b2TimeStep,
      b2World = Box2D.Dynamics.b2World,
      b2Mat22 = Box2D.Common.Math.b2Mat22,
      b2Mat33 = Box2D.Common.Math.b2Mat33,
      b2Math = Box2D.Common.Math.b2Math,
      b2Sweep = Box2D.Common.Math.b2Sweep,
      b2Transform = Box2D.Common.Math.b2Transform,
      b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2Vec3 = Box2D.Common.Math.b2Vec3,
      b2Color = Box2D.Common.b2Color,
      b2internal = Box2D.Common.b2internal,
      b2Settings = Box2D.Common.b2Settings,
      b2CircleShape = Box2D.Collision.Shapes.b2CircleShape,
      b2EdgeChainDef = Box2D.Collision.Shapes.b2EdgeChainDef,
      b2EdgeShape = Box2D.Collision.Shapes.b2EdgeShape,
      b2MassData = Box2D.Collision.Shapes.b2MassData,
      b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape,
      b2Shape = Box2D.Collision.Shapes.b2Shape,
      b2BuoyancyController = Box2D.Dynamics.Controllers.b2BuoyancyController,
      b2ConstantAccelController = Box2D.Dynamics.Controllers.b2ConstantAccelController,
      b2ConstantForceController = Box2D.Dynamics.Controllers.b2ConstantForceController,
      b2Controller = Box2D.Dynamics.Controllers.b2Controller,
      b2ControllerEdge = Box2D.Dynamics.Controllers.b2ControllerEdge,
      b2GravityController = Box2D.Dynamics.Controllers.b2GravityController,
      b2TensorDampingController = Box2D.Dynamics.Controllers.b2TensorDampingController;

   Box2D.inherit(b2BuoyancyController, Box2D.Dynamics.Controllers.b2Controller);
   b2BuoyancyController.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
   b2BuoyancyController.b2BuoyancyController = function () {
      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
      this.normal = new b2Vec2(0, (-1));
      this.offset = 0;
      this.density = 0;
      this.velocity = new b2Vec2(0, 0);
      this.linearDrag = 2;
      this.angularDrag = 1;
      this.useDensity = false;
      this.useWorldGravity = true;
      this.gravity = null;
   };
   b2BuoyancyController.prototype.Step = function (step) {
      if (!this.m_bodyList) return;
      if (this.useWorldGravity) {
         this.gravity = this.GetWorld().GetGravity().Copy();
      }
      for (var i = this.m_bodyList; i; i = i.nextBody) {
         var body = i.body;
         if (body.IsAwake() == false) {
            continue;
         }
         var areac = new b2Vec2();
         var massc = new b2Vec2();
         var area = 0.0;
         var mass = 0.0;
         for (var fixture = body.GetFixtureList(); fixture; fixture = fixture.GetNext()) {
            var sc = new b2Vec2();
            var sarea = fixture.GetShape().ComputeSubmergedArea(this.normal, this.offset, body.GetTransform(), sc);
            area += sarea;
            areac.x += sarea * sc.x;
            areac.y += sarea * sc.y;
            var shapeDensity = 0;
            if (this.useDensity) {
               shapeDensity = 1;
            }
            else {
               shapeDensity = 1;
            }
            mass += sarea * shapeDensity;
            massc.x += sarea * sc.x * shapeDensity;
            massc.y += sarea * sc.y * shapeDensity;
         }
         areac.x /= area;
         areac.y /= area;
         massc.x /= mass;
         massc.y /= mass;
         if (area < Number.MIN_VALUE) continue;
         var buoyancyForce = this.gravity.GetNegative();
         buoyancyForce.Multiply(this.density * area);
         body.ApplyForce(buoyancyForce, massc);
         var dragForce = body.GetLinearVelocityFromWorldPoint(areac);
         dragForce.Subtract(this.velocity);
         dragForce.Multiply((-this.linearDrag * area));
         body.ApplyForce(dragForce, areac);
         body.ApplyTorque((-body.GetInertia() / body.GetMass() * area * body.GetAngularVelocity() * this.angularDrag));
      }
   }
   b2BuoyancyController.prototype.Draw = function (debugDraw) {
      var r = 1000;
      var p1 = new b2Vec2();
      var p2 = new b2Vec2();
      p1.x = this.normal.x * this.offset + this.normal.y * r;
      p1.y = this.normal.y * this.offset - this.normal.x * r;
      p2.x = this.normal.x * this.offset - this.normal.y * r;
      p2.y = this.normal.y * this.offset + this.normal.x * r;
      var color = new b2Color(0, 0, 1);
      debugDraw.DrawSegment(p1, p2, color);
   }
   Box2D.inherit(b2ConstantAccelController, Box2D.Dynamics.Controllers.b2Controller);
   b2ConstantAccelController.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
   b2ConstantAccelController.b2ConstantAccelController = function () {
      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
      this.A = new b2Vec2(0, 0);
   };
   b2ConstantAccelController.prototype.Step = function (step) {
      var smallA = new b2Vec2(this.A.x * step.dt, this.A.y * step.dt);
      for (var i = this.m_bodyList; i; i = i.nextBody) {
         var body = i.body;
         if (!body.IsAwake()) continue;
         body.SetLinearVelocity(new b2Vec2(body.GetLinearVelocity().x + smallA.x, body.GetLinearVelocity().y + smallA.y));
      }
   }
   Box2D.inherit(b2ConstantForceController, Box2D.Dynamics.Controllers.b2Controller);
   b2ConstantForceController.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
   b2ConstantForceController.b2ConstantForceController = function () {
      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
      this.F = new b2Vec2(0, 0);
   };
   b2ConstantForceController.prototype.Step = function (step) {
      for (var i = this.m_bodyList; i; i = i.nextBody) {
         var body = i.body;
         if (!body.IsAwake()) continue;
         body.ApplyForce(this.F, body.GetWorldCenter());
      }
   }
   b2Controller.b2Controller = function () {};
   b2Controller.prototype.Step = function (step) {}
   b2Controller.prototype.Draw = function (debugDraw) {}
   b2Controller.prototype.AddBody = function (body) {
      var edge = new b2ControllerEdge();
      edge.controller = this;
      edge.body = body;
      edge.nextBody = this.m_bodyList;
      edge.prevBody = null;
      this.m_bodyList = edge;
      if (edge.nextBody) edge.nextBody.prevBody = edge;
      this.m_bodyCount++;
      edge.nextController = body.m_controllerList;
      edge.prevController = null;
      body.m_controllerList = edge;
      if (edge.nextController) edge.nextController.prevController = edge;
      body.m_controllerCount++;
   }
   b2Controller.prototype.RemoveBody = function (body) {
      var edge = body.m_controllerList;
      while (edge && edge.controller != this)
      edge = edge.nextController;
      if (edge.prevBody) edge.prevBody.nextBody = edge.nextBody;
      if (edge.nextBody) edge.nextBody.prevBody = edge.prevBody;
      if (edge.nextController) edge.nextController.prevController = edge.prevController;
      if (edge.prevController) edge.prevController.nextController = edge.nextController;
      if (this.m_bodyList == edge) this.m_bodyList = edge.nextBody;
      if (body.m_controllerList == edge) body.m_controllerList = edge.nextController;
      body.m_controllerCount--;
      this.m_bodyCount--;
   }
   b2Controller.prototype.Clear = function () {
      while (this.m_bodyList)
      this.RemoveBody(this.m_bodyList.body);
   }
   b2Controller.prototype.GetNext = function () {
      return this.m_next;
   }
   b2Controller.prototype.GetWorld = function () {
      return this.m_world;
   }
   b2Controller.prototype.GetBodyList = function () {
      return this.m_bodyList;
   }
   b2ControllerEdge.b2ControllerEdge = function () {};
   Box2D.inherit(b2GravityController, Box2D.Dynamics.Controllers.b2Controller);
   b2GravityController.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
   b2GravityController.b2GravityController = function () {
      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
      this.G = 1;
      this.invSqr = true;
   };
   b2GravityController.prototype.Step = function (step) {
      var i = null;
      var body1 = null;
      var p1 = null;
      var mass1 = 0;
      var j = null;
      var body2 = null;
      var p2 = null;
      var dx = 0;
      var dy = 0;
      var r2 = 0;
      var f = null;
      if (this.invSqr) {
         for (i = this.m_bodyList;
         i; i = i.nextBody) {
            body1 = i.body;
            p1 = body1.GetWorldCenter();
            mass1 = body1.GetMass();
            for (j = this.m_bodyList;
            j != i; j = j.nextBody) {
               body2 = j.body;
               p2 = body2.GetWorldCenter();
               dx = p2.x - p1.x;
               dy = p2.y - p1.y;
               r2 = dx * dx + dy * dy;
               if (r2 < Number.MIN_VALUE) continue;
               f = new b2Vec2(dx, dy);
               f.Multiply(this.G / r2 / Math.sqrt(r2) * mass1 * body2.GetMass());
               if (body1.IsAwake()) body1.ApplyForce(f, p1);
               f.Multiply((-1));
               if (body2.IsAwake()) body2.ApplyForce(f, p2);
            }
         }
      }
      else {
         for (i = this.m_bodyList;
         i; i = i.nextBody) {
            body1 = i.body;
            p1 = body1.GetWorldCenter();
            mass1 = body1.GetMass();
            for (j = this.m_bodyList;
            j != i; j = j.nextBody) {
               body2 = j.body;
               p2 = body2.GetWorldCenter();
               dx = p2.x - p1.x;
               dy = p2.y - p1.y;
               r2 = dx * dx + dy * dy;
               if (r2 < Number.MIN_VALUE) continue;
               f = new b2Vec2(dx, dy);
               f.Multiply(this.G / r2 * mass1 * body2.GetMass());
               if (body1.IsAwake()) body1.ApplyForce(f, p1);
               f.Multiply((-1));
               if (body2.IsAwake()) body2.ApplyForce(f, p2);
            }
         }
      }
   }
   Box2D.inherit(b2TensorDampingController, Box2D.Dynamics.Controllers.b2Controller);
   b2TensorDampingController.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
   b2TensorDampingController.b2TensorDampingController = function () {
      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
      this.T = new b2Mat22();
      this.maxTimestep = 0;
   };
   b2TensorDampingController.prototype.SetAxisAligned = function (xDamping, yDamping) {
      if (xDamping === undefined) xDamping = 0;
      if (yDamping === undefined) yDamping = 0;
      this.T.col1.x = (-xDamping);
      this.T.col1.y = 0;
      this.T.col2.x = 0;
      this.T.col2.y = (-yDamping);
      if (xDamping > 0 || yDamping > 0) {
         this.maxTimestep = 1 / Math.max(xDamping, yDamping);
      }
      else {
         this.maxTimestep = 0;
      }
   }
   b2TensorDampingController.prototype.Step = function (step) {
      var timestep = step.dt;
      if (timestep <= Number.MIN_VALUE) return;
      if (timestep > this.maxTimestep && this.maxTimestep > 0) timestep = this.maxTimestep;
      for (var i = this.m_bodyList; i; i = i.nextBody) {
         var body = i.body;
         if (!body.IsAwake()) {
            continue;
         }
         var damping = body.GetWorldVector(b2Math.MulMV(this.T, body.GetLocalVector(body.GetLinearVelocity())));
         body.SetLinearVelocity(new b2Vec2(body.GetLinearVelocity().x + damping.x * timestep, body.GetLinearVelocity().y + damping.y * timestep));
      }
   }
})();
(function () {
   var b2Color = Box2D.Common.b2Color,
      b2internal = Box2D.Common.b2internal,
      b2Settings = Box2D.Common.b2Settings,
      b2Mat22 = Box2D.Common.Math.b2Mat22,
      b2Mat33 = Box2D.Common.Math.b2Mat33,
      b2Math = Box2D.Common.Math.b2Math,
      b2Sweep = Box2D.Common.Math.b2Sweep,
      b2Transform = Box2D.Common.Math.b2Transform,
      b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2Vec3 = Box2D.Common.Math.b2Vec3,
      b2DistanceJoint = Box2D.Dynamics.Joints.b2DistanceJoint,
      b2DistanceJointDef = Box2D.Dynamics.Joints.b2DistanceJointDef,
      b2FrictionJoint = Box2D.Dynamics.Joints.b2FrictionJoint,
      b2FrictionJointDef = Box2D.Dynamics.Joints.b2FrictionJointDef,
      b2GearJoint = Box2D.Dynamics.Joints.b2GearJoint,
      b2GearJointDef = Box2D.Dynamics.Joints.b2GearJointDef,
      b2Jacobian = Box2D.Dynamics.Joints.b2Jacobian,
      b2Joint = Box2D.Dynamics.Joints.b2Joint,
      b2JointDef = Box2D.Dynamics.Joints.b2JointDef,
      b2JointEdge = Box2D.Dynamics.Joints.b2JointEdge,
      b2LineJoint = Box2D.Dynamics.Joints.b2LineJoint,
      b2LineJointDef = Box2D.Dynamics.Joints.b2LineJointDef,
      b2MouseJoint = Box2D.Dynamics.Joints.b2MouseJoint,
      b2MouseJointDef = Box2D.Dynamics.Joints.b2MouseJointDef,
      b2PrismaticJoint = Box2D.Dynamics.Joints.b2PrismaticJoint,
      b2PrismaticJointDef = Box2D.Dynamics.Joints.b2PrismaticJointDef,
      b2PulleyJoint = Box2D.Dynamics.Joints.b2PulleyJoint,
      b2PulleyJointDef = Box2D.Dynamics.Joints.b2PulleyJointDef,
      b2RevoluteJoint = Box2D.Dynamics.Joints.b2RevoluteJoint,
      b2RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef,
      b2WeldJoint = Box2D.Dynamics.Joints.b2WeldJoint,
      b2WeldJointDef = Box2D.Dynamics.Joints.b2WeldJointDef,
      b2Body = Box2D.Dynamics.b2Body,
      b2BodyDef = Box2D.Dynamics.b2BodyDef,
      b2ContactFilter = Box2D.Dynamics.b2ContactFilter,
      b2ContactImpulse = Box2D.Dynamics.b2ContactImpulse,
      b2ContactListener = Box2D.Dynamics.b2ContactListener,
      b2ContactManager = Box2D.Dynamics.b2ContactManager,
      b2DebugDraw = Box2D.Dynamics.b2DebugDraw,
      b2DestructionListener = Box2D.Dynamics.b2DestructionListener,
      b2FilterData = Box2D.Dynamics.b2FilterData,
      b2Fixture = Box2D.Dynamics.b2Fixture,
      b2FixtureDef = Box2D.Dynamics.b2FixtureDef,
      b2Island = Box2D.Dynamics.b2Island,
      b2TimeStep = Box2D.Dynamics.b2TimeStep,
      b2World = Box2D.Dynamics.b2World;

   Box2D.inherit(b2DistanceJoint, Box2D.Dynamics.Joints.b2Joint);
   b2DistanceJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2DistanceJoint.b2DistanceJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_localAnchor1 = new b2Vec2();
      this.m_localAnchor2 = new b2Vec2();
      this.m_u = new b2Vec2();
   };
   b2DistanceJoint.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
   }
   b2DistanceJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
   }
   b2DistanceJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * this.m_impulse * this.m_u.x, inv_dt * this.m_impulse * this.m_u.y);
   }
   b2DistanceJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return 0.0;
   }
   b2DistanceJoint.prototype.GetLength = function () {
      return this.m_length;
   }
   b2DistanceJoint.prototype.SetLength = function (length) {
      if (length === undefined) length = 0;
      this.m_length = length;
   }
   b2DistanceJoint.prototype.GetFrequency = function () {
      return this.m_frequencyHz;
   }
   b2DistanceJoint.prototype.SetFrequency = function (hz) {
      if (hz === undefined) hz = 0;
      this.m_frequencyHz = hz;
   }
   b2DistanceJoint.prototype.GetDampingRatio = function () {
      return this.m_dampingRatio;
   }
   b2DistanceJoint.prototype.SetDampingRatio = function (ratio) {
      if (ratio === undefined) ratio = 0;
      this.m_dampingRatio = ratio;
   }
   b2DistanceJoint.prototype.b2DistanceJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      var tMat;
      var tX = 0;
      var tY = 0;
      this.m_localAnchor1.SetV(def.localAnchorA);
      this.m_localAnchor2.SetV(def.localAnchorB);
      this.m_length = def.length;
      this.m_frequencyHz = def.frequencyHz;
      this.m_dampingRatio = def.dampingRatio;
      this.m_impulse = 0.0;
      this.m_gamma = 0.0;
      this.m_bias = 0.0;
   }
   b2DistanceJoint.prototype.InitVelocityConstraints = function (step) {
      var tMat;
      var tX = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      this.m_u.x = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
      this.m_u.y = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
      var length = Math.sqrt(this.m_u.x * this.m_u.x + this.m_u.y * this.m_u.y);
      if (length > b2Settings.b2_linearSlop) {
         this.m_u.Multiply(1.0 / length);
      }
      else {
         this.m_u.SetZero();
      }
      var cr1u = (r1X * this.m_u.y - r1Y * this.m_u.x);
      var cr2u = (r2X * this.m_u.y - r2Y * this.m_u.x);
      var invMass = bA.m_invMass + bA.m_invI * cr1u * cr1u + bB.m_invMass + bB.m_invI * cr2u * cr2u;
      this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;
      if (this.m_frequencyHz > 0.0) {
         var C = length - this.m_length;
         var omega = 2.0 * Math.PI * this.m_frequencyHz;
         var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;
         var k = this.m_mass * omega * omega;
         this.m_gamma = step.dt * (d + step.dt * k);
         this.m_gamma = this.m_gamma != 0.0 ? 1 / this.m_gamma : 0.0;
         this.m_bias = C * step.dt * k * this.m_gamma;
         this.m_mass = invMass + this.m_gamma;
         this.m_mass = this.m_mass != 0.0 ? 1.0 / this.m_mass : 0.0;
      }
      if (step.warmStarting) {
         this.m_impulse *= step.dtRatio;
         var PX = this.m_impulse * this.m_u.x;
         var PY = this.m_impulse * this.m_u.y;
         bA.m_linearVelocity.x -= bA.m_invMass * PX;
         bA.m_linearVelocity.y -= bA.m_invMass * PY;
         bA.m_angularVelocity -= bA.m_invI * (r1X * PY - r1Y * PX);
         bB.m_linearVelocity.x += bB.m_invMass * PX;
         bB.m_linearVelocity.y += bB.m_invMass * PY;
         bB.m_angularVelocity += bB.m_invI * (r2X * PY - r2Y * PX);
      }
      else {
         this.m_impulse = 0.0;
      }
   }
   b2DistanceJoint.prototype.SolveVelocityConstraints = function (step) {
      var tMat;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
      var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var v1X = bA.m_linearVelocity.x + ((-bA.m_angularVelocity * r1Y));
      var v1Y = bA.m_linearVelocity.y + (bA.m_angularVelocity * r1X);
      var v2X = bB.m_linearVelocity.x + ((-bB.m_angularVelocity * r2Y));
      var v2Y = bB.m_linearVelocity.y + (bB.m_angularVelocity * r2X);
      var Cdot = (this.m_u.x * (v2X - v1X) + this.m_u.y * (v2Y - v1Y));
      var impulse = (-this.m_mass * (Cdot + this.m_bias + this.m_gamma * this.m_impulse));
      this.m_impulse += impulse;
      var PX = impulse * this.m_u.x;
      var PY = impulse * this.m_u.y;
      bA.m_linearVelocity.x -= bA.m_invMass * PX;
      bA.m_linearVelocity.y -= bA.m_invMass * PY;
      bA.m_angularVelocity -= bA.m_invI * (r1X * PY - r1Y * PX);
      bB.m_linearVelocity.x += bB.m_invMass * PX;
      bB.m_linearVelocity.y += bB.m_invMass * PY;
      bB.m_angularVelocity += bB.m_invI * (r2X * PY - r2Y * PX);
   }
   b2DistanceJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      var tMat;
      if (this.m_frequencyHz > 0.0) {
         return true;
      }
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
      var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
      var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
      var length = Math.sqrt(dX * dX + dY * dY);
      dX /= length;
      dY /= length;
      var C = length - this.m_length;
      C = b2Math.Clamp(C, (-b2Settings.b2_maxLinearCorrection), b2Settings.b2_maxLinearCorrection);
      var impulse = (-this.m_mass * C);
      this.m_u.Set(dX, dY);
      var PX = impulse * this.m_u.x;
      var PY = impulse * this.m_u.y;
      bA.m_sweep.c.x -= bA.m_invMass * PX;
      bA.m_sweep.c.y -= bA.m_invMass * PY;
      bA.m_sweep.a -= bA.m_invI * (r1X * PY - r1Y * PX);
      bB.m_sweep.c.x += bB.m_invMass * PX;
      bB.m_sweep.c.y += bB.m_invMass * PY;
      bB.m_sweep.a += bB.m_invI * (r2X * PY - r2Y * PX);
      bA.SynchronizeTransform();
      bB.SynchronizeTransform();
      return b2Math.Abs(C) < b2Settings.b2_linearSlop;
   }
   Box2D.inherit(b2DistanceJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2DistanceJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2DistanceJointDef.b2DistanceJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.localAnchorA = new b2Vec2();
      this.localAnchorB = new b2Vec2();
   };
   b2DistanceJointDef.prototype.b2DistanceJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_distanceJoint;
      this.length = 1.0;
      this.frequencyHz = 0.0;
      this.dampingRatio = 0.0;
   }
   b2DistanceJointDef.prototype.Initialize = function (bA, bB, anchorA, anchorB) {
      this.bodyA = bA;
      this.bodyB = bB;
      this.localAnchorA.SetV(this.bodyA.GetLocalPoint(anchorA));
      this.localAnchorB.SetV(this.bodyB.GetLocalPoint(anchorB));
      var dX = anchorB.x - anchorA.x;
      var dY = anchorB.y - anchorA.y;
      this.length = Math.sqrt(dX * dX + dY * dY);
      this.frequencyHz = 0.0;
      this.dampingRatio = 0.0;
   }
   Box2D.inherit(b2FrictionJoint, Box2D.Dynamics.Joints.b2Joint);
   b2FrictionJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2FrictionJoint.b2FrictionJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_localAnchorA = new b2Vec2();
      this.m_localAnchorB = new b2Vec2();
      this.m_linearMass = new b2Mat22();
      this.m_linearImpulse = new b2Vec2();
   };
   b2FrictionJoint.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);
   }
   b2FrictionJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);
   }
   b2FrictionJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * this.m_linearImpulse.x, inv_dt * this.m_linearImpulse.y);
   }
   b2FrictionJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return inv_dt * this.m_angularImpulse;
   }
   b2FrictionJoint.prototype.SetMaxForce = function (force) {
      if (force === undefined) force = 0;
      this.m_maxForce = force;
   }
   b2FrictionJoint.prototype.GetMaxForce = function () {
      return this.m_maxForce;
   }
   b2FrictionJoint.prototype.SetMaxTorque = function (torque) {
      if (torque === undefined) torque = 0;
      this.m_maxTorque = torque;
   }
   b2FrictionJoint.prototype.GetMaxTorque = function () {
      return this.m_maxTorque;
   }
   b2FrictionJoint.prototype.b2FrictionJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      this.m_localAnchorA.SetV(def.localAnchorA);
      this.m_localAnchorB.SetV(def.localAnchorB);
      this.m_linearMass.SetZero();
      this.m_angularMass = 0.0;
      this.m_linearImpulse.SetZero();
      this.m_angularImpulse = 0.0;
      this.m_maxForce = def.maxForce;
      this.m_maxTorque = def.maxTorque;
   }
   b2FrictionJoint.prototype.InitVelocityConstraints = function (step) {
      var tMat;
      var tX = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      tMat = bA.m_xf.R;
      var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
      var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
      rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
      rAX = tX;
      tMat = bB.m_xf.R;
      var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
      var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
      rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
      rBX = tX;
      var mA = bA.m_invMass;
      var mB = bB.m_invMass;
      var iA = bA.m_invI;
      var iB = bB.m_invI;
      var K = new b2Mat22();
      K.col1.x = mA + mB;
      K.col2.x = 0.0;
      K.col1.y = 0.0;
      K.col2.y = mA + mB;
      K.col1.x += iA * rAY * rAY;
      K.col2.x += (-iA * rAX * rAY);
      K.col1.y += (-iA * rAX * rAY);
      K.col2.y += iA * rAX * rAX;
      K.col1.x += iB * rBY * rBY;
      K.col2.x += (-iB * rBX * rBY);
      K.col1.y += (-iB * rBX * rBY);
      K.col2.y += iB * rBX * rBX;
      K.GetInverse(this.m_linearMass);
      this.m_angularMass = iA + iB;
      if (this.m_angularMass > 0.0) {
         this.m_angularMass = 1.0 / this.m_angularMass;
      }
      if (step.warmStarting) {
         this.m_linearImpulse.x *= step.dtRatio;
         this.m_linearImpulse.y *= step.dtRatio;
         this.m_angularImpulse *= step.dtRatio;
         var P = this.m_linearImpulse;
         bA.m_linearVelocity.x -= mA * P.x;
         bA.m_linearVelocity.y -= mA * P.y;
         bA.m_angularVelocity -= iA * (rAX * P.y - rAY * P.x + this.m_angularImpulse);
         bB.m_linearVelocity.x += mB * P.x;
         bB.m_linearVelocity.y += mB * P.y;
         bB.m_angularVelocity += iB * (rBX * P.y - rBY * P.x + this.m_angularImpulse);
      }
      else {
         this.m_linearImpulse.SetZero();
         this.m_angularImpulse = 0.0;
      }
   }
   b2FrictionJoint.prototype.SolveVelocityConstraints = function (step) {
      var tMat;
      var tX = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var vA = bA.m_linearVelocity;
      var wA = bA.m_angularVelocity;
      var vB = bB.m_linearVelocity;
      var wB = bB.m_angularVelocity;
      var mA = bA.m_invMass;
      var mB = bB.m_invMass;
      var iA = bA.m_invI;
      var iB = bB.m_invI;
      tMat = bA.m_xf.R;
      var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
      var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
      rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
      rAX = tX;
      tMat = bB.m_xf.R;
      var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
      var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
      rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
      rBX = tX;
      var maxImpulse = 0; {
         var Cdot = wB - wA;
         var impulse = (-this.m_angularMass * Cdot);
         var oldImpulse = this.m_angularImpulse;
         maxImpulse = step.dt * this.m_maxTorque;
         this.m_angularImpulse = b2Math.Clamp(this.m_angularImpulse + impulse, (-maxImpulse), maxImpulse);
         impulse = this.m_angularImpulse - oldImpulse;
         wA -= iA * impulse;
         wB += iB * impulse;
      } {
         var CdotX = vB.x - wB * rBY - vA.x + wA * rAY;
         var CdotY = vB.y + wB * rBX - vA.y - wA * rAX;
         var impulseV = b2Math.MulMV(this.m_linearMass, new b2Vec2((-CdotX), (-CdotY)));
         var oldImpulseV = this.m_linearImpulse.Copy();
         this.m_linearImpulse.Add(impulseV);
         maxImpulse = step.dt * this.m_maxForce;
         if (this.m_linearImpulse.LengthSquared() > maxImpulse * maxImpulse) {
            this.m_linearImpulse.Normalize();
            this.m_linearImpulse.Multiply(maxImpulse);
         }
         impulseV = b2Math.SubtractVV(this.m_linearImpulse, oldImpulseV);
         vA.x -= mA * impulseV.x;
         vA.y -= mA * impulseV.y;
         wA -= iA * (rAX * impulseV.y - rAY * impulseV.x);
         vB.x += mB * impulseV.x;
         vB.y += mB * impulseV.y;
         wB += iB * (rBX * impulseV.y - rBY * impulseV.x);
      }
      bA.m_angularVelocity = wA;
      bB.m_angularVelocity = wB;
   }
   b2FrictionJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      return true;
   }
   Box2D.inherit(b2FrictionJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2FrictionJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2FrictionJointDef.b2FrictionJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.localAnchorA = new b2Vec2();
      this.localAnchorB = new b2Vec2();
   };
   b2FrictionJointDef.prototype.b2FrictionJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_frictionJoint;
      this.maxForce = 0.0;
      this.maxTorque = 0.0;
   }
   b2FrictionJointDef.prototype.Initialize = function (bA, bB, anchor) {
      this.bodyA = bA;
      this.bodyB = bB;
      this.localAnchorA.SetV(this.bodyA.GetLocalPoint(anchor));
      this.localAnchorB.SetV(this.bodyB.GetLocalPoint(anchor));
   }
   Box2D.inherit(b2GearJoint, Box2D.Dynamics.Joints.b2Joint);
   b2GearJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2GearJoint.b2GearJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_groundAnchor1 = new b2Vec2();
      this.m_groundAnchor2 = new b2Vec2();
      this.m_localAnchor1 = new b2Vec2();
      this.m_localAnchor2 = new b2Vec2();
      this.m_J = new b2Jacobian();
   };
   b2GearJoint.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
   }
   b2GearJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
   }
   b2GearJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * this.m_impulse * this.m_J.linearB.x, inv_dt * this.m_impulse * this.m_J.linearB.y);
   }
   b2GearJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      var tMat = this.m_bodyB.m_xf.R;
      var rX = this.m_localAnchor1.x - this.m_bodyB.m_sweep.localCenter.x;
      var rY = this.m_localAnchor1.y - this.m_bodyB.m_sweep.localCenter.y;
      var tX = tMat.col1.x * rX + tMat.col2.x * rY;
      rY = tMat.col1.y * rX + tMat.col2.y * rY;
      rX = tX;
      var PX = this.m_impulse * this.m_J.linearB.x;
      var PY = this.m_impulse * this.m_J.linearB.y;
      return inv_dt * (this.m_impulse * this.m_J.angularB - rX * PY + rY * PX);
   }
   b2GearJoint.prototype.GetRatio = function () {
      return this.m_ratio;
   }
   b2GearJoint.prototype.SetRatio = function (ratio) {
      if (ratio === undefined) ratio = 0;
      this.m_ratio = ratio;
   }
   b2GearJoint.prototype.b2GearJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      var type1 = parseInt(def.joint1.m_type);
      var type2 = parseInt(def.joint2.m_type);
      this.m_revolute1 = null;
      this.m_prismatic1 = null;
      this.m_revolute2 = null;
      this.m_prismatic2 = null;
      var coordinate1 = 0;
      var coordinate2 = 0;
      this.m_ground1 = def.joint1.GetBodyA();
      this.m_bodyA = def.joint1.GetBodyB();
      if (type1 == b2Joint.e_revoluteJoint) {
         this.m_revolute1 = (def.joint1 instanceof b2RevoluteJoint ? def.joint1 : null);
         this.m_groundAnchor1.SetV(this.m_revolute1.m_localAnchor1);
         this.m_localAnchor1.SetV(this.m_revolute1.m_localAnchor2);
         coordinate1 = this.m_revolute1.GetJointAngle();
      }
      else {
         this.m_prismatic1 = (def.joint1 instanceof b2PrismaticJoint ? def.joint1 : null);
         this.m_groundAnchor1.SetV(this.m_prismatic1.m_localAnchor1);
         this.m_localAnchor1.SetV(this.m_prismatic1.m_localAnchor2);
         coordinate1 = this.m_prismatic1.GetJointTranslation();
      }
      this.m_ground2 = def.joint2.GetBodyA();
      this.m_bodyB = def.joint2.GetBodyB();
      if (type2 == b2Joint.e_revoluteJoint) {
         this.m_revolute2 = (def.joint2 instanceof b2RevoluteJoint ? def.joint2 : null);
         this.m_groundAnchor2.SetV(this.m_revolute2.m_localAnchor1);
         this.m_localAnchor2.SetV(this.m_revolute2.m_localAnchor2);
         coordinate2 = this.m_revolute2.GetJointAngle();
      }
      else {
         this.m_prismatic2 = (def.joint2 instanceof b2PrismaticJoint ? def.joint2 : null);
         this.m_groundAnchor2.SetV(this.m_prismatic2.m_localAnchor1);
         this.m_localAnchor2.SetV(this.m_prismatic2.m_localAnchor2);
         coordinate2 = this.m_prismatic2.GetJointTranslation();
      }
      this.m_ratio = def.ratio;
      this.m_constant = coordinate1 + this.m_ratio * coordinate2;
      this.m_impulse = 0.0;
   }
   b2GearJoint.prototype.InitVelocityConstraints = function (step) {
      var g1 = this.m_ground1;
      var g2 = this.m_ground2;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var ugX = 0;
      var ugY = 0;
      var rX = 0;
      var rY = 0;
      var tMat;
      var tVec;
      var crug = 0;
      var tX = 0;
      var K = 0.0;
      this.m_J.SetZero();
      if (this.m_revolute1) {
         this.m_J.angularA = (-1.0);
         K += bA.m_invI;
      }
      else {
         tMat = g1.m_xf.R;
         tVec = this.m_prismatic1.m_localXAxis1;
         ugX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
         ugY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
         tMat = bA.m_xf.R;
         rX = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
         rY = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
         tX = tMat.col1.x * rX + tMat.col2.x * rY;
         rY = tMat.col1.y * rX + tMat.col2.y * rY;
         rX = tX;
         crug = rX * ugY - rY * ugX;
         this.m_J.linearA.Set((-ugX), (-ugY));
         this.m_J.angularA = (-crug);
         K += bA.m_invMass + bA.m_invI * crug * crug;
      }
      if (this.m_revolute2) {
         this.m_J.angularB = (-this.m_ratio);
         K += this.m_ratio * this.m_ratio * bB.m_invI;
      }
      else {
         tMat = g2.m_xf.R;
         tVec = this.m_prismatic2.m_localXAxis1;
         ugX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
         ugY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
         tMat = bB.m_xf.R;
         rX = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
         rY = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
         tX = tMat.col1.x * rX + tMat.col2.x * rY;
         rY = tMat.col1.y * rX + tMat.col2.y * rY;
         rX = tX;
         crug = rX * ugY - rY * ugX;
         this.m_J.linearB.Set((-this.m_ratio * ugX), (-this.m_ratio * ugY));
         this.m_J.angularB = (-this.m_ratio * crug);
         K += this.m_ratio * this.m_ratio * (bB.m_invMass + bB.m_invI * crug * crug);
      }
      this.m_mass = K > 0.0 ? 1.0 / K : 0.0;
      if (step.warmStarting) {
         bA.m_linearVelocity.x += bA.m_invMass * this.m_impulse * this.m_J.linearA.x;
         bA.m_linearVelocity.y += bA.m_invMass * this.m_impulse * this.m_J.linearA.y;
         bA.m_angularVelocity += bA.m_invI * this.m_impulse * this.m_J.angularA;
         bB.m_linearVelocity.x += bB.m_invMass * this.m_impulse * this.m_J.linearB.x;
         bB.m_linearVelocity.y += bB.m_invMass * this.m_impulse * this.m_J.linearB.y;
         bB.m_angularVelocity += bB.m_invI * this.m_impulse * this.m_J.angularB;
      }
      else {
         this.m_impulse = 0.0;
      }
   }
   b2GearJoint.prototype.SolveVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var Cdot = this.m_J.Compute(bA.m_linearVelocity, bA.m_angularVelocity, bB.m_linearVelocity, bB.m_angularVelocity);
      var impulse = (-this.m_mass * Cdot);
      this.m_impulse += impulse;
      bA.m_linearVelocity.x += bA.m_invMass * impulse * this.m_J.linearA.x;
      bA.m_linearVelocity.y += bA.m_invMass * impulse * this.m_J.linearA.y;
      bA.m_angularVelocity += bA.m_invI * impulse * this.m_J.angularA;
      bB.m_linearVelocity.x += bB.m_invMass * impulse * this.m_J.linearB.x;
      bB.m_linearVelocity.y += bB.m_invMass * impulse * this.m_J.linearB.y;
      bB.m_angularVelocity += bB.m_invI * impulse * this.m_J.angularB;
   }
   b2GearJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      var linearError = 0.0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var coordinate1 = 0;
      var coordinate2 = 0;
      if (this.m_revolute1) {
         coordinate1 = this.m_revolute1.GetJointAngle();
      }
      else {
         coordinate1 = this.m_prismatic1.GetJointTranslation();
      }
      if (this.m_revolute2) {
         coordinate2 = this.m_revolute2.GetJointAngle();
      }
      else {
         coordinate2 = this.m_prismatic2.GetJointTranslation();
      }
      var C = this.m_constant - (coordinate1 + this.m_ratio * coordinate2);
      var impulse = (-this.m_mass * C);
      bA.m_sweep.c.x += bA.m_invMass * impulse * this.m_J.linearA.x;
      bA.m_sweep.c.y += bA.m_invMass * impulse * this.m_J.linearA.y;
      bA.m_sweep.a += bA.m_invI * impulse * this.m_J.angularA;
      bB.m_sweep.c.x += bB.m_invMass * impulse * this.m_J.linearB.x;
      bB.m_sweep.c.y += bB.m_invMass * impulse * this.m_J.linearB.y;
      bB.m_sweep.a += bB.m_invI * impulse * this.m_J.angularB;
      bA.SynchronizeTransform();
      bB.SynchronizeTransform();
      return linearError < b2Settings.b2_linearSlop;
   }
   Box2D.inherit(b2GearJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2GearJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2GearJointDef.b2GearJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
   };
   b2GearJointDef.prototype.b2GearJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_gearJoint;
      this.joint1 = null;
      this.joint2 = null;
      this.ratio = 1.0;
   }
   b2Jacobian.b2Jacobian = function () {
      this.linearA = new b2Vec2();
      this.linearB = new b2Vec2();
   };
   b2Jacobian.prototype.SetZero = function () {
      this.linearA.SetZero();
      this.angularA = 0.0;
      this.linearB.SetZero();
      this.angularB = 0.0;
   }
   b2Jacobian.prototype.Set = function (x1, a1, x2, a2) {
      if (a1 === undefined) a1 = 0;
      if (a2 === undefined) a2 = 0;
      this.linearA.SetV(x1);
      this.angularA = a1;
      this.linearB.SetV(x2);
      this.angularB = a2;
   }
   b2Jacobian.prototype.Compute = function (x1, a1, x2, a2) {
      if (a1 === undefined) a1 = 0;
      if (a2 === undefined) a2 = 0;
      return (this.linearA.x * x1.x + this.linearA.y * x1.y) + this.angularA * a1 + (this.linearB.x * x2.x + this.linearB.y * x2.y) + this.angularB * a2;
   }
   b2Joint.b2Joint = function () {
      this.m_edgeA = new b2JointEdge();
      this.m_edgeB = new b2JointEdge();
      this.m_localCenterA = new b2Vec2();
      this.m_localCenterB = new b2Vec2();
   };
   b2Joint.prototype.GetType = function () {
      return this.m_type;
   }
   b2Joint.prototype.GetAnchorA = function () {
      return null;
   }
   b2Joint.prototype.GetAnchorB = function () {
      return null;
   }
   b2Joint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return null;
   }
   b2Joint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return 0.0;
   }
   b2Joint.prototype.GetBodyA = function () {
      return this.m_bodyA;
   }
   b2Joint.prototype.GetBodyB = function () {
      return this.m_bodyB;
   }
   b2Joint.prototype.GetNext = function () {
      return this.m_next;
   }
   b2Joint.prototype.GetUserData = function () {
      return this.m_userData;
   }
   b2Joint.prototype.SetUserData = function (data) {
      this.m_userData = data;
   }
   b2Joint.prototype.IsActive = function () {
      return this.m_bodyA.IsActive() && this.m_bodyB.IsActive();
   }
   b2Joint.Create = function (def, allocator) {
      var joint = null;
      switch (def.type) {
      case b2Joint.e_distanceJoint:
         {
            joint = new b2DistanceJoint((def instanceof b2DistanceJointDef ? def : null));
         }
         break;
      case b2Joint.e_mouseJoint:
         {
            joint = new b2MouseJoint((def instanceof b2MouseJointDef ? def : null));
         }
         break;
      case b2Joint.e_prismaticJoint:
         {
            joint = new b2PrismaticJoint((def instanceof b2PrismaticJointDef ? def : null));
         }
         break;
      case b2Joint.e_revoluteJoint:
         {
            joint = new b2RevoluteJoint((def instanceof b2RevoluteJointDef ? def : null));
         }
         break;
      case b2Joint.e_pulleyJoint:
         {
            joint = new b2PulleyJoint((def instanceof b2PulleyJointDef ? def : null));
         }
         break;
      case b2Joint.e_gearJoint:
         {
            joint = new b2GearJoint((def instanceof b2GearJointDef ? def : null));
         }
         break;
      case b2Joint.e_lineJoint:
         {
            joint = new b2LineJoint((def instanceof b2LineJointDef ? def : null));
         }
         break;
      case b2Joint.e_weldJoint:
         {
            joint = new b2WeldJoint((def instanceof b2WeldJointDef ? def : null));
         }
         break;
      case b2Joint.e_frictionJoint:
         {
            joint = new b2FrictionJoint((def instanceof b2FrictionJointDef ? def : null));
         }
         break;
      default:
         break;
      }
      return joint;
   }
   b2Joint.Destroy = function (joint, allocator) {}
   b2Joint.prototype.b2Joint = function (def) {
      b2Settings.b2Assert(def.bodyA != def.bodyB);
      this.m_type = def.type;
      this.m_prev = null;
      this.m_next = null;
      this.m_bodyA = def.bodyA;
      this.m_bodyB = def.bodyB;
      this.m_collideConnected = def.collideConnected;
      this.m_islandFlag = false;
      this.m_userData = def.userData;
   }
   b2Joint.prototype.InitVelocityConstraints = function (step) {}
   b2Joint.prototype.SolveVelocityConstraints = function (step) {}
   b2Joint.prototype.FinalizeVelocityConstraints = function () {}
   b2Joint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      return false;
   }
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.Joints.b2Joint.e_unknownJoint = 0;
      Box2D.Dynamics.Joints.b2Joint.e_revoluteJoint = 1;
      Box2D.Dynamics.Joints.b2Joint.e_prismaticJoint = 2;
      Box2D.Dynamics.Joints.b2Joint.e_distanceJoint = 3;
      Box2D.Dynamics.Joints.b2Joint.e_pulleyJoint = 4;
      Box2D.Dynamics.Joints.b2Joint.e_mouseJoint = 5;
      Box2D.Dynamics.Joints.b2Joint.e_gearJoint = 6;
      Box2D.Dynamics.Joints.b2Joint.e_lineJoint = 7;
      Box2D.Dynamics.Joints.b2Joint.e_weldJoint = 8;
      Box2D.Dynamics.Joints.b2Joint.e_frictionJoint = 9;
      Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit = 0;
      Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit = 1;
      Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit = 2;
      Box2D.Dynamics.Joints.b2Joint.e_equalLimits = 3;
   });
   b2JointDef.b2JointDef = function () {};
   b2JointDef.prototype.b2JointDef = function () {
      this.type = b2Joint.e_unknownJoint;
      this.userData = null;
      this.bodyA = null;
      this.bodyB = null;
      this.collideConnected = false;
   }
   b2JointEdge.b2JointEdge = function () {};
   Box2D.inherit(b2LineJoint, Box2D.Dynamics.Joints.b2Joint);
   b2LineJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2LineJoint.b2LineJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_localAnchor1 = new b2Vec2();
      this.m_localAnchor2 = new b2Vec2();
      this.m_localXAxis1 = new b2Vec2();
      this.m_localYAxis1 = new b2Vec2();
      this.m_axis = new b2Vec2();
      this.m_perp = new b2Vec2();
      this.m_K = new b2Mat22();
      this.m_impulse = new b2Vec2();
   };
   b2LineJoint.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
   }
   b2LineJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
   }
   b2LineJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.x), inv_dt * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.y));
   }
   b2LineJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return inv_dt * this.m_impulse.y;
   }
   b2LineJoint.prototype.GetJointTranslation = function () {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      var p1 = bA.GetWorldPoint(this.m_localAnchor1);
      var p2 = bB.GetWorldPoint(this.m_localAnchor2);
      var dX = p2.x - p1.x;
      var dY = p2.y - p1.y;
      var axis = bA.GetWorldVector(this.m_localXAxis1);
      var translation = axis.x * dX + axis.y * dY;
      return translation;
   }
   b2LineJoint.prototype.GetJointSpeed = function () {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
      var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var p1X = bA.m_sweep.c.x + r1X;
      var p1Y = bA.m_sweep.c.y + r1Y;
      var p2X = bB.m_sweep.c.x + r2X;
      var p2Y = bB.m_sweep.c.y + r2Y;
      var dX = p2X - p1X;
      var dY = p2Y - p1Y;
      var axis = bA.GetWorldVector(this.m_localXAxis1);
      var v1 = bA.m_linearVelocity;
      var v2 = bB.m_linearVelocity;
      var w1 = bA.m_angularVelocity;
      var w2 = bB.m_angularVelocity;
      var speed = (dX * ((-w1 * axis.y)) + dY * (w1 * axis.x)) + (axis.x * (((v2.x + ((-w2 * r2Y))) - v1.x) - ((-w1 * r1Y))) + axis.y * (((v2.y + (w2 * r2X)) - v1.y) - (w1 * r1X)));
      return speed;
   }
   b2LineJoint.prototype.IsLimitEnabled = function () {
      return this.m_enableLimit;
   }
   b2LineJoint.prototype.EnableLimit = function (flag) {
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_enableLimit = flag;
   }
   b2LineJoint.prototype.GetLowerLimit = function () {
      return this.m_lowerTranslation;
   }
   b2LineJoint.prototype.GetUpperLimit = function () {
      return this.m_upperTranslation;
   }
   b2LineJoint.prototype.SetLimits = function (lower, upper) {
      if (lower === undefined) lower = 0;
      if (upper === undefined) upper = 0;
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_lowerTranslation = lower;
      this.m_upperTranslation = upper;
   }
   b2LineJoint.prototype.IsMotorEnabled = function () {
      return this.m_enableMotor;
   }
   b2LineJoint.prototype.EnableMotor = function (flag) {
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_enableMotor = flag;
   }
   b2LineJoint.prototype.SetMotorSpeed = function (speed) {
      if (speed === undefined) speed = 0;
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_motorSpeed = speed;
   }
   b2LineJoint.prototype.GetMotorSpeed = function () {
      return this.m_motorSpeed;
   }
   b2LineJoint.prototype.SetMaxMotorForce = function (force) {
      if (force === undefined) force = 0;
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_maxMotorForce = force;
   }
   b2LineJoint.prototype.GetMaxMotorForce = function () {
      return this.m_maxMotorForce;
   }
   b2LineJoint.prototype.GetMotorForce = function () {
      return this.m_motorImpulse;
   }
   b2LineJoint.prototype.b2LineJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      var tMat;
      var tX = 0;
      var tY = 0;
      this.m_localAnchor1.SetV(def.localAnchorA);
      this.m_localAnchor2.SetV(def.localAnchorB);
      this.m_localXAxis1.SetV(def.localAxisA);
      this.m_localYAxis1.x = (-this.m_localXAxis1.y);
      this.m_localYAxis1.y = this.m_localXAxis1.x;
      this.m_impulse.SetZero();
      this.m_motorMass = 0.0;
      this.m_motorImpulse = 0.0;
      this.m_lowerTranslation = def.lowerTranslation;
      this.m_upperTranslation = def.upperTranslation;
      this.m_maxMotorForce = def.maxMotorForce;
      this.m_motorSpeed = def.motorSpeed;
      this.m_enableLimit = def.enableLimit;
      this.m_enableMotor = def.enableMotor;
      this.m_limitState = b2Joint.e_inactiveLimit;
      this.m_axis.SetZero();
      this.m_perp.SetZero();
   }
   b2LineJoint.prototype.InitVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      var tX = 0;
      this.m_localCenterA.SetV(bA.GetLocalCenter());
      this.m_localCenterB.SetV(bB.GetLocalCenter());
      var xf1 = bA.GetTransform();
      var xf2 = bB.GetTransform();
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
      var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
      tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
      var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
      var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
      this.m_invMassA = bA.m_invMass;
      this.m_invMassB = bB.m_invMass;
      this.m_invIA = bA.m_invI;
      this.m_invIB = bB.m_invI; {
         this.m_axis.SetV(b2Math.MulMV(xf1.R, this.m_localXAxis1));
         this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
         this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
         this.m_motorMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_a1 * this.m_a1 + this.m_invIB * this.m_a2 * this.m_a2;
         this.m_motorMass = this.m_motorMass > Number.MIN_VALUE ? 1.0 / this.m_motorMass : 0.0;
      } {
         this.m_perp.SetV(b2Math.MulMV(xf1.R, this.m_localYAxis1));
         this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
         this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
         var m1 = this.m_invMassA;
         var m2 = this.m_invMassB;
         var i1 = this.m_invIA;
         var i2 = this.m_invIB;
         this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
         this.m_K.col1.y = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
         this.m_K.col2.x = this.m_K.col1.y;
         this.m_K.col2.y = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
      }
      if (this.m_enableLimit) {
         var jointTransition = this.m_axis.x * dX + this.m_axis.y * dY;
         if (b2Math.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * b2Settings.b2_linearSlop) {
            this.m_limitState = b2Joint.e_equalLimits;
         }
         else if (jointTransition <= this.m_lowerTranslation) {
            if (this.m_limitState != b2Joint.e_atLowerLimit) {
               this.m_limitState = b2Joint.e_atLowerLimit;
               this.m_impulse.y = 0.0;
            }
         }
         else if (jointTransition >= this.m_upperTranslation) {
            if (this.m_limitState != b2Joint.e_atUpperLimit) {
               this.m_limitState = b2Joint.e_atUpperLimit;
               this.m_impulse.y = 0.0;
            }
         }
         else {
            this.m_limitState = b2Joint.e_inactiveLimit;
            this.m_impulse.y = 0.0;
         }
      }
      else {
         this.m_limitState = b2Joint.e_inactiveLimit;
      }
      if (this.m_enableMotor == false) {
         this.m_motorImpulse = 0.0;
      }
      if (step.warmStarting) {
         this.m_impulse.x *= step.dtRatio;
         this.m_impulse.y *= step.dtRatio;
         this.m_motorImpulse *= step.dtRatio;
         var PX = this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.x;
         var PY = this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.y;
         var L1 = this.m_impulse.x * this.m_s1 + (this.m_motorImpulse + this.m_impulse.y) * this.m_a1;
         var L2 = this.m_impulse.x * this.m_s2 + (this.m_motorImpulse + this.m_impulse.y) * this.m_a2;
         bA.m_linearVelocity.x -= this.m_invMassA * PX;
         bA.m_linearVelocity.y -= this.m_invMassA * PY;
         bA.m_angularVelocity -= this.m_invIA * L1;
         bB.m_linearVelocity.x += this.m_invMassB * PX;
         bB.m_linearVelocity.y += this.m_invMassB * PY;
         bB.m_angularVelocity += this.m_invIB * L2;
      }
      else {
         this.m_impulse.SetZero();
         this.m_motorImpulse = 0.0;
      }
   }
   b2LineJoint.prototype.SolveVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var v1 = bA.m_linearVelocity;
      var w1 = bA.m_angularVelocity;
      var v2 = bB.m_linearVelocity;
      var w2 = bB.m_angularVelocity;
      var PX = 0;
      var PY = 0;
      var L1 = 0;
      var L2 = 0;
      if (this.m_enableMotor && this.m_limitState != b2Joint.e_equalLimits) {
         var Cdot = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
         var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);
         var oldImpulse = this.m_motorImpulse;
         var maxImpulse = step.dt * this.m_maxMotorForce;
         this.m_motorImpulse = b2Math.Clamp(this.m_motorImpulse + impulse, (-maxImpulse), maxImpulse);
         impulse = this.m_motorImpulse - oldImpulse;
         PX = impulse * this.m_axis.x;
         PY = impulse * this.m_axis.y;
         L1 = impulse * this.m_a1;
         L2 = impulse * this.m_a2;
         v1.x -= this.m_invMassA * PX;
         v1.y -= this.m_invMassA * PY;
         w1 -= this.m_invIA * L1;
         v2.x += this.m_invMassB * PX;
         v2.y += this.m_invMassB * PY;
         w2 += this.m_invIB * L2;
      }
      var Cdot1 = this.m_perp.x * (v2.x - v1.x) + this.m_perp.y * (v2.y - v1.y) + this.m_s2 * w2 - this.m_s1 * w1;
      if (this.m_enableLimit && this.m_limitState != b2Joint.e_inactiveLimit) {
         var Cdot2 = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
         var f1 = this.m_impulse.Copy();
         var df = this.m_K.Solve(new b2Vec2(), (-Cdot1), (-Cdot2));
         this.m_impulse.Add(df);
         if (this.m_limitState == b2Joint.e_atLowerLimit) {
            this.m_impulse.y = b2Math.Max(this.m_impulse.y, 0.0);
         }
         else if (this.m_limitState == b2Joint.e_atUpperLimit) {
            this.m_impulse.y = b2Math.Min(this.m_impulse.y, 0.0);
         }
         var b = (-Cdot1) - (this.m_impulse.y - f1.y) * this.m_K.col2.x;
         var f2r = 0;
         if (this.m_K.col1.x != 0.0) {
            f2r = b / this.m_K.col1.x + f1.x;
         }
         else {
            f2r = f1.x;
         }
         this.m_impulse.x = f2r;
         df.x = this.m_impulse.x - f1.x;
         df.y = this.m_impulse.y - f1.y;
         PX = df.x * this.m_perp.x + df.y * this.m_axis.x;
         PY = df.x * this.m_perp.y + df.y * this.m_axis.y;
         L1 = df.x * this.m_s1 + df.y * this.m_a1;
         L2 = df.x * this.m_s2 + df.y * this.m_a2;
         v1.x -= this.m_invMassA * PX;
         v1.y -= this.m_invMassA * PY;
         w1 -= this.m_invIA * L1;
         v2.x += this.m_invMassB * PX;
         v2.y += this.m_invMassB * PY;
         w2 += this.m_invIB * L2;
      }
      else {
         var df2 = 0;
         if (this.m_K.col1.x != 0.0) {
            df2 = ((-Cdot1)) / this.m_K.col1.x;
         }
         else {
            df2 = 0.0;
         }
         this.m_impulse.x += df2;
         PX = df2 * this.m_perp.x;
         PY = df2 * this.m_perp.y;
         L1 = df2 * this.m_s1;
         L2 = df2 * this.m_s2;
         v1.x -= this.m_invMassA * PX;
         v1.y -= this.m_invMassA * PY;
         w1 -= this.m_invIA * L1;
         v2.x += this.m_invMassB * PX;
         v2.y += this.m_invMassB * PY;
         w2 += this.m_invIB * L2;
      }
      bA.m_linearVelocity.SetV(v1);
      bA.m_angularVelocity = w1;
      bB.m_linearVelocity.SetV(v2);
      bB.m_angularVelocity = w2;
   }
   b2LineJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      var limitC = 0;
      var oldLimitImpulse = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var c1 = bA.m_sweep.c;
      var a1 = bA.m_sweep.a;
      var c2 = bB.m_sweep.c;
      var a2 = bB.m_sweep.a;
      var tMat;
      var tX = 0;
      var m1 = 0;
      var m2 = 0;
      var i1 = 0;
      var i2 = 0;
      var linearError = 0.0;
      var angularError = 0.0;
      var active = false;
      var C2 = 0.0;
      var R1 = b2Mat22.FromAngle(a1);
      var R2 = b2Mat22.FromAngle(a2);
      tMat = R1;
      var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
      var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
      tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = R2;
      var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
      var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var dX = c2.x + r2X - c1.x - r1X;
      var dY = c2.y + r2Y - c1.y - r1Y;
      if (this.m_enableLimit) {
         this.m_axis = b2Math.MulMV(R1, this.m_localXAxis1);
         this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
         this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
         var translation = this.m_axis.x * dX + this.m_axis.y * dY;
         if (b2Math.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * b2Settings.b2_linearSlop) {
            C2 = b2Math.Clamp(translation, (-b2Settings.b2_maxLinearCorrection), b2Settings.b2_maxLinearCorrection);
            linearError = b2Math.Abs(translation);
            active = true;
         }
         else if (translation <= this.m_lowerTranslation) {
            C2 = b2Math.Clamp(translation - this.m_lowerTranslation + b2Settings.b2_linearSlop, (-b2Settings.b2_maxLinearCorrection), 0.0);
            linearError = this.m_lowerTranslation - translation;
            active = true;
         }
         else if (translation >= this.m_upperTranslation) {
            C2 = b2Math.Clamp(translation - this.m_upperTranslation + b2Settings.b2_linearSlop, 0.0, b2Settings.b2_maxLinearCorrection);
            linearError = translation - this.m_upperTranslation;
            active = true;
         }
      }
      this.m_perp = b2Math.MulMV(R1, this.m_localYAxis1);
      this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
      this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
      var impulse = new b2Vec2();
      var C1 = this.m_perp.x * dX + this.m_perp.y * dY;
      linearError = b2Math.Max(linearError, b2Math.Abs(C1));
      angularError = 0.0;
      if (active) {
         m1 = this.m_invMassA;
         m2 = this.m_invMassB;
         i1 = this.m_invIA;
         i2 = this.m_invIB;
         this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
         this.m_K.col1.y = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
         this.m_K.col2.x = this.m_K.col1.y;
         this.m_K.col2.y = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
         this.m_K.Solve(impulse, (-C1), (-C2));
      }
      else {
         m1 = this.m_invMassA;
         m2 = this.m_invMassB;
         i1 = this.m_invIA;
         i2 = this.m_invIB;
         var k11 = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
         var impulse1 = 0;
         if (k11 != 0.0) {
            impulse1 = ((-C1)) / k11;
         }
         else {
            impulse1 = 0.0;
         }
         impulse.x = impulse1;
         impulse.y = 0.0;
      }
      var PX = impulse.x * this.m_perp.x + impulse.y * this.m_axis.x;
      var PY = impulse.x * this.m_perp.y + impulse.y * this.m_axis.y;
      var L1 = impulse.x * this.m_s1 + impulse.y * this.m_a1;
      var L2 = impulse.x * this.m_s2 + impulse.y * this.m_a2;
      c1.x -= this.m_invMassA * PX;
      c1.y -= this.m_invMassA * PY;
      a1 -= this.m_invIA * L1;
      c2.x += this.m_invMassB * PX;
      c2.y += this.m_invMassB * PY;
      a2 += this.m_invIB * L2;
      bA.m_sweep.a = a1;
      bB.m_sweep.a = a2;
      bA.SynchronizeTransform();
      bB.SynchronizeTransform();
      return linearError <= b2Settings.b2_linearSlop && angularError <= b2Settings.b2_angularSlop;
   }
   Box2D.inherit(b2LineJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2LineJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2LineJointDef.b2LineJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.localAnchorA = new b2Vec2();
      this.localAnchorB = new b2Vec2();
      this.localAxisA = new b2Vec2();
   };
   b2LineJointDef.prototype.b2LineJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_lineJoint;
      this.localAxisA.Set(1.0, 0.0);
      this.enableLimit = false;
      this.lowerTranslation = 0.0;
      this.upperTranslation = 0.0;
      this.enableMotor = false;
      this.maxMotorForce = 0.0;
      this.motorSpeed = 0.0;
   }
   b2LineJointDef.prototype.Initialize = function (bA, bB, anchor, axis) {
      this.bodyA = bA;
      this.bodyB = bB;
      this.localAnchorA = this.bodyA.GetLocalPoint(anchor);
      this.localAnchorB = this.bodyB.GetLocalPoint(anchor);
      this.localAxisA = this.bodyA.GetLocalVector(axis);
   }
   Box2D.inherit(b2MouseJoint, Box2D.Dynamics.Joints.b2Joint);
   b2MouseJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2MouseJoint.b2MouseJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.K = new b2Mat22();
      this.K1 = new b2Mat22();
      this.K2 = new b2Mat22();
      this.m_localAnchor = new b2Vec2();
      this.m_target = new b2Vec2();
      this.m_impulse = new b2Vec2();
      this.m_mass = new b2Mat22();
      this.m_C = new b2Vec2();
   };
   b2MouseJoint.prototype.GetAnchorA = function () {
      return this.m_target;
   }
   b2MouseJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor);
   }
   b2MouseJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * this.m_impulse.x, inv_dt * this.m_impulse.y);
   }
   b2MouseJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return 0.0;
   }
   b2MouseJoint.prototype.GetTarget = function () {
      return this.m_target;
   }
   b2MouseJoint.prototype.SetTarget = function (target) {
      if (this.m_bodyB.IsAwake() == false) {
         this.m_bodyB.SetAwake(true);
      }
      this.m_target = target;
   }
   b2MouseJoint.prototype.GetMaxForce = function () {
      return this.m_maxForce;
   }
   b2MouseJoint.prototype.SetMaxForce = function (maxForce) {
      if (maxForce === undefined) maxForce = 0;
      this.m_maxForce = maxForce;
   }
   b2MouseJoint.prototype.GetFrequency = function () {
      return this.m_frequencyHz;
   }
   b2MouseJoint.prototype.SetFrequency = function (hz) {
      if (hz === undefined) hz = 0;
      this.m_frequencyHz = hz;
   }
   b2MouseJoint.prototype.GetDampingRatio = function () {
      return this.m_dampingRatio;
   }
   b2MouseJoint.prototype.SetDampingRatio = function (ratio) {
      if (ratio === undefined) ratio = 0;
      this.m_dampingRatio = ratio;
   }
   b2MouseJoint.prototype.b2MouseJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      this.m_target.SetV(def.target);
      var tX = this.m_target.x - this.m_bodyB.m_xf.position.x;
      var tY = this.m_target.y - this.m_bodyB.m_xf.position.y;
      var tMat = this.m_bodyB.m_xf.R;
      this.m_localAnchor.x = (tX * tMat.col1.x + tY * tMat.col1.y);
      this.m_localAnchor.y = (tX * tMat.col2.x + tY * tMat.col2.y);
      this.m_maxForce = def.maxForce;
      this.m_impulse.SetZero();
      this.m_frequencyHz = def.frequencyHz;
      this.m_dampingRatio = def.dampingRatio;
      this.m_beta = 0.0;
      this.m_gamma = 0.0;
   }
   b2MouseJoint.prototype.InitVelocityConstraints = function (step) {
      var b = this.m_bodyB;
      var mass = b.GetMass();
      var omega = 2.0 * Math.PI * this.m_frequencyHz;
      var d = 2.0 * mass * this.m_dampingRatio * omega;
      var k = mass * omega * omega;
      this.m_gamma = step.dt * (d + step.dt * k);
      this.m_gamma = this.m_gamma != 0 ? 1 / this.m_gamma : 0.0;
      this.m_beta = step.dt * k * this.m_gamma;
      var tMat;tMat = b.m_xf.R;
      var rX = this.m_localAnchor.x - b.m_sweep.localCenter.x;
      var rY = this.m_localAnchor.y - b.m_sweep.localCenter.y;
      var tX = (tMat.col1.x * rX + tMat.col2.x * rY);rY = (tMat.col1.y * rX + tMat.col2.y * rY);
      rX = tX;
      var invMass = b.m_invMass;
      var invI = b.m_invI;this.K1.col1.x = invMass;
      this.K1.col2.x = 0.0;
      this.K1.col1.y = 0.0;
      this.K1.col2.y = invMass;
      this.K2.col1.x = invI * rY * rY;
      this.K2.col2.x = (-invI * rX * rY);
      this.K2.col1.y = (-invI * rX * rY);
      this.K2.col2.y = invI * rX * rX;
      this.K.SetM(this.K1);
      this.K.AddM(this.K2);
      this.K.col1.x += this.m_gamma;
      this.K.col2.y += this.m_gamma;
      this.K.GetInverse(this.m_mass);
      this.m_C.x = b.m_sweep.c.x + rX - this.m_target.x;
      this.m_C.y = b.m_sweep.c.y + rY - this.m_target.y;
      b.m_angularVelocity *= 0.98;
      this.m_impulse.x *= step.dtRatio;
      this.m_impulse.y *= step.dtRatio;
      b.m_linearVelocity.x += invMass * this.m_impulse.x;
      b.m_linearVelocity.y += invMass * this.m_impulse.y;
      b.m_angularVelocity += invI * (rX * this.m_impulse.y - rY * this.m_impulse.x);
   }
   b2MouseJoint.prototype.SolveVelocityConstraints = function (step) {
      var b = this.m_bodyB;
      var tMat;
      var tX = 0;
      var tY = 0;
      tMat = b.m_xf.R;
      var rX = this.m_localAnchor.x - b.m_sweep.localCenter.x;
      var rY = this.m_localAnchor.y - b.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rX + tMat.col2.x * rY);
      rY = (tMat.col1.y * rX + tMat.col2.y * rY);
      rX = tX;
      var CdotX = b.m_linearVelocity.x + ((-b.m_angularVelocity * rY));
      var CdotY = b.m_linearVelocity.y + (b.m_angularVelocity * rX);
      tMat = this.m_mass;
      tX = CdotX + this.m_beta * this.m_C.x + this.m_gamma * this.m_impulse.x;
      tY = CdotY + this.m_beta * this.m_C.y + this.m_gamma * this.m_impulse.y;
      var impulseX = (-(tMat.col1.x * tX + tMat.col2.x * tY));
      var impulseY = (-(tMat.col1.y * tX + tMat.col2.y * tY));
      var oldImpulseX = this.m_impulse.x;
      var oldImpulseY = this.m_impulse.y;
      this.m_impulse.x += impulseX;
      this.m_impulse.y += impulseY;
      var maxImpulse = step.dt * this.m_maxForce;
      if (this.m_impulse.LengthSquared() > maxImpulse * maxImpulse) {
         this.m_impulse.Multiply(maxImpulse / this.m_impulse.Length());
      }
      impulseX = this.m_impulse.x - oldImpulseX;
      impulseY = this.m_impulse.y - oldImpulseY;
      b.m_linearVelocity.x += b.m_invMass * impulseX;
      b.m_linearVelocity.y += b.m_invMass * impulseY;
      b.m_angularVelocity += b.m_invI * (rX * impulseY - rY * impulseX);
   }
   b2MouseJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      return true;
   }
   Box2D.inherit(b2MouseJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2MouseJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2MouseJointDef.b2MouseJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.target = new b2Vec2();
   };
   b2MouseJointDef.prototype.b2MouseJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_mouseJoint;
      this.maxForce = 0.0;
      this.frequencyHz = 5.0;
      this.dampingRatio = 0.7;
   }
   Box2D.inherit(b2PrismaticJoint, Box2D.Dynamics.Joints.b2Joint);
   b2PrismaticJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2PrismaticJoint.b2PrismaticJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_localAnchor1 = new b2Vec2();
      this.m_localAnchor2 = new b2Vec2();
      this.m_localXAxis1 = new b2Vec2();
      this.m_localYAxis1 = new b2Vec2();
      this.m_axis = new b2Vec2();
      this.m_perp = new b2Vec2();
      this.m_K = new b2Mat33();
      this.m_impulse = new b2Vec3();
   };
   b2PrismaticJoint.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
   }
   b2PrismaticJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
   }
   b2PrismaticJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x), inv_dt * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y));
   }
   b2PrismaticJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return inv_dt * this.m_impulse.y;
   }
   b2PrismaticJoint.prototype.GetJointTranslation = function () {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      var p1 = bA.GetWorldPoint(this.m_localAnchor1);
      var p2 = bB.GetWorldPoint(this.m_localAnchor2);
      var dX = p2.x - p1.x;
      var dY = p2.y - p1.y;
      var axis = bA.GetWorldVector(this.m_localXAxis1);
      var translation = axis.x * dX + axis.y * dY;
      return translation;
   }
   b2PrismaticJoint.prototype.GetJointSpeed = function () {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
      var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var p1X = bA.m_sweep.c.x + r1X;
      var p1Y = bA.m_sweep.c.y + r1Y;
      var p2X = bB.m_sweep.c.x + r2X;
      var p2Y = bB.m_sweep.c.y + r2Y;
      var dX = p2X - p1X;
      var dY = p2Y - p1Y;
      var axis = bA.GetWorldVector(this.m_localXAxis1);
      var v1 = bA.m_linearVelocity;
      var v2 = bB.m_linearVelocity;
      var w1 = bA.m_angularVelocity;
      var w2 = bB.m_angularVelocity;
      var speed = (dX * ((-w1 * axis.y)) + dY * (w1 * axis.x)) + (axis.x * (((v2.x + ((-w2 * r2Y))) - v1.x) - ((-w1 * r1Y))) + axis.y * (((v2.y + (w2 * r2X)) - v1.y) - (w1 * r1X)));
      return speed;
   }
   b2PrismaticJoint.prototype.IsLimitEnabled = function () {
      return this.m_enableLimit;
   }
   b2PrismaticJoint.prototype.EnableLimit = function (flag) {
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_enableLimit = flag;
   }
   b2PrismaticJoint.prototype.GetLowerLimit = function () {
      return this.m_lowerTranslation;
   }
   b2PrismaticJoint.prototype.GetUpperLimit = function () {
      return this.m_upperTranslation;
   }
   b2PrismaticJoint.prototype.SetLimits = function (lower, upper) {
      if (lower === undefined) lower = 0;
      if (upper === undefined) upper = 0;
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_lowerTranslation = lower;
      this.m_upperTranslation = upper;
   }
   b2PrismaticJoint.prototype.IsMotorEnabled = function () {
      return this.m_enableMotor;
   }
   b2PrismaticJoint.prototype.EnableMotor = function (flag) {
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_enableMotor = flag;
   }
   b2PrismaticJoint.prototype.SetMotorSpeed = function (speed) {
      if (speed === undefined) speed = 0;
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_motorSpeed = speed;
   }
   b2PrismaticJoint.prototype.GetMotorSpeed = function () {
      return this.m_motorSpeed;
   }
   b2PrismaticJoint.prototype.SetMaxMotorForce = function (force) {
      if (force === undefined) force = 0;
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_maxMotorForce = force;
   }
   b2PrismaticJoint.prototype.GetMotorForce = function () {
      return this.m_motorImpulse;
   }
   b2PrismaticJoint.prototype.b2PrismaticJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      var tMat;
      var tX = 0;
      var tY = 0;
      this.m_localAnchor1.SetV(def.localAnchorA);
      this.m_localAnchor2.SetV(def.localAnchorB);
      this.m_localXAxis1.SetV(def.localAxisA);
      this.m_localYAxis1.x = (-this.m_localXAxis1.y);
      this.m_localYAxis1.y = this.m_localXAxis1.x;
      this.m_refAngle = def.referenceAngle;
      this.m_impulse.SetZero();
      this.m_motorMass = 0.0;
      this.m_motorImpulse = 0.0;
      this.m_lowerTranslation = def.lowerTranslation;
      this.m_upperTranslation = def.upperTranslation;
      this.m_maxMotorForce = def.maxMotorForce;
      this.m_motorSpeed = def.motorSpeed;
      this.m_enableLimit = def.enableLimit;
      this.m_enableMotor = def.enableMotor;
      this.m_limitState = b2Joint.e_inactiveLimit;
      this.m_axis.SetZero();
      this.m_perp.SetZero();
   }
   b2PrismaticJoint.prototype.InitVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      var tX = 0;
      this.m_localCenterA.SetV(bA.GetLocalCenter());
      this.m_localCenterB.SetV(bB.GetLocalCenter());
      var xf1 = bA.GetTransform();
      var xf2 = bB.GetTransform();
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
      var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
      tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
      var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
      var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
      this.m_invMassA = bA.m_invMass;
      this.m_invMassB = bB.m_invMass;
      this.m_invIA = bA.m_invI;
      this.m_invIB = bB.m_invI; {
         this.m_axis.SetV(b2Math.MulMV(xf1.R, this.m_localXAxis1));
         this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
         this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
         this.m_motorMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_a1 * this.m_a1 + this.m_invIB * this.m_a2 * this.m_a2;
         if (this.m_motorMass > Number.MIN_VALUE) this.m_motorMass = 1.0 / this.m_motorMass;
      } {
         this.m_perp.SetV(b2Math.MulMV(xf1.R, this.m_localYAxis1));
         this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
         this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
         var m1 = this.m_invMassA;
         var m2 = this.m_invMassB;
         var i1 = this.m_invIA;
         var i2 = this.m_invIB;
         this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
         this.m_K.col1.y = i1 * this.m_s1 + i2 * this.m_s2;
         this.m_K.col1.z = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
         this.m_K.col2.x = this.m_K.col1.y;
         this.m_K.col2.y = i1 + i2;
         this.m_K.col2.z = i1 * this.m_a1 + i2 * this.m_a2;
         this.m_K.col3.x = this.m_K.col1.z;
         this.m_K.col3.y = this.m_K.col2.z;
         this.m_K.col3.z = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
      }
      if (this.m_enableLimit) {
         var jointTransition = this.m_axis.x * dX + this.m_axis.y * dY;
         if (b2Math.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * b2Settings.b2_linearSlop) {
            this.m_limitState = b2Joint.e_equalLimits;
         }
         else if (jointTransition <= this.m_lowerTranslation) {
            if (this.m_limitState != b2Joint.e_atLowerLimit) {
               this.m_limitState = b2Joint.e_atLowerLimit;
               this.m_impulse.z = 0.0;
            }
         }
         else if (jointTransition >= this.m_upperTranslation) {
            if (this.m_limitState != b2Joint.e_atUpperLimit) {
               this.m_limitState = b2Joint.e_atUpperLimit;
               this.m_impulse.z = 0.0;
            }
         }
         else {
            this.m_limitState = b2Joint.e_inactiveLimit;
            this.m_impulse.z = 0.0;
         }
      }
      else {
         this.m_limitState = b2Joint.e_inactiveLimit;
      }
      if (this.m_enableMotor == false) {
         this.m_motorImpulse = 0.0;
      }
      if (step.warmStarting) {
         this.m_impulse.x *= step.dtRatio;
         this.m_impulse.y *= step.dtRatio;
         this.m_motorImpulse *= step.dtRatio;
         var PX = this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x;
         var PY = this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y;
         var L1 = this.m_impulse.x * this.m_s1 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;
         var L2 = this.m_impulse.x * this.m_s2 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;
         bA.m_linearVelocity.x -= this.m_invMassA * PX;
         bA.m_linearVelocity.y -= this.m_invMassA * PY;
         bA.m_angularVelocity -= this.m_invIA * L1;
         bB.m_linearVelocity.x += this.m_invMassB * PX;
         bB.m_linearVelocity.y += this.m_invMassB * PY;
         bB.m_angularVelocity += this.m_invIB * L2;
      }
      else {
         this.m_impulse.SetZero();
         this.m_motorImpulse = 0.0;
      }
   }
   b2PrismaticJoint.prototype.SolveVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var v1 = bA.m_linearVelocity;
      var w1 = bA.m_angularVelocity;
      var v2 = bB.m_linearVelocity;
      var w2 = bB.m_angularVelocity;
      var PX = 0;
      var PY = 0;
      var L1 = 0;
      var L2 = 0;
      if (this.m_enableMotor && this.m_limitState != b2Joint.e_equalLimits) {
         var Cdot = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
         var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);
         var oldImpulse = this.m_motorImpulse;
         var maxImpulse = step.dt * this.m_maxMotorForce;
         this.m_motorImpulse = b2Math.Clamp(this.m_motorImpulse + impulse, (-maxImpulse), maxImpulse);
         impulse = this.m_motorImpulse - oldImpulse;
         PX = impulse * this.m_axis.x;
         PY = impulse * this.m_axis.y;
         L1 = impulse * this.m_a1;
         L2 = impulse * this.m_a2;
         v1.x -= this.m_invMassA * PX;
         v1.y -= this.m_invMassA * PY;
         w1 -= this.m_invIA * L1;
         v2.x += this.m_invMassB * PX;
         v2.y += this.m_invMassB * PY;
         w2 += this.m_invIB * L2;
      }
      var Cdot1X = this.m_perp.x * (v2.x - v1.x) + this.m_perp.y * (v2.y - v1.y) + this.m_s2 * w2 - this.m_s1 * w1;
      var Cdot1Y = w2 - w1;
      if (this.m_enableLimit && this.m_limitState != b2Joint.e_inactiveLimit) {
         var Cdot2 = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
         var f1 = this.m_impulse.Copy();
         var df = this.m_K.Solve33(new b2Vec3(), (-Cdot1X), (-Cdot1Y), (-Cdot2));
         this.m_impulse.Add(df);
         if (this.m_limitState == b2Joint.e_atLowerLimit) {
            this.m_impulse.z = b2Math.Max(this.m_impulse.z, 0.0);
         }
         else if (this.m_limitState == b2Joint.e_atUpperLimit) {
            this.m_impulse.z = b2Math.Min(this.m_impulse.z, 0.0);
         }
         var bX = (-Cdot1X) - (this.m_impulse.z - f1.z) * this.m_K.col3.x;
         var bY = (-Cdot1Y) - (this.m_impulse.z - f1.z) * this.m_K.col3.y;
         var f2r = this.m_K.Solve22(new b2Vec2(), bX, bY);
         f2r.x += f1.x;
         f2r.y += f1.y;
         this.m_impulse.x = f2r.x;
         this.m_impulse.y = f2r.y;
         df.x = this.m_impulse.x - f1.x;
         df.y = this.m_impulse.y - f1.y;
         df.z = this.m_impulse.z - f1.z;
         PX = df.x * this.m_perp.x + df.z * this.m_axis.x;
         PY = df.x * this.m_perp.y + df.z * this.m_axis.y;
         L1 = df.x * this.m_s1 + df.y + df.z * this.m_a1;
         L2 = df.x * this.m_s2 + df.y + df.z * this.m_a2;
         v1.x -= this.m_invMassA * PX;
         v1.y -= this.m_invMassA * PY;
         w1 -= this.m_invIA * L1;
         v2.x += this.m_invMassB * PX;
         v2.y += this.m_invMassB * PY;
         w2 += this.m_invIB * L2;
      }
      else {
         var df2 = this.m_K.Solve22(new b2Vec2(), (-Cdot1X), (-Cdot1Y));
         this.m_impulse.x += df2.x;
         this.m_impulse.y += df2.y;
         PX = df2.x * this.m_perp.x;
         PY = df2.x * this.m_perp.y;
         L1 = df2.x * this.m_s1 + df2.y;
         L2 = df2.x * this.m_s2 + df2.y;
         v1.x -= this.m_invMassA * PX;
         v1.y -= this.m_invMassA * PY;
         w1 -= this.m_invIA * L1;
         v2.x += this.m_invMassB * PX;
         v2.y += this.m_invMassB * PY;
         w2 += this.m_invIB * L2;
      }
      bA.m_linearVelocity.SetV(v1);
      bA.m_angularVelocity = w1;
      bB.m_linearVelocity.SetV(v2);
      bB.m_angularVelocity = w2;
   }
   b2PrismaticJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      var limitC = 0;
      var oldLimitImpulse = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var c1 = bA.m_sweep.c;
      var a1 = bA.m_sweep.a;
      var c2 = bB.m_sweep.c;
      var a2 = bB.m_sweep.a;
      var tMat;
      var tX = 0;
      var m1 = 0;
      var m2 = 0;
      var i1 = 0;
      var i2 = 0;
      var linearError = 0.0;
      var angularError = 0.0;
      var active = false;
      var C2 = 0.0;
      var R1 = b2Mat22.FromAngle(a1);
      var R2 = b2Mat22.FromAngle(a2);
      tMat = R1;
      var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
      var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
      tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = R2;
      var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
      var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var dX = c2.x + r2X - c1.x - r1X;
      var dY = c2.y + r2Y - c1.y - r1Y;
      if (this.m_enableLimit) {
         this.m_axis = b2Math.MulMV(R1, this.m_localXAxis1);
         this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
         this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
         var translation = this.m_axis.x * dX + this.m_axis.y * dY;
         if (b2Math.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * b2Settings.b2_linearSlop) {
            C2 = b2Math.Clamp(translation, (-b2Settings.b2_maxLinearCorrection), b2Settings.b2_maxLinearCorrection);
            linearError = b2Math.Abs(translation);
            active = true;
         }
         else if (translation <= this.m_lowerTranslation) {
            C2 = b2Math.Clamp(translation - this.m_lowerTranslation + b2Settings.b2_linearSlop, (-b2Settings.b2_maxLinearCorrection), 0.0);
            linearError = this.m_lowerTranslation - translation;
            active = true;
         }
         else if (translation >= this.m_upperTranslation) {
            C2 = b2Math.Clamp(translation - this.m_upperTranslation + b2Settings.b2_linearSlop, 0.0, b2Settings.b2_maxLinearCorrection);
            linearError = translation - this.m_upperTranslation;
            active = true;
         }
      }
      this.m_perp = b2Math.MulMV(R1, this.m_localYAxis1);
      this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
      this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
      var impulse = new b2Vec3();
      var C1X = this.m_perp.x * dX + this.m_perp.y * dY;
      var C1Y = a2 - a1 - this.m_refAngle;
      linearError = b2Math.Max(linearError, b2Math.Abs(C1X));
      angularError = b2Math.Abs(C1Y);
      if (active) {
         m1 = this.m_invMassA;
         m2 = this.m_invMassB;
         i1 = this.m_invIA;
         i2 = this.m_invIB;
         this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
         this.m_K.col1.y = i1 * this.m_s1 + i2 * this.m_s2;
         this.m_K.col1.z = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
         this.m_K.col2.x = this.m_K.col1.y;
         this.m_K.col2.y = i1 + i2;
         this.m_K.col2.z = i1 * this.m_a1 + i2 * this.m_a2;
         this.m_K.col3.x = this.m_K.col1.z;
         this.m_K.col3.y = this.m_K.col2.z;
         this.m_K.col3.z = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
         this.m_K.Solve33(impulse, (-C1X), (-C1Y), (-C2));
      }
      else {
         m1 = this.m_invMassA;
         m2 = this.m_invMassB;
         i1 = this.m_invIA;
         i2 = this.m_invIB;
         var k11 = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
         var k12 = i1 * this.m_s1 + i2 * this.m_s2;
         var k22 = i1 + i2;
         this.m_K.col1.Set(k11, k12, 0.0);
         this.m_K.col2.Set(k12, k22, 0.0);
         var impulse1 = this.m_K.Solve22(new b2Vec2(), (-C1X), (-C1Y));
         impulse.x = impulse1.x;
         impulse.y = impulse1.y;
         impulse.z = 0.0;
      }
      var PX = impulse.x * this.m_perp.x + impulse.z * this.m_axis.x;
      var PY = impulse.x * this.m_perp.y + impulse.z * this.m_axis.y;
      var L1 = impulse.x * this.m_s1 + impulse.y + impulse.z * this.m_a1;
      var L2 = impulse.x * this.m_s2 + impulse.y + impulse.z * this.m_a2;
      c1.x -= this.m_invMassA * PX;
      c1.y -= this.m_invMassA * PY;
      a1 -= this.m_invIA * L1;
      c2.x += this.m_invMassB * PX;
      c2.y += this.m_invMassB * PY;
      a2 += this.m_invIB * L2;
      bA.m_sweep.a = a1;
      bB.m_sweep.a = a2;
      bA.SynchronizeTransform();
      bB.SynchronizeTransform();
      return linearError <= b2Settings.b2_linearSlop && angularError <= b2Settings.b2_angularSlop;
   }
   Box2D.inherit(b2PrismaticJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2PrismaticJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2PrismaticJointDef.b2PrismaticJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.localAnchorA = new b2Vec2();
      this.localAnchorB = new b2Vec2();
      this.localAxisA = new b2Vec2();
   };
   b2PrismaticJointDef.prototype.b2PrismaticJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_prismaticJoint;
      this.localAxisA.Set(1.0, 0.0);
      this.referenceAngle = 0.0;
      this.enableLimit = false;
      this.lowerTranslation = 0.0;
      this.upperTranslation = 0.0;
      this.enableMotor = false;
      this.maxMotorForce = 0.0;
      this.motorSpeed = 0.0;
   }
   b2PrismaticJointDef.prototype.Initialize = function (bA, bB, anchor, axis) {
      this.bodyA = bA;
      this.bodyB = bB;
      this.localAnchorA = this.bodyA.GetLocalPoint(anchor);
      this.localAnchorB = this.bodyB.GetLocalPoint(anchor);
      this.localAxisA = this.bodyA.GetLocalVector(axis);
      this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
   }
   Box2D.inherit(b2PulleyJoint, Box2D.Dynamics.Joints.b2Joint);
   b2PulleyJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2PulleyJoint.b2PulleyJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_groundAnchor1 = new b2Vec2();
      this.m_groundAnchor2 = new b2Vec2();
      this.m_localAnchor1 = new b2Vec2();
      this.m_localAnchor2 = new b2Vec2();
      this.m_u1 = new b2Vec2();
      this.m_u2 = new b2Vec2();
   };
   b2PulleyJoint.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
   }
   b2PulleyJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
   }
   b2PulleyJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * this.m_impulse * this.m_u2.x, inv_dt * this.m_impulse * this.m_u2.y);
   }
   b2PulleyJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return 0.0;
   }
   b2PulleyJoint.prototype.GetGroundAnchorA = function () {
      var a = this.m_ground.m_xf.position.Copy();
      a.Add(this.m_groundAnchor1);
      return a;
   }
   b2PulleyJoint.prototype.GetGroundAnchorB = function () {
      var a = this.m_ground.m_xf.position.Copy();
      a.Add(this.m_groundAnchor2);
      return a;
   }
   b2PulleyJoint.prototype.GetLength1 = function () {
      var p = this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
      var sX = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;
      var sY = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;
      var dX = p.x - sX;
      var dY = p.y - sY;
      return Math.sqrt(dX * dX + dY * dY);
   }
   b2PulleyJoint.prototype.GetLength2 = function () {
      var p = this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
      var sX = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;
      var sY = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;
      var dX = p.x - sX;
      var dY = p.y - sY;
      return Math.sqrt(dX * dX + dY * dY);
   }
   b2PulleyJoint.prototype.GetRatio = function () {
      return this.m_ratio;
   }
   b2PulleyJoint.prototype.b2PulleyJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      var tMat;
      var tX = 0;
      var tY = 0;
      this.m_ground = this.m_bodyA.m_world.m_groundBody;
      this.m_groundAnchor1.x = def.groundAnchorA.x - this.m_ground.m_xf.position.x;
      this.m_groundAnchor1.y = def.groundAnchorA.y - this.m_ground.m_xf.position.y;
      this.m_groundAnchor2.x = def.groundAnchorB.x - this.m_ground.m_xf.position.x;
      this.m_groundAnchor2.y = def.groundAnchorB.y - this.m_ground.m_xf.position.y;
      this.m_localAnchor1.SetV(def.localAnchorA);
      this.m_localAnchor2.SetV(def.localAnchorB);
      this.m_ratio = def.ratio;
      this.m_constant = def.lengthA + this.m_ratio * def.lengthB;
      this.m_maxLength1 = b2Math.Min(def.maxLengthA, this.m_constant - this.m_ratio * b2PulleyJoint.b2_minPulleyLength);
      this.m_maxLength2 = b2Math.Min(def.maxLengthB, (this.m_constant - b2PulleyJoint.b2_minPulleyLength) / this.m_ratio);
      this.m_impulse = 0.0;
      this.m_limitImpulse1 = 0.0;
      this.m_limitImpulse2 = 0.0;
   }
   b2PulleyJoint.prototype.InitVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
      var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var p1X = bA.m_sweep.c.x + r1X;
      var p1Y = bA.m_sweep.c.y + r1Y;
      var p2X = bB.m_sweep.c.x + r2X;
      var p2Y = bB.m_sweep.c.y + r2Y;
      var s1X = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;
      var s1Y = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;
      var s2X = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;
      var s2Y = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;
      this.m_u1.Set(p1X - s1X, p1Y - s1Y);
      this.m_u2.Set(p2X - s2X, p2Y - s2Y);
      var length1 = this.m_u1.Length();
      var length2 = this.m_u2.Length();
      if (length1 > b2Settings.b2_linearSlop) {
         this.m_u1.Multiply(1.0 / length1);
      }
      else {
         this.m_u1.SetZero();
      }
      if (length2 > b2Settings.b2_linearSlop) {
         this.m_u2.Multiply(1.0 / length2);
      }
      else {
         this.m_u2.SetZero();
      }
      var C = this.m_constant - length1 - this.m_ratio * length2;
      if (C > 0.0) {
         this.m_state = b2Joint.e_inactiveLimit;
         this.m_impulse = 0.0;
      }
      else {
         this.m_state = b2Joint.e_atUpperLimit;
      }
      if (length1 < this.m_maxLength1) {
         this.m_limitState1 = b2Joint.e_inactiveLimit;
         this.m_limitImpulse1 = 0.0;
      }
      else {
         this.m_limitState1 = b2Joint.e_atUpperLimit;
      }
      if (length2 < this.m_maxLength2) {
         this.m_limitState2 = b2Joint.e_inactiveLimit;
         this.m_limitImpulse2 = 0.0;
      }
      else {
         this.m_limitState2 = b2Joint.e_atUpperLimit;
      }
      var cr1u1 = r1X * this.m_u1.y - r1Y * this.m_u1.x;
      var cr2u2 = r2X * this.m_u2.y - r2Y * this.m_u2.x;
      this.m_limitMass1 = bA.m_invMass + bA.m_invI * cr1u1 * cr1u1;
      this.m_limitMass2 = bB.m_invMass + bB.m_invI * cr2u2 * cr2u2;
      this.m_pulleyMass = this.m_limitMass1 + this.m_ratio * this.m_ratio * this.m_limitMass2;
      this.m_limitMass1 = 1.0 / this.m_limitMass1;
      this.m_limitMass2 = 1.0 / this.m_limitMass2;
      this.m_pulleyMass = 1.0 / this.m_pulleyMass;
      if (step.warmStarting) {
         this.m_impulse *= step.dtRatio;
         this.m_limitImpulse1 *= step.dtRatio;
         this.m_limitImpulse2 *= step.dtRatio;
         var P1X = ((-this.m_impulse) - this.m_limitImpulse1) * this.m_u1.x;
         var P1Y = ((-this.m_impulse) - this.m_limitImpulse1) * this.m_u1.y;
         var P2X = ((-this.m_ratio * this.m_impulse) - this.m_limitImpulse2) * this.m_u2.x;
         var P2Y = ((-this.m_ratio * this.m_impulse) - this.m_limitImpulse2) * this.m_u2.y;
         bA.m_linearVelocity.x += bA.m_invMass * P1X;
         bA.m_linearVelocity.y += bA.m_invMass * P1Y;
         bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);
         bB.m_linearVelocity.x += bB.m_invMass * P2X;
         bB.m_linearVelocity.y += bB.m_invMass * P2Y;
         bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);
      }
      else {
         this.m_impulse = 0.0;
         this.m_limitImpulse1 = 0.0;
         this.m_limitImpulse2 = 0.0;
      }
   }
   b2PulleyJoint.prototype.SolveVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
      var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var v1X = 0;
      var v1Y = 0;
      var v2X = 0;
      var v2Y = 0;
      var P1X = 0;
      var P1Y = 0;
      var P2X = 0;
      var P2Y = 0;
      var Cdot = 0;
      var impulse = 0;
      var oldImpulse = 0;
      if (this.m_state == b2Joint.e_atUpperLimit) {
         v1X = bA.m_linearVelocity.x + ((-bA.m_angularVelocity * r1Y));
         v1Y = bA.m_linearVelocity.y + (bA.m_angularVelocity * r1X);
         v2X = bB.m_linearVelocity.x + ((-bB.m_angularVelocity * r2Y));
         v2Y = bB.m_linearVelocity.y + (bB.m_angularVelocity * r2X);
         Cdot = (-(this.m_u1.x * v1X + this.m_u1.y * v1Y)) - this.m_ratio * (this.m_u2.x * v2X + this.m_u2.y * v2Y);
         impulse = this.m_pulleyMass * ((-Cdot));
         oldImpulse = this.m_impulse;
         this.m_impulse = b2Math.Max(0.0, this.m_impulse + impulse);
         impulse = this.m_impulse - oldImpulse;
         P1X = (-impulse * this.m_u1.x);
         P1Y = (-impulse * this.m_u1.y);
         P2X = (-this.m_ratio * impulse * this.m_u2.x);
         P2Y = (-this.m_ratio * impulse * this.m_u2.y);
         bA.m_linearVelocity.x += bA.m_invMass * P1X;
         bA.m_linearVelocity.y += bA.m_invMass * P1Y;
         bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);
         bB.m_linearVelocity.x += bB.m_invMass * P2X;
         bB.m_linearVelocity.y += bB.m_invMass * P2Y;
         bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);
      }
      if (this.m_limitState1 == b2Joint.e_atUpperLimit) {
         v1X = bA.m_linearVelocity.x + ((-bA.m_angularVelocity * r1Y));
         v1Y = bA.m_linearVelocity.y + (bA.m_angularVelocity * r1X);
         Cdot = (-(this.m_u1.x * v1X + this.m_u1.y * v1Y));
         impulse = (-this.m_limitMass1 * Cdot);
         oldImpulse = this.m_limitImpulse1;
         this.m_limitImpulse1 = b2Math.Max(0.0, this.m_limitImpulse1 + impulse);
         impulse = this.m_limitImpulse1 - oldImpulse;
         P1X = (-impulse * this.m_u1.x);
         P1Y = (-impulse * this.m_u1.y);
         bA.m_linearVelocity.x += bA.m_invMass * P1X;
         bA.m_linearVelocity.y += bA.m_invMass * P1Y;
         bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);
      }
      if (this.m_limitState2 == b2Joint.e_atUpperLimit) {
         v2X = bB.m_linearVelocity.x + ((-bB.m_angularVelocity * r2Y));
         v2Y = bB.m_linearVelocity.y + (bB.m_angularVelocity * r2X);
         Cdot = (-(this.m_u2.x * v2X + this.m_u2.y * v2Y));
         impulse = (-this.m_limitMass2 * Cdot);
         oldImpulse = this.m_limitImpulse2;
         this.m_limitImpulse2 = b2Math.Max(0.0, this.m_limitImpulse2 + impulse);
         impulse = this.m_limitImpulse2 - oldImpulse;
         P2X = (-impulse * this.m_u2.x);
         P2Y = (-impulse * this.m_u2.y);
         bB.m_linearVelocity.x += bB.m_invMass * P2X;
         bB.m_linearVelocity.y += bB.m_invMass * P2Y;
         bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);
      }
   }
   b2PulleyJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      var s1X = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;
      var s1Y = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;
      var s2X = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;
      var s2Y = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;
      var r1X = 0;
      var r1Y = 0;
      var r2X = 0;
      var r2Y = 0;
      var p1X = 0;
      var p1Y = 0;
      var p2X = 0;
      var p2Y = 0;
      var length1 = 0;
      var length2 = 0;
      var C = 0;
      var impulse = 0;
      var oldImpulse = 0;
      var oldLimitPositionImpulse = 0;
      var tX = 0;
      var linearError = 0.0;
      if (this.m_state == b2Joint.e_atUpperLimit) {
         tMat = bA.m_xf.R;
         r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
         r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
         r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
         r1X = tX;
         tMat = bB.m_xf.R;
         r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
         r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
         r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
         r2X = tX;
         p1X = bA.m_sweep.c.x + r1X;
         p1Y = bA.m_sweep.c.y + r1Y;
         p2X = bB.m_sweep.c.x + r2X;
         p2Y = bB.m_sweep.c.y + r2Y;
         this.m_u1.Set(p1X - s1X, p1Y - s1Y);
         this.m_u2.Set(p2X - s2X, p2Y - s2Y);
         length1 = this.m_u1.Length();
         length2 = this.m_u2.Length();
         if (length1 > b2Settings.b2_linearSlop) {
            this.m_u1.Multiply(1.0 / length1);
         }
         else {
            this.m_u1.SetZero();
         }
         if (length2 > b2Settings.b2_linearSlop) {
            this.m_u2.Multiply(1.0 / length2);
         }
         else {
            this.m_u2.SetZero();
         }
         C = this.m_constant - length1 - this.m_ratio * length2;
         linearError = b2Math.Max(linearError, (-C));
         C = b2Math.Clamp(C + b2Settings.b2_linearSlop, (-b2Settings.b2_maxLinearCorrection), 0.0);
         impulse = (-this.m_pulleyMass * C);
         p1X = (-impulse * this.m_u1.x);
         p1Y = (-impulse * this.m_u1.y);
         p2X = (-this.m_ratio * impulse * this.m_u2.x);
         p2Y = (-this.m_ratio * impulse * this.m_u2.y);
         bA.m_sweep.c.x += bA.m_invMass * p1X;
         bA.m_sweep.c.y += bA.m_invMass * p1Y;
         bA.m_sweep.a += bA.m_invI * (r1X * p1Y - r1Y * p1X);
         bB.m_sweep.c.x += bB.m_invMass * p2X;
         bB.m_sweep.c.y += bB.m_invMass * p2Y;
         bB.m_sweep.a += bB.m_invI * (r2X * p2Y - r2Y * p2X);
         bA.SynchronizeTransform();
         bB.SynchronizeTransform();
      }
      if (this.m_limitState1 == b2Joint.e_atUpperLimit) {
         tMat = bA.m_xf.R;
         r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
         r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
         r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
         r1X = tX;
         p1X = bA.m_sweep.c.x + r1X;
         p1Y = bA.m_sweep.c.y + r1Y;
         this.m_u1.Set(p1X - s1X, p1Y - s1Y);
         length1 = this.m_u1.Length();
         if (length1 > b2Settings.b2_linearSlop) {
            this.m_u1.x *= 1.0 / length1;
            this.m_u1.y *= 1.0 / length1;
         }
         else {
            this.m_u1.SetZero();
         }
         C = this.m_maxLength1 - length1;
         linearError = b2Math.Max(linearError, (-C));
         C = b2Math.Clamp(C + b2Settings.b2_linearSlop, (-b2Settings.b2_maxLinearCorrection), 0.0);
         impulse = (-this.m_limitMass1 * C);
         p1X = (-impulse * this.m_u1.x);
         p1Y = (-impulse * this.m_u1.y);
         bA.m_sweep.c.x += bA.m_invMass * p1X;
         bA.m_sweep.c.y += bA.m_invMass * p1Y;
         bA.m_sweep.a += bA.m_invI * (r1X * p1Y - r1Y * p1X);
         bA.SynchronizeTransform();
      }
      if (this.m_limitState2 == b2Joint.e_atUpperLimit) {
         tMat = bB.m_xf.R;
         r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
         r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
         r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
         r2X = tX;
         p2X = bB.m_sweep.c.x + r2X;
         p2Y = bB.m_sweep.c.y + r2Y;
         this.m_u2.Set(p2X - s2X, p2Y - s2Y);
         length2 = this.m_u2.Length();
         if (length2 > b2Settings.b2_linearSlop) {
            this.m_u2.x *= 1.0 / length2;
            this.m_u2.y *= 1.0 / length2;
         }
         else {
            this.m_u2.SetZero();
         }
         C = this.m_maxLength2 - length2;
         linearError = b2Math.Max(linearError, (-C));
         C = b2Math.Clamp(C + b2Settings.b2_linearSlop, (-b2Settings.b2_maxLinearCorrection), 0.0);
         impulse = (-this.m_limitMass2 * C);
         p2X = (-impulse * this.m_u2.x);
         p2Y = (-impulse * this.m_u2.y);
         bB.m_sweep.c.x += bB.m_invMass * p2X;
         bB.m_sweep.c.y += bB.m_invMass * p2Y;
         bB.m_sweep.a += bB.m_invI * (r2X * p2Y - r2Y * p2X);
         bB.SynchronizeTransform();
      }
      return linearError < b2Settings.b2_linearSlop;
   }
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.Joints.b2PulleyJoint.b2_minPulleyLength = 2.0;
   });
   Box2D.inherit(b2PulleyJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2PulleyJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2PulleyJointDef.b2PulleyJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.groundAnchorA = new b2Vec2();
      this.groundAnchorB = new b2Vec2();
      this.localAnchorA = new b2Vec2();
      this.localAnchorB = new b2Vec2();
   };
   b2PulleyJointDef.prototype.b2PulleyJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_pulleyJoint;
      this.groundAnchorA.Set((-1.0), 1.0);
      this.groundAnchorB.Set(1.0, 1.0);
      this.localAnchorA.Set((-1.0), 0.0);
      this.localAnchorB.Set(1.0, 0.0);
      this.lengthA = 0.0;
      this.maxLengthA = 0.0;
      this.lengthB = 0.0;
      this.maxLengthB = 0.0;
      this.ratio = 1.0;
      this.collideConnected = true;
   }
   b2PulleyJointDef.prototype.Initialize = function (bA, bB, gaA, gaB, anchorA, anchorB, r) {
      if (r === undefined) r = 0;
      this.bodyA = bA;
      this.bodyB = bB;
      this.groundAnchorA.SetV(gaA);
      this.groundAnchorB.SetV(gaB);
      this.localAnchorA = this.bodyA.GetLocalPoint(anchorA);
      this.localAnchorB = this.bodyB.GetLocalPoint(anchorB);
      var d1X = anchorA.x - gaA.x;
      var d1Y = anchorA.y - gaA.y;
      this.lengthA = Math.sqrt(d1X * d1X + d1Y * d1Y);
      var d2X = anchorB.x - gaB.x;
      var d2Y = anchorB.y - gaB.y;
      this.lengthB = Math.sqrt(d2X * d2X + d2Y * d2Y);
      this.ratio = r;
      var C = this.lengthA + this.ratio * this.lengthB;
      this.maxLengthA = C - this.ratio * b2PulleyJoint.b2_minPulleyLength;
      this.maxLengthB = (C - b2PulleyJoint.b2_minPulleyLength) / this.ratio;
   }
   Box2D.inherit(b2RevoluteJoint, Box2D.Dynamics.Joints.b2Joint);
   b2RevoluteJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2RevoluteJoint.b2RevoluteJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.K = new b2Mat22();
      this.K1 = new b2Mat22();
      this.K2 = new b2Mat22();
      this.K3 = new b2Mat22();
      this.impulse3 = new b2Vec3();
      this.impulse2 = new b2Vec2();
      this.reduced = new b2Vec2();
      this.m_localAnchor1 = new b2Vec2();
      this.m_localAnchor2 = new b2Vec2();
      this.m_impulse = new b2Vec3();
      this.m_mass = new b2Mat33();
   };
   b2RevoluteJoint.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
   }
   b2RevoluteJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
   }
   b2RevoluteJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * this.m_impulse.x, inv_dt * this.m_impulse.y);
   }
   b2RevoluteJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return inv_dt * this.m_impulse.z;
   }
   b2RevoluteJoint.prototype.GetJointAngle = function () {
      return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a - this.m_referenceAngle;
   }
   b2RevoluteJoint.prototype.GetJointSpeed = function () {
      return this.m_bodyB.m_angularVelocity - this.m_bodyA.m_angularVelocity;
   }
   b2RevoluteJoint.prototype.IsLimitEnabled = function () {
      return this.m_enableLimit;
   }
   b2RevoluteJoint.prototype.EnableLimit = function (flag) {
      this.m_enableLimit = flag;
   }
   b2RevoluteJoint.prototype.GetLowerLimit = function () {
      return this.m_lowerAngle;
   }
   b2RevoluteJoint.prototype.GetUpperLimit = function () {
      return this.m_upperAngle;
   }
   b2RevoluteJoint.prototype.SetLimits = function (lower, upper) {
      if (lower === undefined) lower = 0;
      if (upper === undefined) upper = 0;
      this.m_lowerAngle = lower;
      this.m_upperAngle = upper;
   }
   b2RevoluteJoint.prototype.IsMotorEnabled = function () {
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      return this.m_enableMotor;
   }
   b2RevoluteJoint.prototype.EnableMotor = function (flag) {
      this.m_enableMotor = flag;
   }
   b2RevoluteJoint.prototype.SetMotorSpeed = function (speed) {
      if (speed === undefined) speed = 0;
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_motorSpeed = speed;
   }
   b2RevoluteJoint.prototype.GetMotorSpeed = function () {
      return this.m_motorSpeed;
   }
   b2RevoluteJoint.prototype.SetMaxMotorTorque = function (torque) {
      if (torque === undefined) torque = 0;
      this.m_maxMotorTorque = torque;
   }
   b2RevoluteJoint.prototype.GetMotorTorque = function () {
      return this.m_maxMotorTorque;
   }
   b2RevoluteJoint.prototype.b2RevoluteJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      this.m_localAnchor1.SetV(def.localAnchorA);
      this.m_localAnchor2.SetV(def.localAnchorB);
      this.m_referenceAngle = def.referenceAngle;
      this.m_impulse.SetZero();
      this.m_motorImpulse = 0.0;
      this.m_lowerAngle = def.lowerAngle;
      this.m_upperAngle = def.upperAngle;
      this.m_maxMotorTorque = def.maxMotorTorque;
      this.m_motorSpeed = def.motorSpeed;
      this.m_enableLimit = def.enableLimit;
      this.m_enableMotor = def.enableMotor;
      this.m_limitState = b2Joint.e_inactiveLimit;
   }
   b2RevoluteJoint.prototype.InitVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      var tX = 0;
      if (this.m_enableMotor || this.m_enableLimit) {}
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var m1 = bA.m_invMass;
      var m2 = bB.m_invMass;
      var i1 = bA.m_invI;
      var i2 = bB.m_invI;
      this.m_mass.col1.x = m1 + m2 + r1Y * r1Y * i1 + r2Y * r2Y * i2;
      this.m_mass.col2.x = (-r1Y * r1X * i1) - r2Y * r2X * i2;
      this.m_mass.col3.x = (-r1Y * i1) - r2Y * i2;
      this.m_mass.col1.y = this.m_mass.col2.x;
      this.m_mass.col2.y = m1 + m2 + r1X * r1X * i1 + r2X * r2X * i2;
      this.m_mass.col3.y = r1X * i1 + r2X * i2;
      this.m_mass.col1.z = this.m_mass.col3.x;
      this.m_mass.col2.z = this.m_mass.col3.y;
      this.m_mass.col3.z = i1 + i2;
      this.m_motorMass = 1.0 / (i1 + i2);
      if (this.m_enableMotor == false) {
         this.m_motorImpulse = 0.0;
      }
      if (this.m_enableLimit) {
         var jointAngle = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;
         if (b2Math.Abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * b2Settings.b2_angularSlop) {
            this.m_limitState = b2Joint.e_equalLimits;
         }
         else if (jointAngle <= this.m_lowerAngle) {
            if (this.m_limitState != b2Joint.e_atLowerLimit) {
               this.m_impulse.z = 0.0;
            }
            this.m_limitState = b2Joint.e_atLowerLimit;
         }
         else if (jointAngle >= this.m_upperAngle) {
            if (this.m_limitState != b2Joint.e_atUpperLimit) {
               this.m_impulse.z = 0.0;
            }
            this.m_limitState = b2Joint.e_atUpperLimit;
         }
         else {
            this.m_limitState = b2Joint.e_inactiveLimit;
            this.m_impulse.z = 0.0;
         }
      }
      else {
         this.m_limitState = b2Joint.e_inactiveLimit;
      }
      if (step.warmStarting) {
         this.m_impulse.x *= step.dtRatio;
         this.m_impulse.y *= step.dtRatio;
         this.m_motorImpulse *= step.dtRatio;
         var PX = this.m_impulse.x;
         var PY = this.m_impulse.y;
         bA.m_linearVelocity.x -= m1 * PX;
         bA.m_linearVelocity.y -= m1 * PY;
         bA.m_angularVelocity -= i1 * ((r1X * PY - r1Y * PX) + this.m_motorImpulse + this.m_impulse.z);
         bB.m_linearVelocity.x += m2 * PX;
         bB.m_linearVelocity.y += m2 * PY;
         bB.m_angularVelocity += i2 * ((r2X * PY - r2Y * PX) + this.m_motorImpulse + this.m_impulse.z);
      }
      else {
         this.m_impulse.SetZero();
         this.m_motorImpulse = 0.0;
      }
   }
   b2RevoluteJoint.prototype.SolveVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      var tX = 0;
      var newImpulse = 0;
      var r1X = 0;
      var r1Y = 0;
      var r2X = 0;
      var r2Y = 0;
      var v1 = bA.m_linearVelocity;
      var w1 = bA.m_angularVelocity;
      var v2 = bB.m_linearVelocity;
      var w2 = bB.m_angularVelocity;
      var m1 = bA.m_invMass;
      var m2 = bB.m_invMass;
      var i1 = bA.m_invI;
      var i2 = bB.m_invI;
      if (this.m_enableMotor && this.m_limitState != b2Joint.e_equalLimits) {
         var Cdot = w2 - w1 - this.m_motorSpeed;
         var impulse = this.m_motorMass * ((-Cdot));
         var oldImpulse = this.m_motorImpulse;
         var maxImpulse = step.dt * this.m_maxMotorTorque;
         this.m_motorImpulse = b2Math.Clamp(this.m_motorImpulse + impulse, (-maxImpulse), maxImpulse);
         impulse = this.m_motorImpulse - oldImpulse;
         w1 -= i1 * impulse;
         w2 += i2 * impulse;
      }
      if (this.m_enableLimit && this.m_limitState != b2Joint.e_inactiveLimit) {
         tMat = bA.m_xf.R;
         r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
         r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
         r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
         r1X = tX;
         tMat = bB.m_xf.R;
         r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
         r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
         r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
         r2X = tX;
         var Cdot1X = v2.x + ((-w2 * r2Y)) - v1.x - ((-w1 * r1Y));
         var Cdot1Y = v2.y + (w2 * r2X) - v1.y - (w1 * r1X);
         var Cdot2 = w2 - w1;
         this.m_mass.Solve33(this.impulse3, (-Cdot1X), (-Cdot1Y), (-Cdot2));
         if (this.m_limitState == b2Joint.e_equalLimits) {
            this.m_impulse.Add(this.impulse3);
         }
         else if (this.m_limitState == b2Joint.e_atLowerLimit) {
            newImpulse = this.m_impulse.z + this.impulse3.z;
            if (newImpulse < 0.0) {
               this.m_mass.Solve22(this.reduced, (-Cdot1X), (-Cdot1Y));
               this.impulse3.x = this.reduced.x;
               this.impulse3.y = this.reduced.y;
               this.impulse3.z = (-this.m_impulse.z);
               this.m_impulse.x += this.reduced.x;
               this.m_impulse.y += this.reduced.y;
               this.m_impulse.z = 0.0;
            }
         }
         else if (this.m_limitState == b2Joint.e_atUpperLimit) {
            newImpulse = this.m_impulse.z + this.impulse3.z;
            if (newImpulse > 0.0) {
               this.m_mass.Solve22(this.reduced, (-Cdot1X), (-Cdot1Y));
               this.impulse3.x = this.reduced.x;
               this.impulse3.y = this.reduced.y;
               this.impulse3.z = (-this.m_impulse.z);
               this.m_impulse.x += this.reduced.x;
               this.m_impulse.y += this.reduced.y;
               this.m_impulse.z = 0.0;
            }
         }
         v1.x -= m1 * this.impulse3.x;
         v1.y -= m1 * this.impulse3.y;
         w1 -= i1 * (r1X * this.impulse3.y - r1Y * this.impulse3.x + this.impulse3.z);
         v2.x += m2 * this.impulse3.x;
         v2.y += m2 * this.impulse3.y;
         w2 += i2 * (r2X * this.impulse3.y - r2Y * this.impulse3.x + this.impulse3.z);
      }
      else {
         tMat = bA.m_xf.R;
         r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
         r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
         r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
         r1X = tX;
         tMat = bB.m_xf.R;
         r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
         r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
         r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
         r2X = tX;
         var CdotX = v2.x + ((-w2 * r2Y)) - v1.x - ((-w1 * r1Y));
         var CdotY = v2.y + (w2 * r2X) - v1.y - (w1 * r1X);
         this.m_mass.Solve22(this.impulse2, (-CdotX), (-CdotY));
         this.m_impulse.x += this.impulse2.x;
         this.m_impulse.y += this.impulse2.y;
         v1.x -= m1 * this.impulse2.x;
         v1.y -= m1 * this.impulse2.y;
         w1 -= i1 * (r1X * this.impulse2.y - r1Y * this.impulse2.x);
         v2.x += m2 * this.impulse2.x;
         v2.y += m2 * this.impulse2.y;
         w2 += i2 * (r2X * this.impulse2.y - r2Y * this.impulse2.x);
      }
      bA.m_linearVelocity.SetV(v1);
      bA.m_angularVelocity = w1;
      bB.m_linearVelocity.SetV(v2);
      bB.m_angularVelocity = w2;
   }
   b2RevoluteJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      var oldLimitImpulse = 0;
      var C = 0;
      var tMat;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var angularError = 0.0;
      var positionError = 0.0;
      var tX = 0;
      var impulseX = 0;
      var impulseY = 0;
      if (this.m_enableLimit && this.m_limitState != b2Joint.e_inactiveLimit) {
         var angle = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;
         var limitImpulse = 0.0;
         if (this.m_limitState == b2Joint.e_equalLimits) {
            C = b2Math.Clamp(angle - this.m_lowerAngle, (-b2Settings.b2_maxAngularCorrection), b2Settings.b2_maxAngularCorrection);
            limitImpulse = (-this.m_motorMass * C);
            angularError = b2Math.Abs(C);
         }
         else if (this.m_limitState == b2Joint.e_atLowerLimit) {
            C = angle - this.m_lowerAngle;
            angularError = (-C);
            C = b2Math.Clamp(C + b2Settings.b2_angularSlop, (-b2Settings.b2_maxAngularCorrection), 0.0);
            limitImpulse = (-this.m_motorMass * C);
         }
         else if (this.m_limitState == b2Joint.e_atUpperLimit) {
            C = angle - this.m_upperAngle;
            angularError = C;
            C = b2Math.Clamp(C - b2Settings.b2_angularSlop, 0.0, b2Settings.b2_maxAngularCorrection);
            limitImpulse = (-this.m_motorMass * C);
         }
         bA.m_sweep.a -= bA.m_invI * limitImpulse;
         bB.m_sweep.a += bB.m_invI * limitImpulse;
         bA.SynchronizeTransform();
         bB.SynchronizeTransform();
      } {
         tMat = bA.m_xf.R;
         var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
         var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
         r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
         r1X = tX;
         tMat = bB.m_xf.R;
         var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
         var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
         r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
         r2X = tX;
         var CX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
         var CY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
         var CLengthSquared = CX * CX + CY * CY;
         var CLength = Math.sqrt(CLengthSquared);
         positionError = CLength;
         var invMass1 = bA.m_invMass;
         var invMass2 = bB.m_invMass;
         var invI1 = bA.m_invI;
         var invI2 = bB.m_invI;
         var k_allowedStretch = 10.0 * b2Settings.b2_linearSlop;
         if (CLengthSquared > k_allowedStretch * k_allowedStretch) {
            var uX = CX / CLength;
            var uY = CY / CLength;
            var k = invMass1 + invMass2;
            var m = 1.0 / k;
            impulseX = m * ((-CX));
            impulseY = m * ((-CY));
            var k_beta = 0.5;
            bA.m_sweep.c.x -= k_beta * invMass1 * impulseX;
            bA.m_sweep.c.y -= k_beta * invMass1 * impulseY;
            bB.m_sweep.c.x += k_beta * invMass2 * impulseX;
            bB.m_sweep.c.y += k_beta * invMass2 * impulseY;
            CX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
            CY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
         }
         this.K1.col1.x = invMass1 + invMass2;
         this.K1.col2.x = 0.0;
         this.K1.col1.y = 0.0;
         this.K1.col2.y = invMass1 + invMass2;
         this.K2.col1.x = invI1 * r1Y * r1Y;
         this.K2.col2.x = (-invI1 * r1X * r1Y);
         this.K2.col1.y = (-invI1 * r1X * r1Y);
         this.K2.col2.y = invI1 * r1X * r1X;
         this.K3.col1.x = invI2 * r2Y * r2Y;
         this.K3.col2.x = (-invI2 * r2X * r2Y);
         this.K3.col1.y = (-invI2 * r2X * r2Y);
         this.K3.col2.y = invI2 * r2X * r2X;
         this.K.SetM(this.K1);
         this.K.AddM(this.K2);
         this.K.AddM(this.K3);
         this.K.Solve(b2RevoluteJoint.tImpulse, (-CX), (-CY));
         impulseX = b2RevoluteJoint.tImpulse.x;
         impulseY = b2RevoluteJoint.tImpulse.y;
         bA.m_sweep.c.x -= bA.m_invMass * impulseX;
         bA.m_sweep.c.y -= bA.m_invMass * impulseY;
         bA.m_sweep.a -= bA.m_invI * (r1X * impulseY - r1Y * impulseX);
         bB.m_sweep.c.x += bB.m_invMass * impulseX;
         bB.m_sweep.c.y += bB.m_invMass * impulseY;
         bB.m_sweep.a += bB.m_invI * (r2X * impulseY - r2Y * impulseX);
         bA.SynchronizeTransform();
         bB.SynchronizeTransform();
      }
      return positionError <= b2Settings.b2_linearSlop && angularError <= b2Settings.b2_angularSlop;
   }
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.Joints.b2RevoluteJoint.tImpulse = new b2Vec2();
   });
   Box2D.inherit(b2RevoluteJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2RevoluteJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2RevoluteJointDef.b2RevoluteJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.localAnchorA = new b2Vec2();
      this.localAnchorB = new b2Vec2();
   };
   b2RevoluteJointDef.prototype.b2RevoluteJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_revoluteJoint;
      this.localAnchorA.Set(0.0, 0.0);
      this.localAnchorB.Set(0.0, 0.0);
      this.referenceAngle = 0.0;
      this.lowerAngle = 0.0;
      this.upperAngle = 0.0;
      this.maxMotorTorque = 0.0;
      this.motorSpeed = 0.0;
      this.enableLimit = false;
      this.enableMotor = false;
   }
   b2RevoluteJointDef.prototype.Initialize = function (bA, bB, anchor) {
      this.bodyA = bA;
      this.bodyB = bB;
      this.localAnchorA = this.bodyA.GetLocalPoint(anchor);
      this.localAnchorB = this.bodyB.GetLocalPoint(anchor);
      this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
   }
   Box2D.inherit(b2WeldJoint, Box2D.Dynamics.Joints.b2Joint);
   b2WeldJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2WeldJoint.b2WeldJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_localAnchorA = new b2Vec2();
      this.m_localAnchorB = new b2Vec2();
      this.m_impulse = new b2Vec3();
      this.m_mass = new b2Mat33();
   };
   b2WeldJoint.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);
   }
   b2WeldJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);
   }
   b2WeldJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * this.m_impulse.x, inv_dt * this.m_impulse.y);
   }
   b2WeldJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return inv_dt * this.m_impulse.z;
   }
   b2WeldJoint.prototype.b2WeldJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      this.m_localAnchorA.SetV(def.localAnchorA);
      this.m_localAnchorB.SetV(def.localAnchorB);
      this.m_referenceAngle = def.referenceAngle;
      this.m_impulse.SetZero();
      this.m_mass = new b2Mat33();
   }
   b2WeldJoint.prototype.InitVelocityConstraints = function (step) {
      var tMat;
      var tX = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      tMat = bA.m_xf.R;
      var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
      var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
      rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
      rAX = tX;
      tMat = bB.m_xf.R;
      var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
      var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
      rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
      rBX = tX;
      var mA = bA.m_invMass;
      var mB = bB.m_invMass;
      var iA = bA.m_invI;
      var iB = bB.m_invI;
      this.m_mass.col1.x = mA + mB + rAY * rAY * iA + rBY * rBY * iB;
      this.m_mass.col2.x = (-rAY * rAX * iA) - rBY * rBX * iB;
      this.m_mass.col3.x = (-rAY * iA) - rBY * iB;
      this.m_mass.col1.y = this.m_mass.col2.x;
      this.m_mass.col2.y = mA + mB + rAX * rAX * iA + rBX * rBX * iB;
      this.m_mass.col3.y = rAX * iA + rBX * iB;
      this.m_mass.col1.z = this.m_mass.col3.x;
      this.m_mass.col2.z = this.m_mass.col3.y;
      this.m_mass.col3.z = iA + iB;
      if (step.warmStarting) {
         this.m_impulse.x *= step.dtRatio;
         this.m_impulse.y *= step.dtRatio;
         this.m_impulse.z *= step.dtRatio;
         bA.m_linearVelocity.x -= mA * this.m_impulse.x;
         bA.m_linearVelocity.y -= mA * this.m_impulse.y;
         bA.m_angularVelocity -= iA * (rAX * this.m_impulse.y - rAY * this.m_impulse.x + this.m_impulse.z);
         bB.m_linearVelocity.x += mB * this.m_impulse.x;
         bB.m_linearVelocity.y += mB * this.m_impulse.y;
         bB.m_angularVelocity += iB * (rBX * this.m_impulse.y - rBY * this.m_impulse.x + this.m_impulse.z);
      }
      else {
         this.m_impulse.SetZero();
      }
   }
   b2WeldJoint.prototype.SolveVelocityConstraints = function (step) {
      var tMat;
      var tX = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var vA = bA.m_linearVelocity;
      var wA = bA.m_angularVelocity;
      var vB = bB.m_linearVelocity;
      var wB = bB.m_angularVelocity;
      var mA = bA.m_invMass;
      var mB = bB.m_invMass;
      var iA = bA.m_invI;
      var iB = bB.m_invI;
      tMat = bA.m_xf.R;
      var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
      var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
      rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
      rAX = tX;
      tMat = bB.m_xf.R;
      var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
      var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
      rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
      rBX = tX;
      var Cdot1X = vB.x - wB * rBY - vA.x + wA * rAY;
      var Cdot1Y = vB.y + wB * rBX - vA.y - wA * rAX;
      var Cdot2 = wB - wA;
      var impulse = new b2Vec3();
      this.m_mass.Solve33(impulse, (-Cdot1X), (-Cdot1Y), (-Cdot2));
      this.m_impulse.Add(impulse);
      vA.x -= mA * impulse.x;
      vA.y -= mA * impulse.y;
      wA -= iA * (rAX * impulse.y - rAY * impulse.x + impulse.z);
      vB.x += mB * impulse.x;
      vB.y += mB * impulse.y;
      wB += iB * (rBX * impulse.y - rBY * impulse.x + impulse.z);
      bA.m_angularVelocity = wA;
      bB.m_angularVelocity = wB;
   }
   b2WeldJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      var tMat;
      var tX = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      tMat = bA.m_xf.R;
      var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
      var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
      rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
      rAX = tX;
      tMat = bB.m_xf.R;
      var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
      var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
      rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
      rBX = tX;
      var mA = bA.m_invMass;
      var mB = bB.m_invMass;
      var iA = bA.m_invI;
      var iB = bB.m_invI;
      var C1X = bB.m_sweep.c.x + rBX - bA.m_sweep.c.x - rAX;
      var C1Y = bB.m_sweep.c.y + rBY - bA.m_sweep.c.y - rAY;
      var C2 = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;
      var k_allowedStretch = 10.0 * b2Settings.b2_linearSlop;
      var positionError = Math.sqrt(C1X * C1X + C1Y * C1Y);
      var angularError = b2Math.Abs(C2);
      if (positionError > k_allowedStretch) {
         iA *= 1.0;
         iB *= 1.0;
      }
      this.m_mass.col1.x = mA + mB + rAY * rAY * iA + rBY * rBY * iB;
      this.m_mass.col2.x = (-rAY * rAX * iA) - rBY * rBX * iB;
      this.m_mass.col3.x = (-rAY * iA) - rBY * iB;
      this.m_mass.col1.y = this.m_mass.col2.x;
      this.m_mass.col2.y = mA + mB + rAX * rAX * iA + rBX * rBX * iB;
      this.m_mass.col3.y = rAX * iA + rBX * iB;
      this.m_mass.col1.z = this.m_mass.col3.x;
      this.m_mass.col2.z = this.m_mass.col3.y;
      this.m_mass.col3.z = iA + iB;
      var impulse = new b2Vec3();
      this.m_mass.Solve33(impulse, (-C1X), (-C1Y), (-C2));
      bA.m_sweep.c.x -= mA * impulse.x;
      bA.m_sweep.c.y -= mA * impulse.y;
      bA.m_sweep.a -= iA * (rAX * impulse.y - rAY * impulse.x + impulse.z);
      bB.m_sweep.c.x += mB * impulse.x;
      bB.m_sweep.c.y += mB * impulse.y;
      bB.m_sweep.a += iB * (rBX * impulse.y - rBY * impulse.x + impulse.z);
      bA.SynchronizeTransform();
      bB.SynchronizeTransform();
      return positionError <= b2Settings.b2_linearSlop && angularError <= b2Settings.b2_angularSlop;
   }
   Box2D.inherit(b2WeldJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2WeldJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2WeldJointDef.b2WeldJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.localAnchorA = new b2Vec2();
      this.localAnchorB = new b2Vec2();
   };
   b2WeldJointDef.prototype.b2WeldJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_weldJoint;
      this.referenceAngle = 0.0;
   }
   b2WeldJointDef.prototype.Initialize = function (bA, bB, anchor) {
      this.bodyA = bA;
      this.bodyB = bB;
      this.localAnchorA.SetV(this.bodyA.GetLocalPoint(anchor));
      this.localAnchorB.SetV(this.bodyB.GetLocalPoint(anchor));
      this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
   }
})();
(function () {
   var b2DebugDraw = Box2D.Dynamics.b2DebugDraw;
   b2DebugDraw.b2DebugDraw = function () {
      this.m_drawScale = 1.0;
      this.m_lineThickness = 1.0;
      this.m_alpha = 1.0;
      this.m_fillAlpha = 1.0;
      this.m_xformScale = 1.0;
      var __this = this;
      //#WORKAROUND
      this.m_sprite = {
         graphics: {
            clear: function () {
               __this.m_ctx.clearRect(0, 0, __this.m_ctx.canvas.width, __this.m_ctx.canvas.height)
            }
         }
      };
   };
   b2DebugDraw.prototype._color = function (color, alpha) {
      return "rgba(" + ((color & 0xFF0000) >> 16) + "," + ((color & 0xFF00) >> 8) + "," + (color & 0xFF) + "," + alpha + ")";
   };
   b2DebugDraw.prototype.b2DebugDraw = function () {
      this.m_drawFlags = 0;
   };
   b2DebugDraw.prototype.SetFlags = function (flags) {
      if (flags === undefined) flags = 0;
      this.m_drawFlags = flags;
   };
   b2DebugDraw.prototype.GetFlags = function () {
      return this.m_drawFlags;
   };
   b2DebugDraw.prototype.AppendFlags = function (flags) {
      if (flags === undefined) flags = 0;
      this.m_drawFlags |= flags;
   };
   b2DebugDraw.prototype.ClearFlags = function (flags) {
      if (flags === undefined) flags = 0;
      this.m_drawFlags &= ~flags;
   };
   b2DebugDraw.prototype.SetSprite = function (sprite) {
      this.m_ctx = sprite;
   };
   b2DebugDraw.prototype.GetSprite = function () {
      return this.m_ctx;
   };
   b2DebugDraw.prototype.SetDrawScale = function (drawScale) {
      if (drawScale === undefined) drawScale = 0;
      this.m_drawScale = drawScale;
   };
   b2DebugDraw.prototype.GetDrawScale = function () {
      return this.m_drawScale;
   };
   b2DebugDraw.prototype.SetLineThickness = function (lineThickness) {
      if (lineThickness === undefined) lineThickness = 0;
      this.m_lineThickness = lineThickness;
      this.m_ctx.strokeWidth = lineThickness;
   };
   b2DebugDraw.prototype.GetLineThickness = function () {
      return this.m_lineThickness;
   };
   b2DebugDraw.prototype.SetAlpha = function (alpha) {
      if (alpha === undefined) alpha = 0;
      this.m_alpha = alpha;
   };
   b2DebugDraw.prototype.GetAlpha = function () {
      return this.m_alpha;
   };
   b2DebugDraw.prototype.SetFillAlpha = function (alpha) {
      if (alpha === undefined) alpha = 0;
      this.m_fillAlpha = alpha;
   };
   b2DebugDraw.prototype.GetFillAlpha = function () {
      return this.m_fillAlpha;
   };
   b2DebugDraw.prototype.SetXFormScale = function (xformScale) {
      if (xformScale === undefined) xformScale = 0;
      this.m_xformScale = xformScale;
   };
   b2DebugDraw.prototype.GetXFormScale = function () {
      return this.m_xformScale;
   };
   b2DebugDraw.prototype.DrawPolygon = function (vertices, vertexCount, color) {
      if (!vertexCount) return;
      var s = this.m_ctx;
      var drawScale = this.m_drawScale;
      s.beginPath();
      s.strokeStyle = this._color(color.color, this.m_alpha);
      s.moveTo(vertices[0].x * drawScale, vertices[0].y * drawScale);
      for (var i = 1; i < vertexCount; i++) {
         s.lineTo(vertices[i].x * drawScale, vertices[i].y * drawScale);
      }
      s.lineTo(vertices[0].x * drawScale, vertices[0].y * drawScale);
      s.closePath();
      s.stroke();
   };
   b2DebugDraw.prototype.DrawSolidPolygon = function (vertices, vertexCount, color) {
      if (!vertexCount) return;
      var s = this.m_ctx;
      var drawScale = this.m_drawScale;
      s.beginPath();
      s.strokeStyle = this._color(color.color, this.m_alpha);
      s.fillStyle = this._color(color.color, this.m_fillAlpha);
      s.moveTo(vertices[0].x * drawScale, vertices[0].y * drawScale);
      for (var i = 1; i < vertexCount; i++) {
         s.lineTo(vertices[i].x * drawScale, vertices[i].y * drawScale);
      }
      s.lineTo(vertices[0].x * drawScale, vertices[0].y * drawScale);
      s.closePath();
      s.fill();
      s.stroke();
   };
   b2DebugDraw.prototype.DrawCircle = function (center, radius, color) {
      if (!radius) return;
      var s = this.m_ctx;
      var drawScale = this.m_drawScale;
      s.beginPath();
      s.strokeStyle = this._color(color.color, this.m_alpha);
      s.arc(center.x * drawScale, center.y * drawScale, radius * drawScale, 0, Math.PI * 2, true);
      s.closePath();
      s.stroke();
   };
   b2DebugDraw.prototype.DrawSolidCircle = function (center, radius, axis, color) {
      if (!radius) return;
      var s = this.m_ctx,
         drawScale = this.m_drawScale,
         cx = center.x * drawScale,
         cy = center.y * drawScale;
      s.moveTo(0, 0);
      s.beginPath();
      s.strokeStyle = this._color(color.color, this.m_alpha);
      s.fillStyle = this._color(color.color, this.m_fillAlpha);
      s.arc(cx, cy, radius * drawScale, 0, Math.PI * 2, true);
      s.moveTo(cx, cy);
      s.lineTo((center.x + axis.x * radius) * drawScale, (center.y + axis.y * radius) * drawScale);
      s.closePath();
      s.fill();
      s.stroke();
   };
   b2DebugDraw.prototype.DrawSegment = function (p1, p2, color) {
      var s = this.m_ctx,
         drawScale = this.m_drawScale;
      s.strokeStyle = this._color(color.color, this.m_alpha);
      s.beginPath();
      s.moveTo(p1.x * drawScale, p1.y * drawScale);
      s.lineTo(p2.x * drawScale, p2.y * drawScale);
      s.closePath();
      s.stroke();
   };
   b2DebugDraw.prototype.DrawTransform = function (xf) {
      var s = this.m_ctx,
         drawScale = this.m_drawScale;
      s.beginPath();
      s.strokeStyle = this._color(0xff0000, this.m_alpha);
      s.moveTo(xf.position.x * drawScale, xf.position.y * drawScale);
      s.lineTo((xf.position.x + this.m_xformScale * xf.R.col1.x) * drawScale, (xf.position.y + this.m_xformScale * xf.R.col1.y) * drawScale);

      s.strokeStyle = this._color(0xff00, this.m_alpha);
      s.moveTo(xf.position.x * drawScale, xf.position.y * drawScale);
      s.lineTo((xf.position.x + this.m_xformScale * xf.R.col2.x) * drawScale, (xf.position.y + this.m_xformScale * xf.R.col2.y) * drawScale);
      s.closePath();
      s.stroke();
   };
})();
var i;
for (i = 0; i < Box2D.postDefs.length; ++i) Box2D.postDefs[i]();

module.exports = Box2D
},{}],38:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _EventDispatcher2 = require("./EventDispatcher");

var _EventDispatcher3 = _interopRequireDefault(_EventDispatcher2);

var _uiLayoutManager = require("./ui/LayoutManager");

var _uiLayoutManager2 = _interopRequireDefault(_uiLayoutManager);

var _Timer = require("./Timer");

var _Timer2 = _interopRequireDefault(_Timer);

var _Event = require("./Event");

var _Event2 = _interopRequireDefault(_Event);

var _TimerEvent = require("./TimerEvent");

var _TimerEvent2 = _interopRequireDefault(_TimerEvent);

var _DeviceMotionEvent = require("./DeviceMotionEvent");

var _DeviceMotionEvent2 = _interopRequireDefault(_DeviceMotionEvent);

var _DeviceOrientationEvent = require("./DeviceOrientationEvent");

var _DeviceOrientationEvent2 = _interopRequireDefault(_DeviceOrientationEvent);

var _FrameEvent = require("./FrameEvent");

var _FrameEvent2 = _interopRequireDefault(_FrameEvent);

var _FPSGraph = require("./FPSGraph");

var _inputGamepad = require("./input/Gamepad");

var _inputGamepad2 = _interopRequireDefault(_inputGamepad);

var _uiScreenOrientation = require("./ui/ScreenOrientation");

var _uiScreenOrientation2 = _interopRequireDefault(_uiScreenOrientation);

var _graphicsColor = require("./graphics/Color");

var _graphicsColor2 = _interopRequireDefault(_graphicsColor);

var _Size = require("./Size");

var _Size2 = _interopRequireDefault(_Size);

var _uiDisplaySurface = require("./ui/DisplaySurface");

var _uiDisplaySurface2 = _interopRequireDefault(_uiDisplaySurface);

var Application = (function (_EventDispatcher) {
	_inherits(Application, _EventDispatcher);

	function Application() {
		_classCallCheck(this, Application);

		_EventDispatcher.call(this);

		Application.Instance = this;

		this.startTime = window.getHighResTimer ? window.getHighResTimer() : new Date();
		this.isPaused = true;
		this.isAutoPaused = false;
		this.isFullSizeDisplaySurface = false;
		this.initialSurfaceWidth = null;
		this.initialSurfaceHeight = null;
		this.hasManagedDisplaySurface = false;
		this.hasPendingRender = false;
		this.hasLoaded = false;
		this.enableDirtyRegions = true;
		this.enableDebugVisuals = false;
		this.enableNativeGestures = true;
		this.enableDeviceOrientationEvents = false;
		this.enableDeviceMotionEvents = false;
		this.enableGamepadEvents = false;
		this.enableStatsGraph = false;
		this.enableAutoSuspendResume = true;
		this.fpsClock = new _FPSGraph.FPSClock();
		this.frameRate = 60;
		this.frameTimer = new _Timer2["default"](1000 / this.frameRate);
		this.frameTimer.addEventHandler(_TimerEvent2["default"].TICK, this.handleFrameTimerTick.asDelegate(this));
		this.mainSurfaceCanvas = null;
		this.newSurfaceCanvas = null;
		this.surfaces = [];
		this.cameras = [];

		_uiLayoutManager2["default"].getInstance().addEventHandler(_Event2["default"].LAYOUT_UPDATED, this.handleLayoutManagerUpdated.asDelegate(this));

		window.addEventListener("blur", this.handleBlur.asDelegate(this));
		window.addEventListener("focus", this.handleFocus.asDelegate(this));
		window.addEventListener("orientationchange", this.handleSystemOrientationChangeEvent.asDelegate(this));
		window.addEventListener("load", this.handleLoad.asDelegate(this));
		window.addEventListener("unload", this.handleUnload.asDelegate(this));

		if (document && document.readyState == "complete") {
			this.handleLoad(null);
		}
	}

	Application.prototype.getRunningTime = function getRunningTime() {
		if (window.getHighResTimer) return window.getHighResTimer() - this.startTime;

		return new Date() - this.startTime;
	};

	Application.prototype.getFrameRate = function getFrameRate() {
		return this.frameRate;
	};

	Application.prototype.setFrameRate = function setFrameRate(value) {
		if (this.frameRate != value) {
			this.frameRate = value;
			this.frameTimer.setInterval(1000 / this.frameRate);
		}
	};

	Application.prototype.getEnableDirtyRegions = function getEnableDirtyRegions() {
		return this.enableDirtyRegions;
	};

	Application.prototype.setEnableDirtyRegions = function setEnableDirtyRegions(value) {
		this.enableDirtyRegions = value;
	};

	Application.prototype.getEnableDebugVisuals = function getEnableDebugVisuals() {
		return this.enableDebugVisuals;
	};

	Application.prototype.setEnableDebugVisuals = function setEnableDebugVisuals(value) {
		this.enableDebugVisuals = value;
	};

	Application.prototype.getEnableAutoSuspendResume = function getEnableAutoSuspendResume() {
		return this.enableAutoSuspendResume;
	};

	Application.prototype.setEnableAutoSuspendResume = function setEnableAutoSuspendResume(value) {
		this.enableAutoSuspendResume = value;
	};

	Application.prototype.getEnableStatsGraph = function getEnableStatsGraph() {
		return this.enableStatsGraph;
	};

	Application.prototype.setEnableStatsGraph = function setEnableStatsGraph(value) {
		this.enableStatsGraph = value;

		for (var i = 0, len = this.getDisplaySurfaceCount(); i < len; ++i) {
			this.getDisplaySurfaceAt(i).invalidate();
		}
	};

	Application.prototype.getEnableGamepadEvents = function getEnableGamepadEvents() {
		return this.enableGamepadEvents;
	};

	Application.prototype.setEnableGamepadEvents = function setEnableGamepadEvents(value) {
		this.enableGamepadEvents = value;

		_inputGamepad2["default"].setEnableEvents(this.enableGamepadEvents);
	};

	Application.prototype.getEnableDeviceOrientationEvents = function getEnableDeviceOrientationEvents() {
		return this.enableDeviceOrientationEvents;
	};

	Application.prototype.setEnableDeviceOrientationEvents = function setEnableDeviceOrientationEvents(value) {
		if (this.enableDeviceOrientationEvents === value) return;

		this.enableDeviceOrientationEvents = value;

		if (this.enableDeviceOrientationEvents) {
			window.addEventListener("deviceorientation", this.handleSystemDeviceOrientationEvent.asDelegate(this));
		} else {
			window.removeEventListener("deviceorientation", this.handleSystemDeviceOrientationEvent.asDelegate(this));
		}
	};

	Application.prototype.getEnableDeviceMotionEvents = function getEnableDeviceMotionEvents() {
		return this.enableDeviceMotionEvents;
	};

	Application.prototype.setEnableDeviceMotionEvents = function setEnableDeviceMotionEvents(value) {
		if (this.enableDeviceMotionEvents == value) return;

		this.enableDeviceMotionEvents = value;

		if (this.enableDeviceMotionEvents) {
			window.addEventListener("devicemotion", this.handleSystemDeviceMotionEvent.asDelegate(this));
		} else {
			window.removeEventListener("devicemotion", this.handleSystemDeviceMotionEvent.asDelegate(this));
		}
	};

	// if true then the native gestures are enabled, like
	// zooming, scrolling, etc... in the web view, the
	// default is true.

	Application.prototype.getEnableNativeGestures = function getEnableNativeGestures() {
		return this.enableNativeGestures;
	};

	Application.prototype.setEnableNativeGestures = function setEnableNativeGestures(value) {
		this.enableNativeGestures = value;
	};

	Application.prototype.getOrientation = function getOrientation() {
		switch (window.orientation) {
			case -90:
				return _uiScreenOrientation2["default"].LandscapeRight;
			case 90:
				return _uiScreenOrientation2["default"].LandscapeLeft;
			case 180:
				return _uiScreenOrientation2["default"].PortraitUpsideDown;
		}

		return _uiScreenOrientation2["default"].Portrait;
	};

	Application.prototype.getBackgroundColor = function getBackgroundColor() {
		return _graphicsColor2["default"].fromCSSColor(document.body.style.backgroundColor);
	};

	Application.prototype.setBackgroundColor = function setBackgroundColor(color) {
		document.body.style.backgroundColor = color.toRGBAString();
	};

	Application.prototype.getIsPaused = function getIsPaused() {
		return this.isPaused;
	};

	Application.prototype.getSize = function getSize() {
		return new _Size2["default"](window.innerWidth, window.innerHeight);
	};

	Application.prototype.getCameraCount = function getCameraCount() {
		return this.cameras.length;
	};

	Application.prototype.getCameraAt = function getCameraAt(index) {
		if (index < this.cameras.length) {
			return this.cameras[index];
		}

		return null;
	};

	Application.prototype.addCamera = function addCamera(camera) {
		if (camera != null && !this.cameras.contains(camera)) {
			this.cameras.push(camera);
		}
	};

	Application.prototype.removeCamera = function removeCamera(camera) {
		this.cameras.remove(camera);
	};

	Application.prototype.clearCameras = function clearCameras() {
		this.cameras = [];
	};

	Application.prototype.getDisplaySurfaceCount = function getDisplaySurfaceCount() {
		return this.surfaces.length;
	};

	Application.prototype.getDisplaySurfaceAt = function getDisplaySurfaceAt(index) {
		return this.surfaces[index];
	};

	Application.prototype.addDisplaySurface = function addDisplaySurface(surface) {
		if (surface != null && !this.surfaces.contains(surface)) {
			this.surfaces.push(surface);
		}
	};

	Application.prototype.removeDisplaySurface = function removeDisplaySurface(surface) {
		this.surfaces.remove(surface);
	};

	Application.prototype.clearDisplaySurfaces = function clearDisplaySurfaces() {
		this.surfaces = [];
	};

	Application.prototype.createManagedDisplaySurface = function createManagedDisplaySurface() {
		if (!this.hasLoaded) throw new Error("Unable to create a managed display surface until the window has fully loaded.");

		// determine the initial size, if the initialSurface sizes are null then we must
		// need a full size display surface
		var width = this.initialSurfaceWidth || window.innerWidth;
		var height = this.initialSurfaceHeight || window.innerHeight;

		// create the html canvas element and add it to the document body
		this.mainSurfaceCanvas = document.createElement("canvas");
		this.mainSurfaceCanvas.id = "managed-display-surface";
		this.mainSurfaceCanvas.width = width;
		this.mainSurfaceCanvas.height = height;

		document.body.appendChild(this.mainSurfaceCanvas);

		// add the display surface
		this.addDisplaySurface(_uiDisplaySurface2["default"].fromCanvas(this.mainSurfaceCanvas));

		// finally make sure the body doesn't show any scrollbars and setup
		// a resize handler, this will recreate our surfaces so things render
		// nicely
		if (this.isFullSizeDisplaySurface) {
			//document.body.style.overflow = "hidden";
			window.addEventListener("resize", this.handleResize.asDelegate(this));
		}
	};

	Application.prototype.invalidate = function invalidate() {
		if (this.hasPendingRender) return;

		this.hasPendingRender = true;
		this.dispatchEvent(new _Event2["default"](_Event2["default"].RENDER));
	};

	Application.prototype.invalidateSurfacePositions = function invalidateSurfacePositions() {
		var len = this.getDisplaySurfaceCount();

		for (var i = 0; i < len; ++i) {
			this.getDisplaySurfaceAt(i).invalidatePositionOnScreen();
		}
	};

	Application.prototype.handleResize = function handleResize() {
		if (!this.hasLoaded || !this.isFullSizeDisplaySurface) return;

		// we have to recreate a new native canvas surface, otherwise
		// things would just stretch out and get out of wack if we
		// just resized it
		var surface = this.getDisplaySurfaceAt(0);
		var width = window.innerWidth;
		var height = window.innerHeight;

		this.newSurfaceCanvas = document.createElement("canvas");
		this.newSurfaceCanvas.id = this.mainSurfaceCanvas.id;
		this.newSurfaceCanvas.width = width;
		this.newSurfaceCanvas.height = height;

		surface.setNativeCanvas(this.newSurfaceCanvas);
	};

	Application.prototype.handleLoad = function handleLoad() {
		this.hasLoaded = true;

		// this application is managing it's own display surface
		if (this.hasManagedDisplaySurface) {
			this.createManagedDisplaySurface();
		}

		this.resume();
		this.dispatchEvent(new _Event2["default"](_Event2["default"].APPLICATION_START));
	};

	Application.prototype.handleUnload = function handleUnload() {
		this.hasLoaded = false;
		this.dispatchEvent(new _Event2["default"](_Event2["default"].APPLICATION_EXIT));
	};

	Application.prototype.handleBlur = function handleBlur(event) {
		if (this.getEnableAutoSuspendResume()) {
			this.isAutoPaused = true;
			this.pause();
		}
	};

	Application.prototype.handleFocus = function handleFocus(event) {
		// don't resume if the user has paused the application
		if (this.isPaused && !this.isAutoPaused) return;

		if (this.getEnableAutoSuspendResume()) {
			this.isAutoPaused = false;
			this.resume();
		}
	};

	Application.prototype.handleSystemOrientationChangeEvent = function handleSystemOrientationChangeEvent(event) {
		this.dispatchEvent(new _Event2["default"](_Event2["default"].UI_ORIENTATION_CHANGE));
	};

	Application.prototype.handleSystemDeviceMotionEvent = function handleSystemDeviceMotionEvent(event) {
		this.dispatchEvent(new _DeviceMotionEvent2["default"](_DeviceMotionEvent2["default"].CHANGE, event.acceleration, event.interval));
	};

	Application.prototype.handleSystemDeviceOrientationEvent = function handleSystemDeviceOrientationEvent(event) {
		this.dispatchEvent(new _DeviceOrientationEvent2["default"](_DeviceOrientationEvent2["default"].CHANGE, event.alpha, event.beta, event.gamma));
	};

	Application.prototype.handleFrameTimerTick = function handleFrameTimerTick(event) {

		this.fpsClock.update();

		//console.log(this.fpsClock.getAverageFPS());

		if (this.getIsPaused()) return;

		var needsRender = this.hasPendingRender;
		var i, len;
		var surface;
		var delta = event.getTickDelta();

		// clear pending flag
		this.hasPendingRender = false;

		// dispatch the enter event
		this.dispatchEvent(new _FrameEvent2["default"](_FrameEvent2["default"].ENTER, delta));

		// update cameras
		len = this.cameras.length;

		for (i = 0; i < len; ++i) {
			this.cameras[i].update(delta);
		}

		// render each surface and update any active AI
		len = this.surfaces.length;

		for (i = 0; i < len; ++i) {
			surface = this.surfaces[i];

			if (surface != null && surface.getIsRunning()) {
				// update physics
				surface.updatePhysics(delta);

				// update AI
				surface.updateAI(delta);

				// update all other
				surface.updateOther(delta);

				// do the full surface render
				//    - if the stats graph is enabled then we also need to perform a full render
				//      this will handle clearing the background and redrawing so the fps graph
				//      can be overlayed on top
				if (needsRender || this.getEnableStatsGraph()) {
					surface.performRender();
				}
			}
		}

		// notify listeners that rendering has completed
		if (needsRender) {
			// once we have rendered a new frame, then we can swap out
			// our native canvas surfaces, this way things look much more
			// seamless instead of flickering
			if (this.hasManagedDisplaySurface && this.isFullSizeDisplaySurface) {
				if (this.newSurfaceCanvas != null) {
					surface = this.getDisplaySurfaceAt(0);

					document.body.removeChild(this.mainSurfaceCanvas);
					document.body.appendChild(this.newSurfaceCanvas);

					this.mainSurfaceCanvas = this.newSurfaceCanvas;
					this.newSurfaceCanvas = null;
				}
			}

			this.dispatchEvent(new _Event2["default"](_Event2["default"].RENDER_COMPLETE));
		}
	};

	Application.prototype.handleLayoutManagerUpdated = function handleLayoutManagerUpdated(event) {
		this.hasPendingRender = true;
	};

	Application.prototype.pause = function pause() {
		this.isPaused = true;
		this.frameTimer.stop();
		this.fpsClock.suspend();
	};

	Application.prototype.resume = function resume() {
		this.isPaused = false;
		this.frameTimer.start();
		this.fpsClock.resume();
	};

	Application.getInstance = function getInstance() {
		return Application.Instance;
	};

	Application.create = function create() {
		var type = Application;

		// user passed in a subclass
		if (arguments.length == 1 || arguments.length == 3) {
			type = arguments[0];
		}

		var app = new type();

		if (!(app instanceof type)) {
			throw new Error("Your application does not inherit from the astrid Application class.");
		}

		app.hasManagedDisplaySurface = true;

		if (arguments.length <= 1) {
			app.isFullSizeDisplaySurface = true;
			app.initialSurfaceWidth = null;
			app.initialSurfaceHeight = null;
		} else if (arguments.length <= 3) {
			app.isFullSizeDisplaySurface = false;
			app.initialSurfaceWidth = arguments[arguments.length - 2];
			app.initialSurfaceHeight = arguments[arguments.length - 1];
		}

		return app;
	};

	return Application;
})(_EventDispatcher3["default"]);

exports["default"] = Application;
module.exports = exports["default"];

},{"./DeviceMotionEvent":41,"./DeviceOrientationEvent":42,"./Event":47,"./EventDispatcher":48,"./FPSGraph":50,"./FrameEvent":51,"./Size":60,"./Timer":64,"./TimerEvent":65,"./graphics/Color":79,"./input/Gamepad":91,"./ui/DisplaySurface":145,"./ui/LayoutManager":150,"./ui/ScreenOrientation":157,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],39:[function(require,module,exports){
"use strict";

var _defaults = require("babel-runtime/helpers/defaults")["default"];

var _interopExportWildcard = require("babel-runtime/helpers/interop-export-wildcard")["default"];

exports.__esModule = true;

var _Application = require("./Application");

_defaults(exports, _interopExportWildcard(_Application, _defaults));

},{"./Application":38,"babel-runtime/helpers/defaults":8,"babel-runtime/helpers/interop-export-wildcard":10}],40:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Event2 = require("./Event");

var _Event3 = _interopRequireDefault(_Event2);

var CollectionEvent = (function (_Event) {
	_inherits(CollectionEvent, _Event);

	function CollectionEvent(type, oldIndex, newIndex, bubbles, cancelable) {
		_classCallCheck(this, CollectionEvent);

		_Event.call(this, type, bubbles, cancelable);

		this.oldIndex = oldIndex;
		this.newIndex = newIndex;
	}

	CollectionEvent.prototype.getOldIndex = function getOldIndex() {
		return this.oldIndex;
	};

	CollectionEvent.prototype.getNewIndex = function getNewIndex() {
		return this.newIndex;
	};

	return CollectionEvent;
})(_Event3["default"]);

CollectionEvent.ITEM_ADDED = "collectionItemAdded";
CollectionEvent.ITEM_REMOVED = "collectionItemRemoved";
CollectionEvent.ITEM_INDEX_CHANGED = "collectionItemIndexChanged";

exports["default"] = CollectionEvent;
module.exports = exports["default"];

},{"./Event":47,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],41:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Event2 = require("./Event");

var _Event3 = _interopRequireDefault(_Event2);

var _Engine = require("./Engine");

var DeviceMotionEvent = (function (_Event) {
	_inherits(DeviceMotionEvent, _Event);

	function DeviceMotionEvent(type, acceleration, interval, bubbles, cancelable) {
		_classCallCheck(this, DeviceMotionEvent);

		_Event.call(this, type, _Engine.ValueOrDefault(bubbles, false), _Engine.ValueOrDefault(cancelable, false));

		this.x = acceleration.x;
		this.y = acceleration.y;
		this.z = acceleration.z;
		this.interval = interval;
	}

	DeviceMotionEvent.prototype.getX = function getX() {
		return this.x;
	};

	DeviceMotionEvent.prototype.getY = function getY() {
		return this.y;
	};

	DeviceMotionEvent.prototype.getZ = function getZ() {
		return this.z;
	};

	DeviceMotionEvent.prototype.getInterval = function getInterval() {
		return this.interval;
	};

	return DeviceMotionEvent;
})(_Event3["default"]);

DeviceMotionEvent.CHANGE = "deviceMotionChange";

exports["default"] = DeviceMotionEvent;
module.exports = exports["default"];

},{"./Engine":44,"./Event":47,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],42:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Event2 = require("./Event");

var _Event3 = _interopRequireDefault(_Event2);

var _EngineJs = require("./Engine.js");

var DeviceOrientationEvent = (function (_Event) {
	_inherits(DeviceOrientationEvent, _Event);

	function DeviceOrientationEvent(type, alpha, beta, gamma, bubbles, cancelable) {
		_classCallCheck(this, DeviceOrientationEvent);

		_Event.call(this, type, _EngineJs.ValueOrDefault(bubbles, false), _EngineJs.ValueOrDefault(cancelable, false));

		this.alpha = alpha;
		this.beta = beta;
		this.gamma = gamma;
	}

	DeviceOrientationEvent.prototype.getAlpha = function getAlpha() {
		return this.alpha;
	};

	DeviceOrientationEvent.prototype.getBeta = function getBeta() {
		return this.beta;
	};

	DeviceOrientationEvent.prototype.getGamma = function getGamma() {
		return this.gamma;
	};

	return DeviceOrientationEvent;
})(_Event3["default"]);

DeviceOrientationEvent.CHANGE = "deviceOrientationChange";

exports["default"] = DeviceOrientationEvent;
module.exports = exports["default"];

},{"./Engine.js":44,"./Event":47,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],43:[function(require,module,exports){
"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

exports.__esModule = true;

var Dictionary = (function () {
	function Dictionary() {
		_classCallCheck(this, Dictionary);

		this.keys = [];
		this.values = [];
	}

	Dictionary.prototype.getKeys = function getKeys() {
		return this.keys;
	};

	Dictionary.prototype.getValues = function getValues() {
		return this.values;
	};

	Dictionary.prototype.getCount = function getCount() {
		return this.keys.length;
	};

	Dictionary.prototype.get = function get(key) {
		var idx = this.keys.indexOf(key);

		if (idx == -1) {
			return null;
		}

		return this.values[idx];
	};

	Dictionary.prototype.set = function set(key, value) {
		var idx = this.keys.indexOf(key);

		if (idx == -1) {
			this.keys.push(key);
			this.values.push(value);
		} else {
			this.values[idx] = value;
		}
	};

	Dictionary.prototype.remove = function remove(key) {
		var idx = this.keys.indexOf(key);

		if (idx != -1) {
			this.keys.removeAt(idx);
			this.values.removeAt(idx);
		}
	};

	Dictionary.prototype.clear = function clear() {
		this.keys = [];
		this.values = [];
	};

	Dictionary.prototype.containsKey = function containsKey(key) {
		return this.keys.indexOf(key) != -1;
	};

	Dictionary.prototype.containsValue = function containsValue(value) {
		return this.values.indexOf(value) != -1;
	};

	Dictionary.prototype.toString = function toString() {
		var str = "Dictionary (count=" + this.getCount() + ") :\n";
		var len = this.getCount();
		var key = null;
		var value = null;

		for (var i = 0; i < len; i++) {
			key = this.keys[i];
			value = this.values[i];

			str += "[key=" + key + ", value=" + value + "]\n";
		}

		return str;
	};

	return Dictionary;
})();

exports["default"] = Dictionary;
module.exports = exports["default"];

},{"babel-runtime/helpers/class-call-check":7}],44:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _Object$assign = require("babel-runtime/core-js/object/assign")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;
exports.EnsureTextureCache = EnsureTextureCache;
exports.TextureCacheAdd = TextureCacheAdd;
exports.TextureCacheRemove = TextureCacheRemove;
exports.TextureCacheGet = TextureCacheGet;
exports.TextureCacheClear = TextureCacheClear;
exports.DebugWrite = DebugWrite;
exports.DebugClear = DebugClear;
exports.TraceWrite = TraceWrite;
exports.TraceWriteLine = TraceWriteLine;
exports.TraceClear = TraceClear;
exports.LogEvents = LogEvents;
exports.IsNativeHost = IsNativeHost;
exports.IsWindows = IsWindows;
exports.IsMac = IsMac;
exports.IsLinux = IsLinux;
exports.IsChrome = IsChrome;
exports.IsFirefox = IsFirefox;
exports.IsIE = IsIE;
exports.IsSafari = IsSafari;
exports.GetPlatformType = GetPlatformType;
exports.GetTimer = GetTimer;
exports.CreateHttpRequestObject = CreateHttpRequestObject;
exports.RequestAnimationFrame = RequestAnimationFrame;
exports.Gamepads = Gamepads;
exports.ValueOrDefault = ValueOrDefault;
exports.StringContains = StringContains;
exports.AreEqual = AreEqual;
exports.AreNotEqual = AreNotEqual;
exports.EnableLocalReadPermission = EnableLocalReadPermission;
exports.Mixin = Mixin;

var _Stack = require("./Stack");

var _Stack2 = _interopRequireDefault(_Stack);

var _Application = require("./Application");

var _Application2 = _interopRequireDefault(_Application);

var _System = require("./System");

var _System2 = _interopRequireDefault(_System);

var _Equatable = require("./Equatable");

/*
 *  astrid
 *
 *  Graphics development engine for building cross platform games and applications.
 *
 *  Created by Justin Thomas on 04/04/2010
 *  Copyright 2010-2012 Justin Thomas. All rights reserved.
 *
 */

var _Equatable2 = _interopRequireDefault(_Equatable);

var Version = "1.0";
exports.Version = Version;
var PrintMeasureOrder = false;
exports.PrintMeasureOrder = PrintMeasureOrder;
var PrintLayoutOrder = false;

exports.PrintLayoutOrder = PrintLayoutOrder;
var DebugLevel = {
	"Normal": 1,
	"Info": 2,
	"Warning": 3,
	"Error": 4
};

exports.DebugLevel = DebugLevel;
var NullGamepads = [null, null, null, null];
var TraceElement = null;
var PerformanceMarks = null;
var CachedTextures = null;

var PerfMark = function PerfMark(name) {
	if (PerformanceMarks == null) {
		PerformanceMarks = new _Stack2["default"]();
	}

	PerformanceMarks.push({
		t: new Date(),
		id: name
	});
};

exports.PerfMark = PerfMark;
var PerfUnmark = function PerfUnmark() {
	if (PerformanceMarks == null) {
		PerformanceMarks = new _Stack2["default"]();
	}

	if (PerformanceMarks.isEmpty()) {
		return;
	}

	var d = new Date();
	var mark = PerformanceMarks.pop();
	var t = d - mark.t;

	console.log("@@ " + mark.id + ": " + t);
};

exports.PerfUnmark = PerfUnmark;

function EnsureTextureCache() {
	if (CachedTextures == null) {
		CachedTextures = new Dictionary();
	}
}

function TextureCacheAdd(path, data) {
	EnsureTextureCache();
	CachedTextures.set(path, data);
}

function TextureCacheRemove(path) {
	EnsureTextureCache();
	CachedTextures.remove(path);
}

function TextureCacheGet(path) {
	EnsureTextureCache();
	return CachedTextures.get(path);
}

function TextureCacheClear() {
	EnsureTextureCache();
	CachedTextures.clear();
}

// TODO: refactor all this ugly debug/trace

function DebugWrite(msg, level) {
	if (console) {
		console.log("DebugWrite");
		console.log(msg);
		return;

		var arr = [];
		arr.push(msg);

		for (var i = 2; i < arguments.length; ++i) {
			arr.push(arguments[i]);
		}

		var fmsg = String.formatWithObjects(msg, arr);

		// TODO : need to add better console support to the
		// 		  native host, for now, only log is supported
		if (IsNativeHost()) {
			console.log(fmsg);
		} else {
			switch (level) {
				case DebugLevel.Info:
					console.info(fmsg);
					break;
				case DebugLevel.Warning:
					console.warn(fmsg);
					break;
				case DebugLevel.Error:
					console.error(fmsg);
					break;
				default:
					console.log(fmsg);
					break;
			}
		}
	}
}

function DebugClear() {
	if (console) {
		console.clear();
	}
}

function TraceWrite(msg) {
	if (TraceElement == null) {
		TraceElement = document.createElement("div");
		TraceElement.style.border = "solid 2px #CCCCCC";
		TraceElement.style.padding = "5px";
		TraceElement.style.backgroundColor = "#FBFBEF";
		TraceElement.style.overflow = "auto";
		TraceElement.style.height = "200px";
		TraceElement.style.fontFamily = "Arial";
		TraceElement.style.fontSize = "12px";

		document.body.appendChild(TraceElement);
	}

	var span = document.createElement("span");
	span.innerHTML = String.formatWithObjects(msg, arguments);

	//TraceElement.appendChild(document.createTextNode(String.formatWithObjects(msg, arguments)));
	TraceElement.appendChild(span);
	TraceElement.scrollTop = TraceElement.scrollHeight;
}

function TraceWriteLine(msg) {
	TraceWrite(String.formatWithObjects(msg, arguments));
	TraceElement.appendChild(document.createElement("br"));
}

function TraceClear() {
	if (TraceElement != null) {
		document.body.removeChild(TraceElement);
		TraceElement = null;
	}
}

function LogEvents(domElement /** ... **/) {
	var len = arguments.length;
	var extraData, arg, obj;

	if (len > 0 && arguments[len - 1] instanceof Array) {
		extraData = arguments[len - 1];
		len -= 1;
	}

	obj = {
		callback: function callback(e) {
			var str = "";

			if (this.extraData != null) {
				for (var i = 0; i < this.extraData.length; ++i) {
					str += this.extraData[i] + "=" + e.target[this.extraData[i]];

					if (i < this.extraData.length - 1) {
						str += ", ";
					}
				}
			}

			console.log("%c[EVENT] - %s (%s)", "color:blue;font-weight:bold", e.type, str);
		},
		extraData: extraData
	};

	for (var i = 1; i < len; ++i) {
		arg = arguments[i];
		domElement.addEventListener(arg, obj.callback.bind(obj), false);
	}
}

function IsNativeHost() {
	return window.isNativeHost != null;
}

function IsWindows() {
	return _System2["default"].getPlatformName() == "Windows";
}

function IsMac() {
	return _System2["default"].getPlatformName() == "Macintosh";
}

function IsLinux() {
	return _System2["default"].getPlatformName() == "Linux";
}

function IsChrome() {
	return _System2["default"].getSystemModel() == "Chrome";
}

function IsFirefox() {
	return _System2["default"].getSystemModel() == "Firefox";
}

function IsIE() {
	return _System2["default"].getSystemModel() == "Internet Explorer";
}

function IsSafari() {
	return _System2["default"].getSystemModel() == "Safari";
}

function GetPlatformType() {
	if (IsNativeHost()) {
		return window.nativePlatformName;
	}

	// check for mobile browser
	var ua = navigator.userAgent || navigator.vendor || window.opera;

	if (/android.+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(ua) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|e\-|e\/|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(di|rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|xda(\-|2|g)|yas\-|your|zeto|zte\-/i.test(ua.substr(0, 4))) {
		return "mobile-web";
	}

	return "web";
}

function GetTimer() {
	return _Application2["default"].getInstance().getRunningTime();
}

function CreateHttpRequestObject() {
	if (window.XMLHttpRequest) {
		return new XMLHttpRequest();
	} else {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
}

function RequestAnimationFrame(callback, element) {

	// TODO : need to fix for native platform
	//return window.requestAnimationFrame(callback);

	var nativeFunc = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
		return window.setTimeout(function () {
			callback(Date.now());
		}, 0);
	};

	return nativeFunc(callback);
}

function Gamepads() {
	return navigator.getGamepads ? navigator.getGamepads() : navigator.gamepads || navigator.webkitGamepads || navigator.mozGamepads || NullGamepads;
}

function ValueOrDefault(value, defaultValue) {
	return value == null ? defaultValue : value;
}

function StringContains(str, value) {
	return str.indexOf(value) != -1;
}

function AreEqual(a, b) {
	if (a != null && b != null) {
		if (a instanceof _Equatable2["default"] && b instanceof _Equatable2["default"]) {
			if (a.constructor === b.constructor) {
				return a.isEqualTo(b);
			}
		} else if (a instanceof Array && b instanceof Array) {
			if (a.length != b.length) {
				return false;
			}

			var arrLen = a.length;
			var arrItemA = null;
			var arrItemB = null;

			for (var i = 0; i < arrLen; ++i) {
				arrItemA = a[i];
				arrItemB = b[i];

				if (AreNotEqual(arrItemA, arrItemB)) {
					return false;
				}
			}

			return true;
		}
	}

	return a == b;
}

function AreNotEqual(a, b) {
	return !AreEqual(a, b);
}

function EnableLocalReadPermission() {
	try {
		if (netscape.security.PrivilegeManager.enablePrivilege) {
			netscape.security.PrivilegeManager.enablePrivilege("UniversalFileRead");
		}
	} catch (e) {
		DebugWrite("Unable to give local read access.", DebugLevel.Error);
	}
}

function Mixin(Parent, mixin) {
	var Mixed = (function (_Parent) {
		_inherits(Mixed, _Parent);

		function Mixed() {
			_classCallCheck(this, Mixed);

			_Parent.apply(this, arguments);
		}

		return Mixed;
	})(Parent);

	_Object$assign(Mixed.prototype, mixin);
	return Mixed;
}

},{"./Application":38,"./Equatable":46,"./Stack":62,"./System":63,"babel-runtime/core-js/object/assign":1,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],45:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Vector2D = require("./Vector2D");

var _Vector2D2 = _interopRequireDefault(_Vector2D);

var NegativeInfinity = Number.NEGATIVE_INFINITY;
exports.NegativeInfinity = NegativeInfinity;
var PositiveInfinity = Number.POSITIVE_INFINITY;
exports.PositiveInfinity = PositiveInfinity;
var Epsilon = Math.pow(2, -52);
exports.Epsilon = Epsilon;
var DegreeToRadian = Math.PI / 180;
exports.DegreeToRadian = DegreeToRadian;
var RadianToDegree = 180 / Math.PI;
exports.RadianToDegree = RadianToDegree;
var MaxInt = 0x7fffffff;
exports.MaxInt = MaxInt;
var MinInt = -2147483648;
exports.MinInt = MinInt;
var MaxFloat = Number.MAX_VALUE;
exports.MaxFloat = MaxFloat;
var MinFloat = Number.MIN_VALUE;
exports.MinFloat = MinFloat;
var MaxShort = 0x7fff;
exports.MaxShort = MaxShort;
var MinShort = -32768;
exports.MinShort = MinShort;
var MaxByte = 255;
exports.MaxByte = MaxByte;
var MinByte = 0;

exports.MinByte = MinByte;
exports["default"] = {

	isNaN: (function (_isNaN) {
		function isNaN(_x) {
			return _isNaN.apply(this, arguments);
		}

		isNaN.toString = function () {
			return _isNaN.toString();
		};

		return isNaN;
	})(function (num) {
		return isNaN(num);
	}),

	isInfinity: function isInfinity(num) {
		return this.isPositiveInfinity(num) || this.isNegativeInfinity(num);
	},

	isPositiveInfinity: function isPositiveInfinity(num) {
		return num == PositiveInfinity;
	},

	isNegativeInfinity: function isNegativeInfinity(num) {
		return num == NegativeInfinity;
	},

	isZero: function isZero(num) {
		return Math.abs(num) <= Epsilon;
	},

	signum: function signum(num) {
		if (num > 0) {
			return 1.0;
		}

		if (num < 0) {
			return -1.0;
		}

		return 0.0;
	},

	signEpsilon: function signEpsilon(num) {
		if (num > Epsilon) {
			return 1.0;
		}

		if (num < -Epsilon) {
			return -1.0;
		}

		return 0.0;
	},

	clamp: function clamp(value, min, max) {
		return Math.max(Math.min(value, max), min);
	},

	normalize: function normalize(value, start, end) {
		if (start == end) {
			throw new Error("start must not be equal to end");
		}

		var delta = end - start;
		var offset = value - start;

		return offset - Math.floor(offset / delta) * delta + start;
	},

	normalizeAngle: function normalizeAngle(angle) {
		return angle % 360;
	},

	normalizeZero: function normalizeZero(num) {
		if (num <= 0 || EngineMath.isZero(num)) {
			return 0;
		}

		return num;
	},

	pointOfAngle: function pointOfAngle(radians) {
		return new _Vector2D2["default"](Math.cos(radians), Math.sin(radians));
	},

	hypot: function hypot(x, y) {
		return Math.sqrt(x * x + y * y) || 0;
	},

	degreesToRadians: function degreesToRadians(degrees) {
		return degrees * Math.PI / 180;
	},

	radiansToDegrees: function radiansToDegrees(radians) {
		return radians * 180 / Math.PI;
	},

	randomTo: function randomTo(max) {
		return Math.random() * max;
	},

	randomIntTo: function randomIntTo(max) {
		return Math.round(EngineMath.randomTo(max));
	},

	randomInRange: function randomInRange(min, max) {
		return Math.random() * (max - min) + min;
	},

	randomIntInRange: function randomIntInRange(min, max) {
		return Math.round(EngineMath.randomInRange(min, max));
	},

	round: function round(value) {
		// a fast rounding technique via bitwise truncation
		// TODO : fix negative values, for the most part they work fine, however if
		//		  the value is directly on the .5 boundary it rounds in the wrong direction,
		//		  should be a simple fix, but i need sleep, revisit this later. -JT

		return value + (value >= 0 ? 0.5 : -0.5) | 0;
	},

	evenRoundDown: function evenRoundDown(value) {
		return value & ~1;
	},

	evenRoundUp: function evenRoundUp(value) {
		return value + 1 & ~1;
	},

	toInt: function toInt(value) {
		return this.toPrecision(value, 0);
	},

	toPrecision: function toPrecision(value, n) {
		return Number(value.toFixed(n));
	}
};

},{"./Vector2D":67,"babel-runtime/helpers/interop-require-default":11}],46:[function(require,module,exports){
/**
 *  Base class for all objects that require themselves to be compared against one another
 *
 * EXAMPLE:
 *  <code>
 *    class MyClass extends Equatable { ... }
 *  </code>
 */
"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

exports.__esModule = true;

var Equatable = (function () {
	function Equatable() {
		_classCallCheck(this, Equatable);
	}

	Equatable.prototype.isEqualTo = function isEqualTo(other) {
		/**
   * SUMMARY:
   *  Compares whether or not this instance is
   *  equal to another.
   *
   * REMARKS:
   *  When not implemented in a subclass the default value is true.
   *
   * PARAMS:
   *  Object other = null:
   *    The other object that you wish to compare this
   *    instance to
   *
   * RETURNS (Boolean):
   *  true if the objects are equal; otherwise false.
   *
   */

		return true;
	};

	Equatable.prototype.isNotEqualTo = function isNotEqualTo(other) {
		/**
   * SUMMARY:
   *  Compares whether or not this instance is not equal to another.
   *
   * REMARKS:
   *  When not implemented in a subclass the default value is false.
   *
   * PARAMS:
   *  Object other:
   *    The other object that you wish to compare this
   *    instance to
   *
   * RETURNS:
   *  true if the objects are not equal; otherwise false.
   */

		return !this.isEqualTo(other);
	};

	Equatable.prototype.copy = function copy() {
		return Object.clone(this);
	};

	/*
  * helper method to copy the properties of 'other' object
  * into this object, i.e. by-value
  */

	Equatable.prototype.copyFrom = function copyFrom(other) {
		for (var p in other) {
			if (typeof other[p] != "function") {
				this[p] = other[p];
			}
		}
	};

	return Equatable;
})();

exports["default"] = Equatable;
module.exports = exports["default"];

},{"babel-runtime/helpers/class-call-check":7}],47:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Equatable2 = require("./Equatable");

var _Equatable3 = _interopRequireDefault(_Equatable2);

var _Engine = require("./Engine");

var EventPhase = {
	"CAPTURING": 1,
	"BUBBLING": 2,
	"TARGET": 3
};

var Event = (function (_Equatable) {
	_inherits(Event, _Equatable);

	function Event(type, bubbles, cancelable) {
		_classCallCheck(this, Event);

		_Equatable.call(this);
		this.type = type;
		this.phase = EventPhase.TARGET;
		this.canBubble = _Engine.ValueOrDefault(bubbles, false);
		this.canCancel = _Engine.ValueOrDefault(cancelable, false);
		this.target = null;
		this.currentTarget = null;
		this.isPropagationStopped = false;
		this.isPropagationStoppedNow = false;
		this.isCanceled = false;
		this.isDispatching = false;
	}

	Event.prototype.getType = function getType() {
		return this.type;
	};

	Event.prototype.getPhase = function getPhase() {
		return this.phase;
	};

	Event.prototype.getCanBubble = function getCanBubble() {
		return this.canBubble;
	};

	Event.prototype.getCanCancel = function getCanCancel() {
		return this.canCancel;
	};

	Event.prototype.getTarget = function getTarget() {
		return this.target;
	};

	Event.prototype.getCurrentTarget = function getCurrentTarget() {
		return this.currentTarget;
	};

	Event.prototype.getIsDefaultPrevented = function getIsDefaultPrevented() {
		return this.isCanceled;
	};

	Event.prototype.preventDefault = function preventDefault() {
		if (this.canCancel) this.isCanceled = true;
	};

	Event.prototype.stopPropagation = function stopPropagation() {
		this.isPropagationStopped = true;
	};

	Event.prototype.stopImmediatePropagation = function stopImmediatePropagation() {
		this.isPropagationStopped = true;
		this.isPropagationStoppedNow = true;
	};

	Event.prototype.reuse = function reuse() {
		this.phase = EventPhase.TARGET;
		this.target = null;
		this.currentTarget = null;
		this.isPropagationStopped = false;
		this.isPropagationStoppedNow = false;
		this.isCanceled = false;
		this.isDispatching = false;

		return this;
	};

	Event.prototype.toString = function toString() {
		return this.getType();
	};

	return Event;
})(_Equatable3["default"]);

Event.APPLICATION_START = "applicationStart";
Event.APPLICATION_EXIT = "applicationExit";
Event.RENDER = "render";
Event.RENDER_COMPLETE = "renderComplete";
Event.PRE_INIT = "preInit";
Event.INIT_COMPLETE = "initComplete";
Event.CHILDREN_CREATED = "childrenCreated";
Event.SHOW = "show";
Event.HIDE = "hide";
Event.CREATED = "created";
Event.UPDATED = "updated";
Event.LAYOUT_UPDATED = "layoutUpdated";
Event.PARENT_CHANGED = "parentChanged";
Event.POSITION_CHANGED = "positionChanged";
Event.RESIZED = "resized";
Event.FOCUS_IN = "focusIn";
Event.FOCUS_OUT = "focusOut";
Event.ADDED_TO_SCENE = "addedToScene";
Event.REMOVED_FROM_SCENE = "removedFromScene";
Event.CHANGE = "change";
Event.UI_ORIENTATION_CHANGE = "uiOrientationChange";

exports.EventPhase = EventPhase;
exports["default"] = Event;

},{"./Engine":44,"./Equatable":46,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],48:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Equatable2 = require("./Equatable");

var _Equatable3 = _interopRequireDefault(_Equatable2);

var _Engine = require("./Engine");

var _Event = require("./Event");

/**
 *  Represents the base class for any object that wants to participate in event handling.
 */

var EventDispatcher = (function (_Equatable) {
	_inherits(EventDispatcher, _Equatable);

	function EventDispatcher() {
		_classCallCheck(this, EventDispatcher);

		_Equatable.call(this);
		this.handlerCount = 0;
	}

	EventDispatcher.prototype.getHandlerCount = function getHandlerCount() {
		return this.handlerCount;
	};

	EventDispatcher.prototype.clearEventHandlers = function clearEventHandlers() {
		for (var q in this) {
			if (this.hasOwnProperty(q) && q.startsWith("__evt_queue_")) {
				this[q] = null;
				delete this[q];
			}
		}
	};

	EventDispatcher.prototype.addEventHandler = function addEventHandler(eventType, handler, useCapture) {
		useCapture = _Engine.ValueOrDefault(useCapture, false);

		var queueName = this.getQueueName$internal(eventType);

		if (this[queueName] == null) {
			this[queueName] = [];
		}

		EventDispatcher.__removeEventListener(this[queueName], handler, useCapture);
		this[queueName].push({ handler: handler, useCapture: useCapture });
		this.handlerCount++;
	};

	EventDispatcher.prototype.removeEventHandler = function removeEventHandler(eventType, handler, useCapture) {
		useCapture = _Engine.ValueOrDefault(useCapture, false);

		var queueName = this.getQueueName$internal(eventType);

		EventDispatcher.__removeEventListener(this[queueName], handler, useCapture);
		this.handlerCount--;
	};

	EventDispatcher.prototype.hasEventHandler = function hasEventHandler(eventType) {
		var queueName = this.getQueueName$internal(eventType);

		return this[queueName] != null && this[queueName].length > 0;
	};

	EventDispatcher.prototype.dispatchEvent = function dispatchEvent(event) {
		if (event.isDispatching) {
			throw new Error("Event is already being dispatched.");
		}

		event.isDispatching = true;
		event.target = this;

		// the target is not in any parent-child hierarchy, so just execute any
		// event handlers
		if (this.getParent == null) {
			this.executeEventHandlers(event);
		} else {
			var eventPath = this.determinePropagationPathForTarget(event.target);
			var len = eventPath.length;
			var obj;

			// begin capturing phase
			event.phase = _Event.EventPhase.CAPTURING;

			// execute each objects handlers in the event path to the end
			// or until propagation has been stopped
			for (var i = 0; i < len; ++i) {
				obj = eventPath[i];

				if (event.isPropagationStopped) break;

				obj.executeEventHandlers(event);
			}

			// begin target phase
			event.phase = _Event.EventPhase.TARGET;

			// now execute the original target's handlers as long as
			// the event hasn't stopped it's propagation
			if (!event.isPropagationStopped) event.target.executeEventHandlers(event);

			// try to bubble the event upward
			if (event.canBubble) {
				// begin bubbling phase
				event.phase = _Event.EventPhase.BUBBLING;

				// execute each objects handlers in the event path but this
				// time we need to do it in reverse as long as propagation
				// hasn't been stopped
				for (var i = len - 1; i >= 0; --i) {
					obj = eventPath[i];

					if (event.isPropagationStopped) break;

					obj.executeEventHandlers(event);
				}
			}
		}

		// finish up the dispatch and return whether or not the event
		// ended up being canceled
		event.isDispatching = false;
		event.phase = _Event.EventPhase.TARGET;
		event.currentTarget = null;

		return !event.isCanceled;
	};

	EventDispatcher.prototype.isEqualTo = function isEqualTo(obj) {
		return this === obj;
	};

	EventDispatcher.prototype.determinePropagationPathForTarget = function determinePropagationPathForTarget(target) {
		// @PRIVATE

		var objList = [];
		var obj = target;

		if (obj != null) {
			obj = obj.getParent();

			while (obj != null) {
				objList.unshift(obj);
				obj = obj.getParent();
			}
		}

		return objList;
	};

	EventDispatcher.prototype.executeEventHandlers = function executeEventHandlers(event) {
		// @PRIVATE

		var eventType = event.getType();
		var queueName = this.getQueueName$internal(eventType);
		var queue = this[queueName];
		var queueItem = null;

		if (queue != null) {
			// update our current target to be this, which may differ
			// from the original target if this event's target is participating
			// in a tree
			event.currentTarget = this;

			// we need to make a copy incase a handler is removed while executing
			// which would invalidate the indices
			queue = queue.concat();

			var i;
			var len = queue.length;
			var handler = null;
			var useCapture = false;

			for (i = 0; i < len; ++i) {
				queueItem = queue[i];

				// propagation has immediately been stopped so there
				// is no reason to continue anymore
				if (event.isPropagationStoppedNow) return;

				handler = queueItem.handler;
				useCapture = queueItem.useCapture;

				// ensure that the handler is indeed a function
				if (typeof handler != "function") continue;

				// move on to the next one if the handler does not participate
				// in the capture phase
				if (!useCapture && event.getPhase() == _Event.EventPhase.CAPTURING) continue;

				// or move on to the next one if we are currently bubbling and
				// the handler should only be used during the capture phase
				if (useCapture && event.getPhase() == _Event.EventPhase.BUBBLING) continue;

				// finally execute the handler
				handler(event);
			}
		}
	};

	EventDispatcher.prototype.getQueueName$internal = function getQueueName$internal(eventType) {
		// @PRIVATE

		return "__evt_queue_" + eventType;
	};

	EventDispatcher.__removeEventListener = function __removeEventListener(queue, handler, useCapture) {
		// @PRIVATE

		if (queue != null) {
			var len = queue.length;

			for (var i = len - 1; i >= 0; --i) {
				var o = queue[i];

				if (o.handler == handler && o.useCapture == useCapture) {
					queue.splice(i, 1);
					return;
				}
			}
		}
	};

	return EventDispatcher;
})(_Equatable3["default"]);

exports["default"] = EventDispatcher;
module.exports = exports["default"];

},{"./Engine":44,"./Equatable":46,"./Event":47,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],49:[function(require,module,exports){
//--------------------------------------------------------------------------
//  Array Extensions
//--------------------------------------------------------------------------

"use strict";

Array.prototype.contains = function (item) {
	return this.indexOf(item) != -1;
};

Array.prototype.remove = function (item) {
	for (var i = this.length - 1; i >= 0; i--) {
		if (this[i] == item) {
			this.removeAt(i);
		}
	}
};

Array.prototype.removeAt = function (index) {
	this.splice(index, 1);
};

//--------------------------------------------------------------------------
//  Function Extensions
//--------------------------------------------------------------------------

Function.prototype.findEventHandler$ = function (context) {

	// if there is no event handler table for this function instance
	// create one, this is done at the instance level so we do not
	// generate huge tables instead of using Function.prototype.eventHandlerTable
	// which would be a single instance for all functions
	if (this.eventHandlerTable == null) {
		this.eventHandlerTable = [];
		return null;
	}

	// iterate through the table and see if we can find the handler
	// for the specified context, this way we can have multiple handlers
	// for each unique object context
	var len = this.eventHandlerTable.length;

	for (var i = 0; i < len; ++i) {
		if (this.eventHandlerTable[i].context == context) {
			return this.eventHandlerTable[i].handler;
		}
	}
};

Function.prototype.createEventHandler$ = function (context, handler) {
	this.eventHandlerTable.push({ context: context, handler: handler });

	return handler;
};

Function.prototype.executeHandler = function () {};

Function.prototype.asDelegate = function (context) {

	if (arguments.length != 1) {
		throw new Error("Invalid number of arguments. expected: 1, actual: " + arguments.length.toString());
	}

	// if the context is null then just return this function
	if (context == null) {
		return this;
	}

	// see if we can find an existing handler, otherwise
	// create one
	var funcImpl = this;
	var funcHandler = this.findEventHandler$(context);

	if (funcHandler == null) {
		return this.createEventHandler$(context, function handlerFunc() {
			return funcImpl.apply(context, arguments);
		});
	}

	return funcHandler;
};

// short hand for asDelegate
Function.prototype.d = function (context) {
	return this.asDelegate(context);
};

//--------------------------------------------------------------------------
//  String Extensions
//--------------------------------------------------------------------------

/**
 *  Formats a given string in a similar way as printf or the C#
 *  String.Format, except without type/precision specifiers (i.e. {0:C2}, {0:X}, etc...)
 */
String.format = function (formatString) {

	if (arguments.length > 1) {
		var template = new Template(formatString);
		var dict = {};

		for (var i = 1; i < arguments.length; i++) {
			dict[(i - 1).toString()] = arguments[i];
		}

		return template.evaluate(dict);
	}

	return formatString;
};

String.formatWithObjects = function (formatString, objects) {
	return String.format.apply(formatString, objects);
};

},{}],50:[function(require,module,exports){
"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _EngineMath = require("./EngineMath");

var _EngineMath2 = _interopRequireDefault(_EngineMath);

var _Engine = require("./Engine");

var _Application = require("./Application");

var _Application2 = _interopRequireDefault(_Application);

var FPSClock = (function () {
	function FPSClock() {
		_classCallCheck(this, FPSClock);

		this.currentTime = 0;
		this.elapsedTime = 0;
		this.totalTime = 0;
		this.lastTime = 0;
		this.bestTime = 0;
		this.worstTime = 0;
		this.frameTime = 0;
		this.frameCount = 0;
		this.suspendStartTime = 0;
		this.suspendElapsedTime = 0;
		this.suspendCount = 0;
		this.lastFPS = 0;
		this.avgFPS = 0;
		this.bestFPS = 0;
		this.worstFPS = 0;

		this.reset();
	}

	FPSClock.prototype.getElapsedTime = function getElapsedTime() {
		return this.elapsedTime;
	};

	FPSClock.prototype.getTotalTime = function getTotalTime() {
		return this.totalTime;
	};

	FPSClock.prototype.getBestTime = function getBestTime() {
		return this.bestTime;
	};

	FPSClock.prototype.getWorstTime = function getWorstTime() {
		return this.worstTime;
	};

	FPSClock.prototype.getAverageFPS = function getAverageFPS() {
		return this.avgFPS;
	};

	FPSClock.prototype.getBestFPS = function getBestFPS() {
		return this.bestFPS;
	};

	FPSClock.prototype.getWorstFPS = function getWorstFPS() {
		return this.worstFPS;
	};

	FPSClock.prototype.reset = function reset() {
		this.lastTime = _Engine.GetTimer();
		this.totalTime = 0;
		this.elapsedTime = 0;
		this.currentTime = this.lastTime;
		this.frameTime = this.lastTime;
		this.frameCount = 0;
		this.avgFPS = 0;
		this.bestFPS = 0;
		this.lastFPS = 0;
		this.worstFPS = 9999.0;
		this.bestTime = 999999;
		this.worstTime = 0;
		this.suspendCount = 0;
		this.suspendElapsedTime = 0;
		this.suspendStartTime = 0;
	};

	FPSClock.prototype.resume = function resume() {
		if (--this.suspendCount <= 0) {
			var ts = _Engine.GetTimer();

			this.suspendCount = 0;
			this.suspendElapsedTime += ts - this.suspendStartTime;
			this.suspendStartTime = 0;
		}
	};

	FPSClock.prototype.suspend = function suspend() {
		this.suspendCount++;

		if (this.suspendCount == 1) this.suspendStartTime = _Engine.GetTimer();
	};

	FPSClock.prototype.update = function update() {
		var ts = _Engine.GetTimer();

		this.frameCount++;
		this.lastTime = this.lastTime + this.suspendElapsedTime;
		this.elapsedTime = ts - this.lastTime;
		this.lastTime = ts;
		this.suspendElapsedTime = 0;

		this.bestTime = Math.min(this.bestTime, this.elapsedTime);
		this.worstTime = Math.max(this.worstTime, this.elapsedTime);

		if (ts - this.frameTime > 1000) {
			var count = this.frameCount;
			var deltaTime = ts - this.frameTime;

			this.lastFPS = count / deltaTime * 1000;

			if (this.avgFPS == 0) this.avgFPS = this.lastFPS;else this.avgFPS = (this.avgFPS + this.lastFPS) * 0.5;

			this.bestFPS = Math.max(this.bestFPS, this.lastFPS);
			this.worstFPS = Math.min(this.worstFPS, this.lastFPS);

			this.frameTime = ts;
			this.frameCount = 0;
		}

		this.totalTime += this.elapsedTime;
	};

	return FPSClock;
})();

var FPSGraph = (function () {
	function FPSGraph() {
		_classCallCheck(this, FPSGraph);

		this.width = 175;
		this.height = 60;
		this.averages = [];

		for (var i = 0; i < 100; i++) this.averages.push(0);
	}

	FPSGraph.prototype.render = function render(gfx, x, y) {
		var app = _Application2["default"].getInstance();
		var clock = app.fpsClock;
		var graphX = 0.5;
		var graphY = 0.5;
		var graphWidth = this.width - 1;
		var graphHeight = this.height - 30 - 1;
		var maxBarHeight = graphHeight - 10;

		gfx.save();
		gfx.translate(x, y);
		gfx.beginPath();
		gfx.rect(0, 0, this.width, this.height);
		gfx.clip();

		// render the background and border
		gfx.fillStyle = "rgba(255,255,255,0.5)";
		gfx.strokeStyle = "white";
		gfx.beginPath();
		gfx.rect(graphX, graphY, graphWidth, graphHeight);
		gfx.stroke();
		gfx.fill();

		// draw graph markers
		gfx.lineWidth = 1;
		gfx.strokeStyle = "rgba(0,0,0,0.5)";
		gfx.beginPath();
		gfx.moveTo(1.5, 10.5);
		gfx.lineTo(graphWidth, 10.5);
		gfx.moveTo(1.5, 0.5 * (graphHeight + 10));
		gfx.lineTo(graphWidth, 0.5 * (graphHeight + 10));
		gfx.stroke();

		// remove the first element so we can
		// shift everything over by 1
		if (this.averages.length == 100) this.averages.shift();

		x = 0;
		y = 0;

		// draw the fps graph
		gfx.beginPath();

		for (var i = 0; i < this.averages.length; ++i) {
			var avg = this.averages[i];
			x = i * (graphWidth / 100) + 1.5;
			y = _EngineMath2["default"].round(Math.min(1.0, avg / 60.0) * maxBarHeight) + 0.5;

			gfx.lineTo(x, maxBarHeight - y + 10);
		}

		gfx.lineTo(graphWidth, maxBarHeight - y + 10);
		gfx.lineTo(graphWidth, graphHeight);
		gfx.lineTo(1.5, graphHeight);
		gfx.closePath();

		// the graph should be rendered a red color if it's below
		// 30fps, otherwise render it green
		if (clock.getAverageFPS() < 30) gfx.fillStyle = "rgba(255, 0, 0, 0.5)";else gfx.fillStyle = "rgba(0, 255, 0, 0.5)";

		gfx.fill();

		// draw the fps labels
		gfx.font = "10px courier";

		var avgStr = "FPS: " + _EngineMath2["default"].toPrecision(clock.getAverageFPS(), 0) + ",";
		var avgWidth = gfx.measureText(avgStr).width;
		var bestStr = "Max: " + _EngineMath2["default"].toPrecision(clock.getBestFPS(), 0) + ",";
		var bestWidth = gfx.measureText(bestStr).width;
		var worstStr = "Min: " + _EngineMath2["default"].toPrecision(clock.getWorstFPS(), 0);
		var textX = 0;
		var textY = graphHeight + 12;

		gfx.fillStyle = "white";
		gfx.fillText(avgStr, textX, textY);

		textX += avgWidth + 6;
		gfx.fillText(bestStr, textX, textY);

		textX += bestWidth + 6;
		gfx.fillText(worstStr, textX, textY);

		// draw the time labels
		var timeElapsedStr = "Time: " + _EngineMath2["default"].toPrecision(clock.getElapsedTime(), 0) + ",";
		var timeElapsedWidth = gfx.measureText(timeElapsedStr).width;
		var timeWorstStr = "Max: " + _EngineMath2["default"].toPrecision(clock.getWorstTime(), 0) + ",";
		var timeWorstWidth = gfx.measureText(timeWorstStr).width;
		var timeBestStr = "Min: " + _EngineMath2["default"].toPrecision(clock.getBestTime(), 0);

		textX = 0;
		textY += 12;

		gfx.fillText(timeElapsedStr, textX, textY);

		textX += timeElapsedWidth + 6;
		gfx.fillText(timeWorstStr, textX, textY);

		textX += timeWorstWidth + 6;
		gfx.fillText(timeBestStr, textX, textY);

		gfx.restore();

		this.averages.push(clock.getAverageFPS());
	};

	return FPSGraph;
})();

exports.FPSClock = FPSClock;
exports["default"] = FPSGraph;

},{"./Application":38,"./Engine":44,"./EngineMath":45,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/interop-require-default":11}],51:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Event2 = require("./Event");

var _Event3 = _interopRequireDefault(_Event2);

var FrameEvent = (function (_Event) {
	_inherits(FrameEvent, _Event);

	function FrameEvent(type, deltaTime, bubbles, cancelable) {
		_classCallCheck(this, FrameEvent);

		_Event.call(this, type, bubbles, cancelable);

		this.deltaTime = deltaTime;
	}

	FrameEvent.prototype.getDeltaTime = function getDeltaTime() {
		return this.deltaTime;
	};

	return FrameEvent;
})(_Event3["default"]);

FrameEvent.ENTER = "enter";

exports["default"] = FrameEvent;
module.exports = exports["default"];

},{"./Event":47,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],52:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Equatable2 = require("./Equatable");

var _Equatable3 = _interopRequireDefault(_Equatable2);

var _Vector2D = require("./Vector2D");

var _Vector2D2 = _interopRequireDefault(_Vector2D);

var Line = (function (_Equatable) {
	_inherits(Line, _Equatable);

	function Line(x1, y1, x2, y2) {
		_classCallCheck(this, Line);

		_Equatable.call(this);

		this.x1 = x1;
		this.y1 = y1;
		this.x2 = x2;
		this.y2 = y2;
	}

	Line.prototype.pointAt = function pointAt(t) {
		var vx = this.x2 - this.x1;
		var vy = this.y2 - this.y1;

		return new _Vector2D2["default"](this.x1 + vx * t, this.y1 + vy * t);
	};

	Line.prototype.length = function length() {
		var x = this.x2 - this.x1;
		var y = this.y2 - this.y1;

		return Math.sqrt(x * x + y * y);
	};

	Line.prototype.getPixelsOutside = function getPixelsOutside(xcoords, ycoords, end) {
		var count = 0;
		var x = 0;
		var y = 0;
		var yNeeded = 0;

		for (var i = 0; i < end; ++i) {
			x = xcoords[i];
			y = ycoords[i];
			yNeeded = this.getYForX(x);

			if (Math.abs(yNeeded - y) >= 2) {
				count++;
			}
		}

		return count;
	};

	Line.prototype.getYForX = function getYForX(x) {
		var dx = this.x2 - this.x1;
		var dy = this.y2 - this.y1;

		return dy / dx * (x - this.x1) + this.y1;
	};

	Line.prototype.isEqualTo = function isEqualTo(other) {
		return this.x1 == other.x1 && this.y1 == other.y1 && this.x2 == other.x2 && this.y2 == other.y2;
	};

	Line.prototype.toString = function toString() {
		return "x1:" + this.x1 + ", y1:" + this.y1 + ", x2:" + this.x2 + ", y2:" + this.y2;
	};

	return Line;
})(_Equatable3["default"]);

exports["default"] = Line;
module.exports = exports["default"];

},{"./Equatable":46,"./Vector2D":67,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],53:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Event2 = require("./Event");

var _Event3 = _interopRequireDefault(_Event2);

var LoadEvent = (function (_Event) {
	_inherits(LoadEvent, _Event);

	function LoadEvent(type, bubbles, cancelable) {
		_classCallCheck(this, LoadEvent);

		_Event.call(this, type, bubbles, cancelable);
	}

	return LoadEvent;
})(_Event3["default"]);

LoadEvent.SUCCESS = "loadSuccess";
LoadEvent.FAILURE = "loadFailure";

exports["default"] = LoadEvent;
module.exports = exports["default"];

},{"./Event":47,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],54:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Equatable2 = require("./Equatable");

var _Equatable3 = _interopRequireDefault(_Equatable2);

var _Vector2D = require("./Vector2D");

var _Vector2D2 = _interopRequireDefault(_Vector2D);

var _Engine = require("./Engine");

var _EngineMath = require("./EngineMath");

var _EngineMath2 = _interopRequireDefault(_EngineMath);

var MatrixType = {
	"IsIdentity": 0,
	"IsTranslation": 1,
	"IsScaling": 2,
	"IsUnknown": 4
};

var MatrixDecompositionType = {
	"Translation": 0,
	"Rotation": 1,
	"Scale": 2,
	"Skew": 4
};

var Matrix2D = (function (_Equatable) {
	_inherits(Matrix2D, _Equatable);

	function Matrix2D() {
		_classCallCheck(this, Matrix2D);

		_Equatable.call(this);

		this.type = MatrixType.IsIdentity;
		this.m11 = 1;
		this.m12 = 0;
		this.m21 = 0;
		this.m22 = 1;
		this.offsetX = 0;
		this.offsetY = 0;
	}

	Matrix2D.prototype.isEqualTo = function isEqualTo(obj) {
		if (this.type == MatrixType.IsIdentity || obj.type == MatrixType.IsIdentity) {
			return this.isIdentity() == obj.isIdentity();
		}

		return this.m11 == obj.m11 && this.m12 == obj.m12 && this.m21 == obj.m21 && this.m22 == obj.m22 && this.offsetX == obj.offsetX && this.offsetY == obj.offsetY;
	};

	Matrix2D.prototype.setMatrix = function setMatrix(m11, m12, m21, m22, tx, ty) {
		this.m11 = m11;
		this.m12 = m12;
		this.m21 = m21;
		this.m22 = m22;
		this.offsetX = tx;
		this.offsetY = ty;
		this.determineMatrixType();
	};

	Matrix2D.prototype.setIdentity = function setIdentity() {
		this.setMatrix(1, 0, 0, 1, 0, 0);
	};

	Matrix2D.prototype.isIdentity = function isIdentity() {
		return this.type == MatrixType.IsIdentity || this.m11 == 1 && this.m12 == 0 && this.m21 == 0 && this.m22 == 1 && this.offsetX == 0 && this.offsetY == 0;
	};

	Matrix2D.prototype.determineMatrixType = function determineMatrixType() {
		this.type = MatrixType.IsIdentity;

		if (this.m21 != 0 || this.m12 != 0) {
			this.type = MatrixType.IsUnknown;
		} else {
			if (this.m11 != 1 || this.m22 != 1) {
				this.type = MatrixType.IsScaling;
			}

			if (this.offsetX != 0 || this.offsetY != 0) {
				this.type |= MatrixType.IsTranslation;
			}

			if ((this.type & (MatrixType.IsScaling | MatrixType.IsTranslation)) == MatrixType.IsIdentity) {
				this.type = MatrixType.IsIdentity;
			}
		}
	};

	Matrix2D.prototype.decompose = function decompose(decompositionType) {
		switch (decompositionType) {
			case MatrixDecompositionType.Translation:
				return new _Vector2D2["default"](this.offsetX, this.offsetY);
			case MatrixDecompositionType.Scale:
				return new _Vector2D2["default"](Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12), Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22));
			case MatrixDecompositionType.Skew:
			case MatrixDecompositionType.Rotation:

				var skewX = Math.atan2(-this.m21, this.m22);
				var skewY = Math.atan2(this.m12, this.m11);

				if (skewX == skewY) {
					if (decompositionType == MatrixDecompositionType.Skew) {
						return _Vector2D2["default"].Zero();
					} else {
						var rotation = skewY / _EngineMath.DegreeToRadian;

						if (this.m11 < 0 && this.m22 >= 0) {
							rotation += rotation <= 0 ? 180 : -180;
						}

						return rotation;
					}
				}

				return new _Vector2D2["default"](skewX / _EngineMath.DegreeToRadian, skewY / _EngineMath.DegreeToRadian);
		}

		return null;
	};

	Matrix2D.prototype.determinate = function determinate() {
		switch (this.type) {
			case MatrixType.IsIdentity:
			case MatrixType.IsTranslation:
				return 1.0;
			case MatrixType.IsScaling:
			case MatrixType.IsScaling | MatrixType.IsTranslation:
				return this.m11 * this.m22;
		}

		return this.m11 * this.m22 - this.m12 * this.m21;
	};

	Matrix2D.prototype.invert = function invert() {
		var det = this.determinate();
		var mx = Matrix2D.createIdentity();

		// cannot invert
		if (det == 0) {
			return;
		}

		switch (this.type) {
			case MatrixType.IsIdentity:
				break;
			case MatrixType.IsTranslation:
				mx.offsetX = -this.offsetX;
				mx.offsetY = -this.offsetY;
				break;
			case MatrixType.IsScaling:
				mx.m11 = 1.0 / this.m11;
				mx.m22 = 1.0 / this.m22;
				break;
			case MatrixType.IsScaling | MatrixType.IsTranslation:
				mx.m11 = 1.0 / this.m11;
				mx.m22 = 1.0 / this.m22;
				mx.offsetX = -this.offsetX * mx.m11;
				mx.offsetY = -this.offsetY * mx.m22;
				break;
		}

		var inv = 1.0 / det;
		mx.setMatrix(this.m22 * inv, -this.m12 * inv, -this.m21 * inv, this.m11 * inv, (this.m21 * this.offsetY - this.offsetX * this.m22) * inv, (this.offsetX * this.m12 - this.m11 * this.offsetY) * inv);

		mx.type = MatrixType.IsUnknown;

		return mx;
	};

	Matrix2D.prototype.validate = function validate() {
		this.m11 = isNaN(this.m11) ? 0 : this.m11;
		this.m12 = isNaN(this.m12) ? 0 : this.m12;
		this.m21 = isNaN(this.m21) ? 0 : this.m21;
		this.m22 = isNaN(this.m22) ? 0 : this.m22;
		this.offsetX = isNaN(this.offsetX) ? 0 : this.offsetX;
		this.offsetY = isNaN(this.offsetY) ? 0 : this.offsetY;
	};

	Matrix2D.prototype.truncateToPrecision = function truncateToPrecision(precision) {
		this.m11 = _EngineMath2["default"].toPrecision(this.m11, precision);
		this.m12 = _EngineMath2["default"].toPrecision(this.m12, precision);
		this.m21 = _EngineMath2["default"].toPrecision(this.m21, precision);
		this.m22 = _EngineMath2["default"].toPrecision(this.m22, precision);
		this.offsetX = _EngineMath2["default"].toPrecision(this.offsetX, precision);
		this.offsetY = _EngineMath2["default"].toPrecision(this.offsetY, precision);
	};

	Matrix2D.prototype.copyFrom = function copyFrom(m) {
		this.type = m.type;
		this.m11 = m.m11;
		this.m12 = m.m12;
		this.m21 = m.m21;
		this.m22 = m.m22;
		this.offsetX = m.offsetX;
		this.offsetY = m.offsetY;
	};

	Matrix2D.prototype.copy = function copy() {
		var m = new Matrix2D();
		m.copyFrom(this);

		return m;
	};

	Matrix2D.prototype.rotate = function rotate(angle, prepend) {
		this.rotateAt(angle, 0, 0, prepend);
	};

	Matrix2D.prototype.rotateAt = function rotateAt(angle, cx, cy, prepend) {
		var m = Matrix2D.createRotation(angle % 360 * _EngineMath.DegreeToRadian, cx, cy);

		if (prepend) {
			this.prepend(m);
		} else {
			this.append(m);
		}
	};

	Matrix2D.prototype.scale = function scale(sx, sy, prepend) {
		this.scaleAt(sx, sy, 0, 0, prepend);
	};

	Matrix2D.prototype.scaleAt = function scaleAt(sx, sy, cx, cy, prepend) {
		var m = Matrix2D.createScale(sx, sy, cx, cy);

		if (prepend) {
			this.prepend(m);
		} else {
			this.append(m);
		}
	};

	Matrix2D.prototype.skew = function skew(sx, sy, prepend) {
		var m = Matrix2D.createSkew(sx % 360 * _EngineMath.DegreeToRadian, sy % 360 * _EngineMath.DegreeToRadian);

		if (prepend) {
			this.prepend(m);
		} else {
			this.append(m);
		}
	};

	Matrix2D.prototype.translate = function translate(tx, ty, prepend) {

		if (prepend) {
			var m = Matrix2D.createTranslation(tx, ty);
			this.prepend(m);
		} else {
			if (this.type == MatrixType.IsIdentity) {
				this.setMatrix(1, 0, 0, 1, tx, ty);
				this.type = MatrixType.IsTranslation;
			} else if (this.type == MatrixType.IsUnknown) {
				this.offsetX += tx;
				this.offsetY += ty;
			} else {
				this.offsetX += tx;
				this.offsetY += ty;
				this.type |= MatrixType.IsTranslation;
			}
		}
	};

	Matrix2D.prototype.append = function append(m) {
		var mx = this.multiply(this, m);
		this.copyFrom(mx);
	};

	Matrix2D.prototype.prepend = function prepend(m) {
		var mx = this.multiply(m, this);
		this.copyFrom(mx);
	};

	Matrix2D.prototype.add = function add(m1, m2) {
		var m = new Matrix2D();
		m.setMatrix(m1.m11 + m2.m11, m1.m12 + m2.m12, m1.m21 + m2.m21, m1.m22 + m2.m22, m1.offsetX + m2.offsetX, m1.offsetY + m2.offsetY);
		return m;
	};

	Matrix2D.prototype.transformVector = function transformVector(v) {
		return this.transform(v, false);
	};

	Matrix2D.prototype.transformPoint = function transformPoint(pt) {
		return this.transform(pt, true);
	};

	Matrix2D.prototype.transformPoints = function transformPoints(points) {
		for (var i = 0; i < points.length; i++) {
			points[i] = this.transformPoint(points[i]);
		}
	};

	Matrix2D.prototype.transform = function transform(xy, isPoint) {
		if (isPoint) {
			return this.multiplyPoint(xy.x, xy.y);
		} else {
			var nx = xy.x;
			var ny = xy.y;

			switch (this.type) {
				case MatrixType.IsIdentity:
				case MatrixType.IsTranslation:
					return new _Vector2D2["default"](nx, ny);
				case MatrixType.IsScaling:
				case MatrixType.IsScaling | MatrixType.IsTranslation:
					nx *= this.m11;
					ny *= this.m22;

					return new _Vector2D2["default"](nx, ny);
			}

			var tx = nx * this.m21;
			var ty = ny * this.m12;

			nx *= this.m11;
			nx += tx;
			ny *= this.m22;
			ny += ty;

			return new _Vector2D2["default"](nx, ny);
		}
	};

	Matrix2D.prototype.transformRect = function transformRect(rect) {
		var newRect = rect.copy();

		if (!newRect.isEmpty()) {
			if (this.type != MatrixType.IsIdentity) {
				if ((this.type & MatrixType.IsScaling) != MatrixType.IsIdentity) {
					newRect.x *= this.m11;
					newRect.y *= this.m22;
					newRect.width *= this.m11;
					newRect.height *= this.m22;

					if (newRect.width < 0) {
						newRect.x += newRect.width;
						newRect.width = -newRect.width;
					}

					if (newRect.height < 0) {
						newRect.y += newRect.height;
						newRect.height = -newRect.height;
					}
				}

				if ((this.type & MatrixType.IsTranslation) != MatrixType.IsIdentity) {
					newRect.x += this.offsetX;
					newRect.y += this.offsetY;
				}

				if (this.type == MatrixType.IsUnknown) {
					var p1 = this.transformPoint(newRect.topLeft());
					var p2 = this.transformPoint(newRect.topRight());
					var p3 = this.transformPoint(newRect.bottomRight());
					var p4 = this.transformPoint(newRect.bottomLeft());

					newRect.x = Math.min(Math.min(p1.x, p2.x), Math.min(p3.x, p4.x));
					newRect.y = Math.min(Math.min(p1.y, p2.y), Math.min(p3.y, p4.y));

					newRect.width = Math.max(Math.max(p1.x, p2.x), Math.max(p3.x, p4.x)) - newRect.x;
					newRect.height = Math.max(Math.max(p1.y, p2.y), Math.max(p3.y, p4.y)) - newRect.y;
				}
			}
		}

		return newRect;
	};

	Matrix2D.prototype.multiply = function multiply(m1, m2) {
		var typeA = m1.type;
		var typeB = m2.type;
		var m;

		if (typeB != MatrixType.IsIdentity) {
			if (typeA == MatrixType.IsIdentity) {
				m = new Matrix2D();
				m.setMatrix(m2.m11, m2.m12, m2.m21, m2.m22, m2.offsetX, m2.offsetY);
				return m;
			}

			if (typeB == MatrixType.IsTranslation) {
				m = new Matrix2D();
				m.setMatrix(m1.m11, m1.m12, m1.m21, m1.m22, m1.offsetX, m1.offsetY);

				m.offsetX += m2.offsetX;
				m.offsetY += m2.offsetY;

				if (typeA != MatrixType.IsUnknown) {
					m.type |= MatrixType.IsTranslation;
				}

				return m;
			}

			if (typeA == MatrixType.IsTranslation) {
				m = new Matrix2D();
				m.setMatrix(m2.m11, m2.m12, m2.m21, m2.m22, m2.offsetX, m2.offsetY);

				m.offsetX = m1.offsetX * m2.m11 + m1.offsetY * m2.m21 + m2.offsetX;
				m.offsetY = m1.offsetX * m2.m12 + m1.offsetY * m2.m22 + m2.offsetY;

				if (typeB == MatrixType.IsUnknown) {
					m.type = MatrixType.IsUnknown;
				} else {
					m.type = MatrixType.IsScaling | MatrixType.IsTranslation;
				}

				return m;
			}

			m = new Matrix2D();
			m.setMatrix(m1.m11, m1.m12, m1.m21, m1.m22, m1.offsetX, m1.offsetY);

			switch (typeA << 4 | typeB) {
				case 34:
					m.m11 *= m2.m11;
					m.m22 *= m2.m22;
					return m;
				case 35:
					m.m11 *= m2.m11;
					m.m22 *= m2.m22;
					m.offsetX = m2.offsetX;
					m.offsetY = m2.offsetY;
					m.type = MatrixType.IsScaling | MatrixType.IsTranslation;
					return m;
				case 36:
				case 52:
				case 66:
				case 67:
				case 68:
					m.setMatrix(m1.m11 * m2.m11 + // M11
					m1.m12 * m2.m21, //

					m1.m11 * m2.m12 + // M12
					m1.m12 * m2.m22, //

					m1.m21 * m2.m11 + // M21
					m1.m22 * m2.m21, //

					m1.m21 * m2.m12 + // M22
					m1.m22 * m2.m22, //

					m1.offsetX * m2.m11 + // OffsetX
					m1.offsetY * m2.m21 + m2.offsetX, //

					m1.offsetX * m2.m12 + // OffsetY
					m1.offsetY * m2.m22 + m2.offsetY); //
					return m;
				case 50:
					m.m11 *= m2.m11;
					m.m22 *= m2.m22;
					m.offsetX *= m2.m11;
					m.offsetY *= m2.m22;
					return m;
				case 51:
					m.m11 *= m2.m11;
					m.m22 *= m2.m22;
					m.offsetX = m2.m11 * m.offsetX + m2.offsetX;
					m.offsetY = m2.m22 * m.offsetY + m2.offsetY;
					return m;
			}
		}

		m = new Matrix2D();
		m.setMatrix(m1.m11, m1.m12, m1.m21, m1.m22, m1.offsetX, m1.offsetY);
		return m;
	};

	Matrix2D.prototype.multiplyPoint = function multiplyPoint(x, y) {
		var nx = x;
		var ny = y;

		switch (this.type) {
			case MatrixType.IsIdentity:
				return new _Vector2D2["default"](nx, ny);
			case MatrixType.IsTranslation:
				nx += this.offsetX;
				ny += this.offsetY;

				return new _Vector2D2["default"](nx, ny);
			case MatrixType.IsScaling:
				nx *= this.m11;
				ny *= this.m22;

				return new _Vector2D2["default"](nx, ny);
			case MatrixType.IsScaling | MatrixType.IsTranslation:
				nx *= this.m11;
				nx += this.offsetX;
				ny *= this.m22;
				ny += this.offsetY;

				return new _Vector2D2["default"](nx, ny);
		}

		var tx = ny * this.m21 + this.offsetX;
		var ty = nx * this.m12 + this.offsetY;

		nx *= this.m11;
		nx += tx;
		ny *= this.m22;
		ny += ty;

		return new _Vector2D2["default"](nx, ny);
	};

	Matrix2D.prototype.toString = function toString() {
		return "m11=" + this.m11 + ", " + "m12=" + this.m12 + ", " + "m21=" + this.m21 + ", " + "m22=" + this.m22 + ", " + "tx=" + this.offsetX + ", " + "ty=" + this.offsetY + ", ";
	};

	Matrix2D.createIdentity = function createIdentity() {
		return new Matrix2D();
	};

	Matrix2D.createTranslation = function createTranslation(tx, ty) {
		var m = new Matrix2D();
		m.offsetX = tx;
		m.offsetY = ty;
		m.type = MatrixType.IsTranslation;

		return m;
	};

	Matrix2D.createRotation = function createRotation(angle, cx, cy) {

		cx = _Engine.ValueOrDefault(cx, 0);
		cy = _Engine.ValueOrDefault(cy, 0);

		var m = new Matrix2D();
		var cr = Math.cos(angle);
		var sr = Math.sin(angle);
		var tx = cx * (1.0 - cr) + cy * sr;
		var ty = cy * (1.0 - cr) - cx * sr;

		m.m11 = cr;
		m.m12 = sr;
		m.m21 = -sr;
		m.m22 = cr;
		m.offsetX = tx;
		m.offsetY = ty;
		m.type = MatrixType.IsUnknown;

		return m;
	};

	Matrix2D.createScale = function createScale(sx, sy, cx, cy) {
		var m = new Matrix2D();

		m.type = MatrixType.IsScaling;
		m.m11 = sx;
		m.m12 = 0;
		m.m21 = 0;
		m.m22 = sy;
		m.offsetX = 0;
		m.offsetY = 0;

		cx = _Engine.ValueOrDefault(cx, 0);
		cy = _Engine.ValueOrDefault(cy, 0);

		m.type |= MatrixType.IsTranslation;
		m.offsetX = cx - sx * cx;
		m.offsetY = cy - sy * cy;

		return m;
	};

	Matrix2D.createSkew = function createSkew(sx, sy) {
		var m = new Matrix2D();

		m.type = MatrixType.IsUnknown;
		m.m11 = 1;
		m.m12 = Math.tan(sy);
		m.m21 = Math.tan(sx);
		m.m22 = 1;
		m.offsetX = 0;
		m.offsetY = 0;

		return m;
	};

	return Matrix2D;
})(_Equatable3["default"]);

exports["default"] = Matrix2D;
module.exports = exports["default"];

},{"./Engine":44,"./EngineMath":45,"./Equatable":46,"./Vector2D":67,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],55:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _EventDispatcher2 = require("./EventDispatcher");

var _EventDispatcher3 = _interopRequireDefault(_EventDispatcher2);

var NamedObject = (function (_EventDispatcher) {
	_inherits(NamedObject, _EventDispatcher);

	function NamedObject(name) {
		_classCallCheck(this, NamedObject);

		_EventDispatcher.call(this);

		this.name = name;
		this.index = 0;
	}

	NamedObject.prototype.getName = function getName() {
		return this.name;
	};

	NamedObject.prototype.setName = function setName(value) {
		this.name = value;
	};

	NamedObject.prototype.isEqualTo = function isEqualTo(obj) {
		return this == obj;
	};

	NamedObject.prototype.toString = function toString() {
		return this.name;
	};

	return NamedObject;
})(_EventDispatcher3["default"]);

exports["default"] = NamedObject;
module.exports = exports["default"];

},{"./EventDispatcher":48,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],56:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _NamedObject2 = require("./NamedObject");

var _NamedObject3 = _interopRequireDefault(_NamedObject2);

var _CollectionEvent = require("./CollectionEvent");

var _CollectionEvent2 = _interopRequireDefault(_CollectionEvent);

var NamedObjectCollection = (function (_NamedObject) {
	_inherits(NamedObjectCollection, _NamedObject);

	function NamedObjectCollection(name_) {
		_classCallCheck(this, NamedObjectCollection);

		_NamedObject.call(this, name_);

		this.children = [];
	}

	NamedObjectCollection.prototype.add = function add(obj) {
		this.addAt(obj, this.children.length);
	};

	NamedObjectCollection.prototype.addAt = function addAt(obj, idx) {
		if (!this.exists(obj)) {
			var newIndex = idx;

			if (newIndex >= this.children.length) {
				newIndex = this.children.length;
				this.children.push(obj);
			} else {
				this.children.splice(newIndex, 0, obj);
			}

			this.onChildAdded(obj, newIndex);
		}
	};

	NamedObjectCollection.prototype.remove = function remove(obj) {

		var item = null;

		if (!this.isEmpty()) {
			var idx = this.children.indexOf(obj);

			if (idx != -1) {
				var removed = this.children.splice(idx, 1);

				if (removed != null && removed.length > 0) {
					item = removed[0];

					this.onChildRemoved(item, idx);
				}
			}
		}

		return item;
	};

	NamedObjectCollection.prototype.removeAt = function removeAt(idx) {
		return this.remove(this.getAt(idx));
	};

	NamedObjectCollection.prototype.removeByName = function removeByName(name) {
		return this.remove(this.getByName(name));
	};

	NamedObjectCollection.prototype.getAt = function getAt(idx) {
		if (idx < this.children.length) {
			return this.children[idx];
		}

		return null;
	};

	NamedObjectCollection.prototype.getByName = function getByName(name) {

		for (var i = 0, len = this.children.length; i < len; ++i) {
			var item = this.children[i];

			if (item.name == name) {
				return item;
			}
		}

		return null;
	};

	NamedObjectCollection.prototype.indexOf = function indexOf(obj) {
		return this.children.indexOf(obj);
	};

	NamedObjectCollection.prototype.clear = function clear() {
		this.children.length = 0;
	};

	NamedObjectCollection.prototype.isEmpty = function isEmpty() {
		return this.children.length == 0;
	};

	NamedObjectCollection.prototype.exists = function exists(obj) {
		if (obj == null) {
			return false;
		}

		if (!this.isEmpty()) {
			return this.children.indexOf(obj) != -1;
		}

		return false;
	};

	NamedObjectCollection.prototype.getCount = function getCount() {
		return this.children.length;
	};

	NamedObjectCollection.prototype.sort = function sort(sortFunc) {
		this.children.sort(sortFunc);
	};

	NamedObjectCollection.prototype.toString = function toString() {
		var str = "collection size: " + this.getCount();
		str += "\n";

		for (var i = 0, len = this.getCount(); i < len; ++i) {
			var child = this.children[i];
			str += "\t[" + child.index + "] ";
			str += child.name;
			str += "\n";
		}

		return str;
	};

	NamedObjectCollection.prototype.onChildAdded = function onChildAdded(obj, idx) {
		this.dispatchEvent(new _CollectionEvent2["default"](_CollectionEvent2["default"].ITEM_ADDED, -1, idx));
	};

	NamedObjectCollection.prototype.onChildRemoved = function onChildRemoved(obj, idx) {
		this.dispatchEvent(new _CollectionEvent2["default"](_CollectionEvent2["default"].ITEM_REMOVED, idx, -1));
	};

	NamedObjectCollection.prototype.onChildIndexChanged = function onChildIndexChanged(oldIndex, newIndex) {
		this.dispatchEvent(new _CollectionEvent2["default"](_CollectionEvent2["default"].ITEM_INDEX_CHANGED, oldIndex, newIndex));
	};

	return NamedObjectCollection;
})(_NamedObject3["default"]);

exports["default"] = NamedObjectCollection;
module.exports = exports["default"];

},{"./CollectionEvent":40,"./NamedObject":55,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],57:[function(require,module,exports){
"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

exports.__esModule = true;

var Pair = (function () {
	function Pair(first, second) {
		_classCallCheck(this, Pair);

		this.first = first;
		this.second = second;
	}

	Pair.prototype.getFirst = function getFirst() {
		return this.first;
	};

	Pair.prototype.setFirst = function setFirst(value) {
		this.first = value;
	};

	Pair.prototype.getSecond = function getSecond() {
		return this.second;
	};

	Pair.prototype.setSecond = function setSecond(value) {
		this.second = value;
	};

	Pair.prototype.toString = function toString() {
		return "Pair[ first: " + this.first + ", second: " + this.second + " ]";
	};

	return Pair;
})();

exports["default"] = Pair;
module.exports = exports["default"];

},{"babel-runtime/helpers/class-call-check":7}],58:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Event2 = require("./Event");

var _Event3 = _interopRequireDefault(_Event2);

var _Engine = require("./Engine");

var ProgressEvent = (function (_Event) {
	_inherits(ProgressEvent, _Event);

	function ProgressEvent(type, current, total, bubbles, cancelable) {
		_classCallCheck(this, ProgressEvent);

		_Event.call(this, type, bubbles, cancelable);

		/** Number **/
		this.current = _Engine.ValueOrDefault(current, 0);

		/** Number **/
		this.total = _Engine.ValueOrDefault(total, 0);
	}

	ProgressEvent.prototype.getPercentage = function getPercentage() {
		if (this.getTotal() == 0) {
			return 0;
		}

		return this.getCurrent() / this.getTotal();
	};

	ProgressEvent.prototype.getCurrent = function getCurrent() {
		return this.current;
	};

	ProgressEvent.prototype.getTotal = function getTotal() {
		return this.total;
	};

	ProgressEvent.prototype.toString = function toString() {
		return "ProgressEvent[ current=" + this.getCurrent() + ", total=" + this.getTotal() + " ]";
	};

	return ProgressEvent;
})(_Event3["default"]);

ProgressEvent.PROGRESS = "progress";

exports["default"] = ProgressEvent;
module.exports = exports["default"];

},{"./Engine":44,"./Event":47,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],59:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Equatable2 = require("./Equatable");

var _Equatable3 = _interopRequireDefault(_Equatable2);

var _textStringTokenizer = require("./text/StringTokenizer");

var _textStringTokenizer2 = _interopRequireDefault(_textStringTokenizer);

var _Engine = require("./Engine");

var _Vector2D = require("./Vector2D");

var _Vector2D2 = _interopRequireDefault(_Vector2D);

var _Size = require("./Size");

var _Size2 = _interopRequireDefault(_Size);

var _EngineMath = require("./EngineMath");

var Rectangle = (function (_Equatable) {
	_inherits(Rectangle, _Equatable);

	function Rectangle(x, y, width, height) {
		_classCallCheck(this, Rectangle);

		_Equatable.call(this);

		this.x = _Engine.ValueOrDefault(x, 0);
		this.y = _Engine.ValueOrDefault(y, 0);
		this.width = _Engine.ValueOrDefault(width, 0);
		this.height = _Engine.ValueOrDefault(height, 0);
	}

	Rectangle.prototype.top = function top() {
		return this.y;
	};

	Rectangle.prototype.bottom = function bottom() {
		return this.y + this.height;
	};

	Rectangle.prototype.left = function left() {
		return this.x;
	};

	Rectangle.prototype.right = function right() {
		return this.x + this.width;
	};

	Rectangle.prototype.topLeft = function topLeft() {
		return new _Vector2D2["default"](this.left(), this.top());
	};

	Rectangle.prototype.topRight = function topRight() {
		return new _Vector2D2["default"](this.right(), this.top());
	};

	Rectangle.prototype.bottomLeft = function bottomLeft() {
		return new _Vector2D2["default"](this.left(), this.bottom());
	};

	Rectangle.prototype.bottomRight = function bottomRight() {
		return new _Vector2D2["default"](this.right(), this.bottom());
	};

	Rectangle.prototype.position = function position() {
		return new _Vector2D2["default"](this.x, this.y);
	};

	Rectangle.prototype.size = function size() {
		return new _Size2["default"](this.width, this.height);
	};

	Rectangle.prototype.center = function center(local) {
		if (local) {
			return new _Vector2D2["default"](this.width * 0.5, this.height * 0.5);
		}

		return new _Vector2D2["default"](this.x + this.width * 0.5, this.y + this.height * 0.5);
	};

	Rectangle.prototype.area = function area() {
		return this.width * this.height;
	};

	Rectangle.prototype.scale = function scale(scaleX, scaleY) {
		if (!this.isEmpty()) {
			this.x *= scaleX;
			this.y *= scaleY;
			this.width *= scaleX;
			this.height *= scaleY;

			if (scaleX < 0) {
				this.x += this.width;
				this.width *= -1;
			}

			if (scaleY < 0) {
				this.y += this.height;
				this.height *= -1;
			}
		}

		return this;
	};

	Rectangle.prototype.inflate = function inflate(byX, byY) {
		if (this.isEmpty()) {
			return this;
		}

		this.x -= byX;
		this.y -= byY;
		this.width += byX;
		this.width += byX;
		this.height += byY;
		this.height += byY;

		if (this.width < 0 || this.height < 0) {
			this.x = _EngineMath.PositiveInfinity;
			this.y = _EngineMath.PositiveInfinity;
			this.width = _EngineMath.NegativeInfinity;
			this.height = _EngineMath.NegativeInfinity;
		}

		return this;
	};

	Rectangle.prototype.offset = function offset(x, y) {
		this.x += x;
		this.y += y;

		return this;
	};

	Rectangle.prototype.clamp = function clamp(x, y, width, height) {
		this.x = Math.max(this.x, x);
		this.y = Math.max(this.y, y);
		this.width = Math.min(this.width, width);
		this.height = Math.min(this.height, height);

		return this;
	};

	Rectangle.prototype.union = function union(left, top, right, bottom) {
		if (this.isZero()) {
			this.initialize(left, top, right - left, bottom - top);
			return this;
		}

		var minX = Math.min(this.x, left);
		var minY = Math.min(this.y, top);
		var maxX = Math.max(this.right(), right);
		var maxY = Math.max(this.bottom(), bottom);

		this.x = minX;
		this.y = minY;
		this.width = maxX - minX;
		this.height = maxY - minY;

		return this;
	};

	Rectangle.prototype.unionWithPoint = function unionWithPoint(pt) {
		return this.unionWithRect(new Rectangle(pt.x, pt.y, pt.x, pt.y));
	};

	Rectangle.prototype.unionWithRect = function unionWithRect(rect) {
		if (this.isZero()) {
			this.initialize(rect.x, rect.y, rect.width, rect.height);
			return this;
		}

		return this.union(rect.left(), rect.top(), rect.right(), rect.bottom());
	};

	Rectangle.prototype.contains = function contains(x, y) {
		if (this.isZero()) {
			return false;
		}

		return x >= this.x && x - this.width <= this.x && y >= this.y && y - this.height <= this.y;
	};

	Rectangle.prototype.containsPoint = function containsPoint(pt) {
		return this.contains(pt.x, pt.y);
	};

	Rectangle.prototype.containsRect = function containsRect(rect) {
		if (this.isZero() || rect.isZero()) {
			return false;
		}

		return this.x <= rect.x && this.y <= rect.y && this.right() >= rect.right() && this.bottom() >= rect.bottom();
	};

	Rectangle.prototype.intersect = function intersect(rect) {
		var left = Math.max(this.x, rect.x);
		var top = Math.max(this.y, rect.y);
		var right = Math.min(this.right(), rect.right());
		var bottom = Math.min(this.bottom(), rect.bottom());

		if (right <= left || bottom <= top) {
			return Rectangle.Zero();
		}

		return new Rectangle(left, top, right - left, bottom - top);
	};

	Rectangle.prototype.intersects = function intersects(rect) {
		if (this.isEmpty() || this.isZero() || rect.isZero()) {
			return false;
		}

		return rect.right() > this.x && rect.bottom() > this.y && rect.x < this.right() && rect.y < this.bottom();
	};

	Rectangle.prototype.round = function round() {
		this.x = Math.floor(this.x);
		this.y = Math.floor(this.y);
		this.width = Math.ceil(this.width);
		this.height = Math.ceil(this.height);

		return this;
	};

	Rectangle.prototype.isZero = function isZero() {
		return this.x == 0 && this.y == 0 && this.width == 0 && this.height == 0;
	};

	Rectangle.prototype.isEmpty = function isEmpty() {
		return this.width < 0.0;
	};

	Rectangle.prototype.isEqualTo = function isEqualTo(obj) {
		return this.x == obj.x && this.y == obj.y && this.width == obj.width && this.height == obj.height;
	};

	Rectangle.prototype.toString = function toString() {
		if (this.isEmpty()) {
			return "empty";
		}

		return this.x + "," + this.y + "," + this.width + "," + this.height;
	};

	Rectangle.prototype.toIntRect = function toIntRect() {
		var rect = new Rectangle(this.x, this.y, this.width, this.height);

		return rect.round();
	};

	Rectangle.Empty = function Empty() {
		return new Rectangle(_EngineMath.PositiveInfinity, _EngineMath.PositiveInfinity, _EngineMath.NegativeInfinity, _EngineMath.NegativeInfinity);
	};

	Rectangle.Zero = function Zero() {
		return new Rectangle(0, 0, 0, 0);
	};

	Rectangle.fromPoints = function fromPoints(p1, p2) {
		var x = Math.min(p1.x, p2.x);
		var y = Math.min(p1.y, p2.y);
		var width = Math.max(Math.max(p1.x, p2.x) - x, 0);
		var height = Math.max(Math.max(p1.y, p2.y) - y, 0);

		return new Rectangle(x, y, width, height);
	};

	Rectangle.parse = function parse(str) {
		if (str == "empty") {
			return Rectangle.Empty();
		}

		var tokenizer = new _textStringTokenizer2["default"](str);
		var x = parseFloat(tokenizer.next());
		var y = parseFloat(tokenizer.next());
		var width = parseFloat(tokenizer.next());
		var height = parseFloat(tokenizer.next());

		return new Rectangle(x, y, width, height);
	};

	return Rectangle;
})(_Equatable3["default"]);

exports["default"] = Rectangle;
module.exports = exports["default"];

},{"./Engine":44,"./EngineMath":45,"./Equatable":46,"./Size":60,"./Vector2D":67,"./text/StringTokenizer":131,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],60:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Equatable2 = require("./Equatable");

var _Equatable3 = _interopRequireDefault(_Equatable2);

var _EngineMath = require("./EngineMath");

var _Engine = require("./Engine");

var Size = (function (_Equatable) {
	_inherits(Size, _Equatable);

	function Size(width, height) {
		_classCallCheck(this, Size);

		_Equatable.call(this);

		this.width = _Engine.ValueOrDefault(width, 0);
		this.height = _Engine.ValueOrDefault(height, 0);

		if (this.width < 0 || this.height < 0) {
			throw new Error("width and height must be a non-negative value.");
		}
	}

	Size.prototype.isEmpty = function isEmpty() {
		return this.width < 0;
	};

	Size.prototype.isEqualTo = function isEqualTo(obj) {
		return this.width == obj.width && this.height == obj.height;
	};

	Size.prototype.toString = function toString() {
		return "width:" + this.width + ", height:" + this.height;
	};

	Size.Empty = function Empty() {
		var s = Size.Zero();
		s.width = _EngineMath.NegativeInfinity;
		s.height = _EngineMath.NegativeInfinity;

		return s;
	};

	Size.Zero = function Zero() {
		return new Size(0, 0);
	};

	return Size;
})(_Equatable3["default"]);

exports["default"] = Size;
module.exports = exports["default"];

},{"./Engine":44,"./EngineMath":45,"./Equatable":46,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],61:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

var _Event2 = require("./Event");

var _Event3 = _interopRequireDefault(_Event2);

var SourceEvent = (function (_Event) {
	_inherits(SourceEvent, _Event);

	function SourceEvent(type, bubbles, cancelable) {
		_classCallCheck(this, SourceEvent);

		_Event.call(this, type, bubbles, cancelable);
	}

	return SourceEvent;
})(_Event3["default"]);

SourceEvent.READY = "sourceReady";
SourceEvent.CHANGE = "sourceChange";

},{"./Event":47,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],62:[function(require,module,exports){
"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

exports.__esModule = true;

var Stack = (function () {
	function Stack() {
		_classCallCheck(this, Stack);

		this.stackImpl = [];
		this.size = 0;
	}

	Stack.prototype.getCount = function getCount() {
		return this.size;
	};

	Stack.prototype.isEmpty = function isEmpty() {
		return this.getCount() == 0;
	};

	Stack.prototype.peek = function peek() {
		if (this.size == 0) {
			throw new Error("Unable to peek at stack, stack is empty.");
		}

		return this.stackImpl[this.size - 1];
	};

	Stack.prototype.pop = function pop() {
		if (this.size == 0) {
			throw new Error("Unable to peek at stack, stack is empty.");
		}

		var obj = this.stackImpl[--this.size];
		this.stackImpl[this.size] = null;
		this.stackImpl.length = this.size;

		return obj;
	};

	Stack.prototype.push = function push(obj) {
		this.stackImpl.push(obj);
		this.size++;
	};

	Stack.prototype.contains = function contains(obj) {
		return this.stackImpl.contains(obj);
	};

	Stack.prototype.clear = function clear() {
		this.stackImpl.clear();
		this.size = 0;
	};

	Stack.prototype.clone = function clone() {
		var stack = new Stack();
		stack.size = this.size;
		stack.stackImpl = this.stackImpl.concat();

		return stack;
	};

	Stack.prototype.copyTo = function copyTo(array, atIndex) {
		if (array != null) {
			for (var i = 0; i < this.size; i++) {
				array[atIndex + i] = this.stackImpl[i];
			}
		}
	};

	Stack.prototype.toArray = function toArray() {
		return this.stackImpl.concat();
	};

	Stack.prototype.toString = function toString() {
		return "Stack[ size=" + this.size + " ]";
	};

	return Stack;
})();

exports["default"] = Stack;
module.exports = exports["default"];

},{"babel-runtime/helpers/class-call-check":7}],63:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _Engine = require("./Engine");

var SystemInfo = {
	"Name": 1,
	"Model": 2,
	"Environment": 3,
	"Version": 4,
	"Architecture": 5,
	"PlatformName": 6,
	"PlatformVersion": 7,
	"DeviceID": 8,
	"DeviceIP": 9,
	"MaxTextureSize": 10,
	"NPOTTextures": 11
};

var System = {
	getInfo: function getInfo(infoId) {

		switch (infoId) {
			case SystemInfo.Name:
				return System.getSystemName();
			case SystemInfo.Model:
				return System.getSystemModel();
			case SystemInfo.Environment:
				return System.getSystemEnvironment();
			case SystemInfo.Version:
				return System.getMochicaVersion();
			case SystemInfo.Architecture:
				return System.getSystemArchitecture();
			case SystemInfo.PlatformName:
				return System.getPlatformName();
			case SystemInfo.PlatformVersion:
				return System.getPlatformVersion();
			case SystemInfo.DeviceID:
				return System.getDeviceID();
			case SystemInfo.DeviceIP:
				return System.getDeviceIP();
			case SystemInfo.MaxTextureSize:
				return System.getMaxTextureSize();
			case SystemInfo.NPOTTextures:
				return System.getAllowsNPOTTextures();
		}

		return null;
	},

	getSystemName: function getSystemName() {
		return window.navigator.appName || "";
	},

	getSystemModel: function getSystemModel() {
		var ua = window.navigator.userAgent || window.navigator.vendor || "";

		if (_Engine.StringContains(ua, "Chrome/")) {
			return "Chrome";
		}

		if (_Engine.StringContains(ua, "Firefox/")) {
			return "Firefox";
		}

		if (_Engine.StringContains(ua, "MSIE")) {
			return "Internet Explorer";
		}

		if (_Engine.StringContains(ua, "Safari/")) {
			return "Safari";
		}

		return window.navigator.product || "";
	},

	getSystemEnvironment: function getSystemEnvironment() {
		return window.navigator.moEnvironment || "web";
	},

	getSystemArchitecture: function getSystemArchitecture() {
		return window.navigator.cpuClass || "";
	},

	getPlatformName: function getPlatformName() {
		var platform = window.navigator.platform || "";
		var ua = window.navigator.userAgent || window.navigator.vendor || "";

		if (_Engine.StringContains(platform, "Win32") || _Engine.StringContains(platform, "Win64") || _Engine.StringContains(ua, "Windows NT")) {
			return "Windows";
		}

		if (_Engine.StringContains(ua, "Linux")) {
			return "Linux";
		}

		if (_Engine.StringContains(ua, "Macintosh")) {
			return "Macintosh";
		}

		return platform;
	},

	getPlatformVersion: function getPlatformVersion() {
		return window.navigator.platformVersion || "";
	},

	getMochicaVersion: function getMochicaVersion() {
		return _Engine.Version;
	},

	getDeviceID: function getDeviceID() {
		return window.navigator.buildID || "";
	},

	getDeviceIP: function getDeviceIP() {
		return window.navigator.moDeviceIP || "127.0.0.1";
	},

	getMaxTextureSize: function getMaxTextureSize() {
		return window.navigator.moMaxTextureSize || 16384;
	},

	getAllowsNPOTTextures: function getAllowsNPOTTextures() {
		return window.navigator.moNPOTTextures || true;
	}
};

exports["default"] = System;
module.exports = exports["default"];

},{"./Engine":44}],64:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _EventDispatcher2 = require("./EventDispatcher");

var _EventDispatcher3 = _interopRequireDefault(_EventDispatcher2);

var _Engine = require("./Engine");

var _TimerEvent = require("./TimerEvent");

var _TimerEvent2 = _interopRequireDefault(_TimerEvent);

var Timer = (function (_EventDispatcher) {
	_inherits(Timer, _EventDispatcher);

	function Timer(interval, repeatCount) {
		_classCallCheck(this, Timer);

		_EventDispatcher.call(this);

		/** Integer **/
		this.repeatCount = _Engine.ValueOrDefault(repeatCount, 0);

		/** Number **/
		this.interval = _Engine.ValueOrDefault(interval, 100);

		/** Integer **/
		this.iterations = 0;

		/** Boolean **/
		this.isRunning = false;

		/** Date **/
		this.lastTickTimestamp = 0;

		this.req = null;
		this.evt = new _TimerEvent2["default"](_TimerEvent2["default"].TICK, 0, 0);
		this.cb = this.onTimerCallback.asDelegate(this);
	}

	Timer.prototype.getRepeatCount = function getRepeatCount() {
		return this.repeatCount;
	};

	Timer.prototype.setRepeatCount = function setRepeatCount(value) {
		if (this.repeatCount != value) {
			this.repeatCount = value;

			if (this.isRunning && this.repeatCount <= this.iterations) {
				this.stop();
			}
		}
	};

	Timer.prototype.getInterval = function getInterval() {
		return this.interval;
	};

	Timer.prototype.setInterval = function setInterval(value) {
		if (this.interval != value) {
			this.interval = value;

			if (this.isRunning) {
				this.reset();
				this.start();
			}
		}
	};

	Timer.prototype.getIterations = function getIterations() {
		return this.iterations;
	};

	Timer.prototype.getIsRunning = function getIsRunning() {
		return this.isRunning;
	};

	Timer.prototype.reset = function reset() {
		if (this.isRunning) this.stop();

		this.iterations = 0;
		this.lastTickTimestamp = 0;
	};

	Timer.prototype.start = function start() {
		this.lastTickTimestamp = 0;
		this.isRunning = true;
		this.requestNextSample();
	};

	Timer.prototype.stop = function stop() {
		if (!this.isRunning) return;

		this.isRunning = false;

		if (this.repeatCount == 0 || this.iterations == this.repeatCount) this.dispatchEvent(new _TimerEvent2["default"](_TimerEvent2["default"].COMPLETE, Date.now(), this.lastTickTimestamp));
	};

	Timer.prototype.onTimerCallback = function onTimerCallback(t) {
		if (!this.isRunning) return;

		if (t - this.lastTickTimestamp >= this.interval) {
			this.iterations++;

			this.evt.currentTickTime = t;
			this.evt.lastTickTime = this.lastTickTimestamp;
			this.dispatchEvent(this.evt);

			this.lastTickTimestamp = t;
		}

		if (this.isRunning && (this.repeatCount == 0 || this.iterations < this.repeatCount)) this.requestNextSample();else this.stop();
	};

	Timer.prototype.requestNextSample = function requestNextSample() {
		this.req = _Engine.RequestAnimationFrame(this.cb, null);
	};

	return Timer;
})(_EventDispatcher3["default"]);

exports["default"] = Timer;
module.exports = exports["default"];

},{"./Engine":44,"./EventDispatcher":48,"./TimerEvent":65,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],65:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _Object$assign = require("babel-runtime/core-js/object/assign")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Event2 = require("./Event");

var _Event3 = _interopRequireDefault(_Event2);

var _Engine = require("./Engine");

var TimerEvent = (function (_Event) {
	_inherits(TimerEvent, _Event);

	function TimerEvent(type, currentTickTime, lastTickTime, bubbles, cancelable) {
		_classCallCheck(this, TimerEvent);

		_Event.call(this, type, bubbles, cancelable);

		this.currentTickTime = _Engine.ValueOrDefault(currentTickTime, 0);
		this.lastTickTime = _Engine.ValueOrDefault(lastTickTime, 0);
	}

	TimerEvent.prototype.getTickTime = function getTickTime() {
		return this.currentTickTime;
	};

	TimerEvent.prototype.getLastTickTime = function getLastTickTime() {
		return this.lastTickTime;
	};

	TimerEvent.prototype.getTickDelta = function getTickDelta() {
		return this.getTickTime() - this.getLastTickTime();
	};

	return TimerEvent;
})(_Event3["default"]);

_Object$assign(TimerEvent, {
	TICK: "timerTick",
	COMPLETE: "timerComplete"
});

exports["default"] = TimerEvent;
module.exports = exports["default"];

},{"./Engine":44,"./Event":47,"babel-runtime/core-js/object/assign":1,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],66:[function(require,module,exports){
"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

exports.__esModule = true;

var Tuple = (function () {
	function Tuple(first, second, third) {
		_classCallCheck(this, Tuple);

		this.first = first;
		this.second = second;
		this.third = third;
	}

	Tuple.prototype.getFirst = function getFirst() {
		return this.first;
	};

	Tuple.prototype.setFirst = function setFirst(value) {
		this.first = value;
	};

	Tuple.prototype.getSecond = function getSecond() {
		return this.second;
	};

	Tuple.prototype.setSecond = function setSecond(value) {
		this.second = value;
	};

	Tuple.prototype.getThird = function getThird() {
		return this.third;
	};

	Tuple.prototype.setThird = function setThird(value) {
		this.third = value;
	};

	Tuple.prototype.toString = function toString() {
		return "Tuple[ first: " + this.first + ", second: " + this.second + ", third: " + this.third + " ]";
	};

	return Tuple;
})();

exports["default"] = Tuple;
module.exports = exports["default"];

},{"babel-runtime/helpers/class-call-check":7}],67:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Equatable2 = require("./Equatable");

var _Equatable3 = _interopRequireDefault(_Equatable2);

var _Engine = require("./Engine");

var _EngineMath = require("./EngineMath");

var _EngineMath2 = _interopRequireDefault(_EngineMath);

var Vector2D = (function (_Equatable) {
	_inherits(Vector2D, _Equatable);

	function Vector2D(x, y) {
		_classCallCheck(this, Vector2D);

		_Equatable.call(this);

		this.x = _Engine.ValueOrDefault(x, 0);
		this.y = _Engine.ValueOrDefault(y, 0);
	}

	Vector2D.prototype.add = function add(vector) {
		return new Vector2D(this.x + vector.x, this.y + vector.y);
	};

	Vector2D.prototype.subtract = function subtract(vector) {
		return new Vector2D(this.x - vector.x, this.y - vector.y);
	};

	Vector2D.prototype.multiply = function multiply(vector) {
		return new Vector2D(this.x * vector.x, this.y * vector.y);
	};

	Vector2D.prototype.divide = function divide(vector) {
		return new Vector2D(this.x / vector.x, this.y / vector.y);
	};

	Vector2D.prototype.interpolate = function interpolate(vector, level) {
		return new Vector2D(this.x + vector.x * level, this.y + vector.y * level);
	};

	Vector2D.prototype.negate = function negate() {
		return new Vector2D(-this.x, -this.y);
	};

	Vector2D.prototype.length = function length() {
		return Math.sqrt(this.lengthSquared());
	};

	Vector2D.prototype.lengthSquared = function lengthSquared() {
		return this.x * this.x + this.y * this.y;
	};

	Vector2D.prototype.distance = function distance(vector) {
		return this.subtract(vector).length();
	};

	Vector2D.prototype.distanceSquared = function distanceSquared(vector) {
		return this.subtract(vector).lengthSquared();
	};

	Vector2D.prototype.dotProduct = function dotProduct(vector) {
		return this.x * vector.x + this.y * vector.y;
	};

	Vector2D.prototype.crossProduct = function crossProduct(vector) {
		return this.x * vector.y - this.y * vector.x;
	};

	Vector2D.prototype.normalize = function normalize(thickness) {
		thickness = _Engine.ValueOrDefault(thickness, 1);

		var len = this.length();

		if (len == 0) {
			this.x = this.y = 0;
		} else {
			len = thickness / len;

			this.x = this.x * len;
			this.y = this.y * len;
		}
	};

	Vector2D.prototype.normalizeZero = function normalizeZero() {
		this.x = _EngineMath2["default"].normalizeZero(this.x);
		this.y = _EngineMath2["default"].normalizeZero(this.y);

		return this;
	};

	Vector2D.prototype.angle = function angle(point) {
		var delta = point.subtract(this);

		return _EngineMath2["default"].radiansToDegrees(Math.atan2(delta.y, delta.x));
	};

	Vector2D.prototype.pointTo = function pointTo(distance, angle) {
		var rads = _EngineMath2["default"].degreesToRadians(angle);

		return new Vector2D(this.x + distance * Math.cos(rads), this.y + distance * Math.sin(rads));
	};

	Vector2D.prototype.midPoint = function midPoint(vector) {
		return new Vector2D((this.x + vector.x) * 0.5, (this.y + vector.y) * 0.5);
	};

	Vector2D.prototype.rotate = function rotate(angle) {
		var r = _EngineMath2["default"].degreesToRadians(angle);
		var x = this.x * Math.cos(-r) + this.y * Math.sin(-r);
		var y = -this.x * Math.sin(-r) + this.y * Math.cos(-r);

		return new Vector2D(x, y);
	};

	Vector2D.prototype.isLessThan = function isLessThan(vector) {
		return this.x < vector.x && this.y < vector.y;
	};

	Vector2D.prototype.isGreaterThan = function isGreaterThan(vector) {
		return this.x > vector.x && this.y > vector.y;
	};

	Vector2D.prototype.isEqualTo = function isEqualTo(obj) {
		return this.x == obj.x && this.y == obj.y;
	};

	Vector2D.prototype.isZero = function isZero() {
		return this.x == 0 && this.y == 0;
	};

	Vector2D.prototype.toString = function toString() {
		return "x:" + this.x + ", y:" + this.y;
	};

	Vector2D.NotSet = function NotSet() {
		return new Vector2D(Infinity, Infinity);
	};

	Vector2D.Zero = function Zero() {
		return new Vector2D(0, 0);
	};

	Vector2D.UnitX = function UnitX() {
		return new Vector2D(1, 0);
	};

	Vector2D.UnitY = function UnitY() {
		return new Vector2D(0, 1);
	};

	Vector2D.NegativeUnitX = function NegativeUnitX() {
		return new Vector2D(-1, 0);
	};

	Vector2D.NegativeUnitY = function NegativeUnitY() {
		return new Vector2D(0, -1);
	};

	Vector2D.UnitScale = function UnitScale() {
		return new Vector2D(1, 1);
	};

	return Vector2D;
})(_Equatable3["default"]);

exports["default"] = Vector2D;
module.exports = exports["default"];

},{"./Engine":44,"./EngineMath":45,"./Equatable":46,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],68:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _EventDispatcher2 = require("../EventDispatcher");

var _EventDispatcher3 = _interopRequireDefault(_EventDispatcher2);

var _AIStateMachine = require("./AIStateMachine");

var _AIStateMachine2 = _interopRequireDefault(_AIStateMachine);

var _Event = require("../Event");

/**
 * SUMMARY:
 *	This class implements the minimum for an AI Entity, by itself it does nothing
 *	useful, however, when subclassed you can take advantage of the finite state
 *	machine and update processing.
 *
 * REMARKS:
 *	To allow for an instance of this class to be updated during the core application's
 *	update cycle, it will need to be added to a DisplaySurface by using the addAIEntity
 *	method. However, it's more convienent to just use the DisplaySurface.createAIEntity
 *	method instead, which will create an instance of your object and add it to the main
 *	update loop.
 *
 * @EVENT Event.CHANGE
 *
 * SUMMARY:
 *	Dispatched when the state has changed.
 *
 */

var _Event2 = _interopRequireDefault(_Event);

var AIEntity = (function (_EventDispatcher) {
	_inherits(AIEntity, _EventDispatcher);

	function AIEntity(name) {
		_classCallCheck(this, AIEntity);

		/**
   * SUMMARY:
   *	Initializes a new instance of this class with the specified name.
   *	You should not initialize this class directly.
   *
   * PARAMS:
   *	String name:
   *		Any name to identify this instance by.
   */
		_EventDispatcher.call(this);

		this.name = name;
		this.stateMachine = new _AIStateMachine2["default"]();
	}

	AIEntity.prototype.getName = function getName() {
		/**
   * SUMMARY:
   *	Gets the name of this entity.
   *
   * RETURNS (String):
   *	The entity's name.
   */
		return this.name;
	};

	AIEntity.prototype.update = function update(t) {
		/**
   * SUMMARY:
   *	The default behaviour of this method is to simply update
   *	this entity's state machine. Subclasses should override this
   *	method to provide their own update logic, which is called once
   *	per frame, before rendering occurs.
   *
   *	When overriding from a subclass, you should always call super.
   *
   * PARAMS:
   *	Number t:
   *		The time delta between frame updates.
   *
   * RETURNS (void):
   */
		this.stateMachine.update(t);
	};

	AIEntity.prototype.goToState = function goToState(newState) {
		/**
   * SUMMARY:
   *	Changes the state of this entity and dispatches a change event
   *	to registered listeners.
   *
   * PARAMS:
   *	AIState newState:
   *		A new AI state to enter into.
   *
   * RETURNS (void):
   */
		if (newState != null) {
			newState.target = this;
		}

		this.getStateMachine().goToState(newState);
		this.dispatchEvent(new _Event2["default"](_Event2["default"].CHANGE));
	};

	AIEntity.prototype.getCurrentState = function getCurrentState() {
		/**
   * SUMMARY:
   *	Gets the state that this entity is currently in.
   *
   * RETURNS (AIState):
   *	Returns a state object representing the entity's current state.
   */
		return this.getStateMachine().getState();
	};

	AIEntity.prototype.getStateMachine = function getStateMachine() {
		/**
   * SUMMARY:
   *	Gets the instance of the state machine used by this entity.
   *
   * RETURNS (AIStateMachine):
   */
		return this.stateMachine;
	};

	AIEntity.create = function create(name, objectType) {
		/**
   * SUMMARY:
   *	Creates a new instance of your AI entity, if this method is used then
   *	you should call addAIEntity on a DisplaySurface if you need it's update
   *	method called.
   *
   * PARAMS:
   *	String name:
   *		Any name to identify this instance by, this will be sent into the
   *		constructor.
   *
   *	Any objectType:
   *		The class type you wish to create, this must be a subclass of AIEntity.
   *
   * RETURNS (Any):
   *	A new instance of your AIEntity.
   */
		return new objectType(name);
	};

	return AIEntity;
})(_EventDispatcher3["default"]);

exports["default"] = AIEntity;
module.exports = exports["default"];

},{"../Event":47,"../EventDispatcher":48,"./AIStateMachine":69,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],69:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _EventDispatcher2 = require("../EventDispatcher");

var _EventDispatcher3 = _interopRequireDefault(_EventDispatcher2);

var AIStateMachine = (function (_EventDispatcher) {
	_inherits(AIStateMachine, _EventDispatcher);

	function AIStateMachine() {
		_classCallCheck(this, AIStateMachine);

		_EventDispatcher.call(this);

		this.state = AIStateMachine.AI_STATE_UNKNOWN;
	}

	AIStateMachine.prototype.update = function update(t) {
		if (this.hasState()) {
			this.state.update(t);
		}
	};

	AIStateMachine.prototype.getState = function getState() {
		return this.state;
	};

	AIStateMachine.prototype.hasState = function hasState() {
		return this.state != AIStateMachine.AI_STATE_UNKNOWN;
	};

	AIStateMachine.prototype.goToState = function goToState(newState) {
		if (this.state == newState) return;

		var previousState = this.state;
		var canSwitch = true;

		if (this.hasState()) {
			canSwitch = this.state.exit(newState);
		}

		if (canSwitch) {
			if (previousState != null) {
				previousState.target = null;
			}

			this.state = newState;

			if (this.hasState()) {
				this.state.enter(previousState);
			}
		}
	};

	return AIStateMachine;
})(_EventDispatcher3["default"]);

AIStateMachine.AI_STATE_UNKNOWN = null;

exports["default"] = AIStateMachine;
module.exports = exports["default"];

},{"../EventDispatcher":48,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],70:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _EventDispatcher = require("../EventDispatcher");

var _EventDispatcher2 = _interopRequireDefault(_EventDispatcher);

var _uiPropertyOptions = require("../ui/PropertyOptions");

var _uiPropertyOptions2 = _interopRequireDefault(_uiPropertyOptions);

var _uiPropertyChangedEvent = require("../ui/PropertyChangedEvent");

var _uiPropertyChangedEvent2 = _interopRequireDefault(_uiPropertyChangedEvent);

var _uiDrawable = require("../ui/Drawable");

var _uiDrawable2 = _interopRequireDefault(_uiDrawable);

var _Tuple = require("../Tuple");

var _Tuple2 = _interopRequireDefault(_Tuple);

var _Pair = require("../Pair");

var _Pair2 = _interopRequireDefault(_Pair);

var _Engine = require("../Engine");

/**
 * @MIXIN
 *
 * SUMMARY:
 *  Provides the features required to make an object animate, when applied to a class, any properties
 *  that you want animated must be enabled in the initializeAnimatablePropertiesCore method, those
 *	properties must also use the getPropertyValue/setPropertyValue instead of using a class variable
 *	for the property value.
 *
 *	Any object defined with this mixin is allowed to participate in animations.
 *
 * REMARKS:
 *  Your class must also be a subclass of EventDispatcher, whether directly or indirectly.
 *
 * <code>
 *		var Mixed = Mixin(EventDispatcher, Animatable);
 *
 *		class Ball extends Mixed {
 *			constructor() {
 *				super();
 *
 *				// must call this to initialize your properties
 *				this.initializeAnimatableProperties();
 *			}
 *
 *			initializeAnimatablePropertiesCore() {
 *				// enable the 'size' property
 *				this.enableAnimatableProperty("size", getSize, setSize, PropertyOptions.None);
 *			}
 *
 *			getSize() {
 *				return this.getPropertyValue("size");
 *			}
 *
 *			setSize(value) {
 *				this.setPropertyValue("size", value);
 *			}
 *		}
 *	</code>
 *
 * @EVENT PropertyChangedEvent.PROPERTY_CHANGED
 *
 * SUMMARY:
 *	Dispatched when a property value has changed.
 *
 */
var Animatable = {
	initializeAnimatableProperties: function initializeAnimatableProperties() {
		/**
   * SUMMARY:
   * 	Begins the initialization of properties that need to be animated. This MUST be called
   *  in your classes constructor, but after the super call. This method in turn also
   *  calls your initializeAnimatablePropertiesCore method.
   *
   * REMARKS:
   *	Throws an error if your class is not a subclass of EventDispatcher.
   *
   * RETURNS (void):
   *
   */

		if (!(this instanceof _EventDispatcher2["default"])) {
			throw new Error("Animatable must be added to classes that derive from EventDispatcher");
		}

		// because Animatable is not really a class, we can use isAnimatable to check if the object
		// is in fact an Animatable object
		this.isAnimatable = true;

		// do the actual animatable property initialization
		this.initializeAnimatablePropertiesCore();
	},

	initializeAnimatablePropertiesCore: function initializeAnimatablePropertiesCore() {
		/**
   * SUMMARY:
   * 	Override to initialize any properties that you wish to be animated.
   * 	See example above on how this method should be implemented.
   *
   * RETURNS (void):
   *
   */
	},

	getPropertyValue: function getPropertyValue(propertyName) {
		/**
   * SUMMARY:
   *  Gets the value of a property previously set using setPropertyValue.
   *
   * PARAMS:
   *  String propertyName:
   *		The name of the property you wish to get.
   *
   * RETURNS (any):
   *  The value of your property, or null if the property was never set.
   */

		return this[propertyName + "$"];
	},

	setPropertyValue: function setPropertyValue(propertyName, value) {
		/**
   * SUMMARY:
   *  Sets the value of a property, if the value is different from the
   *  value that is currently stored then a PropertyChangedEvent will
   *  be dispatched to any listeners.
   *
   * PARAMS:
   *  String propertyName:
   *		The name of the property you wish to set.
   *
   *  Any value:
   *		The value of the property, this can be any type, including null.
   *
   * RETURNS (Boolean):
   *  true if the property changed, otherwise false. You can use this value
   *  to determine whether or not you need to update anything else.
   *
   */

		var oldValue = this.getPropertyValue(propertyName);

		if (_Engine.AreNotEqual(oldValue, value)) {
			this[propertyName + "$"] = value;
			this.raisePropertyChangedEvent(propertyName, oldValue, value);

			return true;
		}

		return false;
	},

	getAnimatablePropertyTuple: function getAnimatablePropertyTuple(propertyName) {
		// @PRIVATE

		for (var i = 0; i < this.animatableProperties.length; i++) {
			var tuple = this.animatableProperties[i];

			if (tuple.getFirst() == propertyName) {
				return tuple;
			}
		}

		return null;
	},

	getAnimatablePropertySetter: function getAnimatablePropertySetter(propertyName) {
		// @PRIVATE

		var tuple = this.getAnimatablePropertyTuple(propertyName);

		if (tuple != null) {
			return tuple.getThird().getSecond();
		}

		return null;
	},

	getAnimatablePropertyGetter: function getAnimatablePropertyGetter(propertyName) {
		// @PRIVATE

		var tuple = this.getAnimatablePropertyTuple(propertyName);

		if (tuple != null) {
			return tuple.getThird().getFirst();
		}

		return null;
	},

	getAnimatablePropertyOptions: function getAnimatablePropertyOptions(propertyName) {
		// @PRIVATE

		var tuple = this.getAnimatablePropertyTuple(propertyName);

		if (tuple != null) {
			return tuple.getSecond();
		}

		return _uiPropertyOptions2["default"].None;
	},

	enableAnimatableProperty: function enableAnimatableProperty(propertyName, getterFunc, setterFunc, options) {
		/**
   * SUMMARY:
   *  Enables a property to participate in animation updates, when a property is animatable
   *  then changes to that property will also cause a layout, measure, etc... based on the
   *  options you've provided.
   *
   * PARAMS:
   *  String propertyName:
   *		The name of the property you wish to enable.
   *
   *  Function getterFunc:
   *		The function that should be used as the getter, for example, if your property name
   *		is size, then you might use a getSize method to get the value of the size property.
   *
   *  Function setterFunc:
   *		The function that should be used as the setter, for example, if your property name
   *		is size, then you might use a setSize method to set the value of the size property.
   *
   *	PropertyOptions options = PropertyOptions.None:
   *		The option flags, a combination of PropertyOptions values. These options specify
   *		how changes to the property value should affect other systems, such as layout,
   *		measurement and so on.
   *
   * RETURNS (void):
   *
   */

		options = _Engine.ValueOrDefault(options, _uiPropertyOptions2["default"].None);

		if (this.animatableProperties == null) {
			this.animatableProperties = [];
		}

		this.animatableProperties.push(new _Tuple2["default"](propertyName, options, new _Pair2["default"](getterFunc, setterFunc)));

		// enable property changes for drawables, this way, when a
		// property changes the drawable can respect the options
		if (this instanceof _uiDrawable2["default"]) {
			this.addEventHandler(_uiPropertyChangedEvent2["default"].PROPERTY_CHANGED, this.handleDependantObjectPropertyChangedEvent.asDelegate(this));
		}
	},

	disableAnimatableProperty: function disableAnimatableProperty(propertyName) {
		/**
   * SUMMARY:
   *  Disables a property that was previously enabled using enableAnimatableProperty, you
   *  can use this method if you no longer need a property to participate in animations.
   *
   * PARAMS:
   *  String propertyName:
   *		The name of the property you wish to disable.
   *
   * RETURNS (void):
   *
   */

		for (var i = this.animatableProperties.length - 1; i >= 0; i--) {
			var tuple = this.animatableProperties[i];

			if (tuple.getFirst() == propertyName) {
				this.animatableProperties.removeAt(i);
			}
		}

		// disable property changes for drawables
		if (this instanceof _uiDrawable2["default"]) {
			this.removeEventHandler(_uiPropertyChangedEvent2["default"].PROPERTY_CHANGED, this.handleDependantObjectPropertyChangedEvent.asDelegate(this));
		}
	},

	togglePropertyChangedHandlerRecursive: function togglePropertyChangedHandlerRecursive(target, handler, on) {
		// @PRIVATE

		if (this.animatableProperties == null) return;

		var props = this.animatableProperties;
		var len = props.length;
		var tuple = null;
		var propValue = null;

		// check each registered property, if one is animatable then continue
		// through that property value and so on...
		//
		// NOTE : the implementor must be responsible for removing the handlers
		//        simply by passing in false as the 'on' parameter.
		//
		for (var i = 0; i < len; ++i) {
			// get the property value and check it
			tuple = this.animatableProperties[i];
			propValue = tuple.getThird().getFirst().apply(this);

			// continue through until there are no more properties
			this.togglePropertyValue(propValue, target, handler, on);
		}

		// add or remove the handler
		if (on) {
			this.addEventHandler(_uiPropertyChangedEvent2["default"].PROPERTY_CHANGED, handler);
		} else {
			this.removeEventHandler(_uiPropertyChangedEvent2["default"].PROPERTY_CHANGED, handler);
		}
	},

	togglePropertyValue: function togglePropertyValue(propValue, target, handler, on) {
		// @PRIVATE

		if (propValue == null || !(propValue instanceof Array) && !propValue.isAnimatable) return;

		// the property is an array, iterate each item
		if (propValue instanceof Array) {
			var len = propValue.length;

			for (var i = 0; i < len; ++i) {
				this.togglePropertyValue(propValue[i], target, handler, on);
			}
		} else {
			propValue.togglePropertyChangedHandlerRecursive(target, handler, on);
		}
	},

	raisePropertyChangedEvent: function raisePropertyChangedEvent(propName, oldValue, newValue) {
		// @PRIVATE

		if (this instanceof _EventDispatcher2["default"]) {
			this.dispatchEvent(new _uiPropertyChangedEvent2["default"](_uiPropertyChangedEvent2["default"].PROPERTY_CHANGED, propName, oldValue, newValue));
		}
	}
};

exports["default"] = Animatable;
module.exports = exports["default"];

},{"../Engine":44,"../EventDispatcher":48,"../Pair":57,"../Tuple":66,"../ui/Drawable":147,"../ui/PropertyChangedEvent":155,"../ui/PropertyOptions":156,"babel-runtime/helpers/interop-require-default":11}],71:[function(require,module,exports){
"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Animatable = require("./Animatable");

var _Animatable2 = _interopRequireDefault(_Animatable);

var _EventDispatcher = require("../EventDispatcher");

var _EventDispatcher2 = _interopRequireDefault(_EventDispatcher);

var _Engine = require("../Engine");

var _EngineMath = require("../EngineMath");

var _EngineMath2 = _interopRequireDefault(_EngineMath);

var _transformsRotateTransform = require("../transforms/RotateTransform");

var _transformsRotateTransform2 = _interopRequireDefault(_transformsRotateTransform);

var _Vector2D = require("../Vector2D");

var _Vector2D2 = _interopRequireDefault(_Vector2D);

var _Application = require("../Application");

var _Application2 = _interopRequireDefault(_Application);

var _uiPen = require("../ui/Pen");

var _uiPen2 = _interopRequireDefault(_uiPen);

var _brushesSolidColorBrush = require("../brushes/SolidColorBrush");

var _brushesSolidColorBrush2 = _interopRequireDefault(_brushesSolidColorBrush);

var _uiPropertyOptions = require("../ui/PropertyOptions");

var _uiPropertyOptions2 = _interopRequireDefault(_uiPropertyOptions);

var _uiCanvas = require("../ui/Canvas");

var _uiCanvas2 = _interopRequireDefault(_uiCanvas);

var IKBoneImpl = function IKBoneImpl(x, y, angle) {
	_classCallCheck(this, IKBoneImpl);

	this.x = x;
	this.y = y;
	this.angle = angle;
};

var IK = (function () {
	function IK(name, x, y) {
		_classCallCheck(this, IK);

		this.name = name;
		this.x = x;
		this.y = y;
		this.lastBone = null;
		this.bones = [];
		this.draw = null;
	}

	IK.prototype.getName = function getName() {
		return this.name;
	};

	IK.prototype.getRoot = function getRoot() {
		if (this.bones.length == 0) {
			return null;
		}

		return this.bones[0];
	};

	IK.prototype.add = function add(bone) {
		if (bone == null) {
			return;
		}

		if (this.lastBone != null) {
			bone.prevBone = this.lastBone;
			this.lastBone.nextBone = bone;
		}

		this.bones.push(bone);
		this.lastBone = bone;
	};

	IK.prototype.remove = function remove(bone) {
		return this.removeAt(this.bones.indexOf(bone));
	};

	IK.prototype.removeAt = function removeAt(idx) {
		if (idx >= 0 && idx <= this.bones.length) {
			var list = this.bones.splice(idx);
			var last = null;

			for (var i = 0; i < this.bones.length; ++i) {
				if (last != null) {
					last.nextBone = this.bones[i];
				}

				this.bones[i].prevBone = last;
				last = this.bones[i];
			}

			return list;
		}

		return null;
	};

	IK.prototype.clear = function clear() {
		this.bones.length = 0;
	};

	IK.prototype.get = function get(name) {
		var len = this.getCount();

		for (var i = 0; i < len; ++i) {
			if (this.bones[i].getName() == name) {
				return this.bones[i];
			}
		}

		return null;
	};

	IK.prototype.getCount = function getCount() {
		return this.bones.length;
	};

	IK.prototype.getAt = function getAt(idx) {
		return this.bones[idx];
	};

	IK.prototype.rotate = function rotate(angle) {
		var root = this.getRoot();

		if (root != null) {
			root.setAngle(angle);
		}
	};

	IK.prototype.update = function update() {
		var len = this.bones.length;
		var drawable = null;
		var angle = 0;
		var px = this.x;
		var py = this.y;

		for (var i = 0; i < len; ++i) {
			drawable = this.bones[i].drawable;
			angle += _EngineMath2["default"].degreesToRadians(this.bones[i].getAngle());

			if (drawable != null) {
				var xform = drawable.getRenderTransform();
				var offset = this.bones[i].drawablePosition == null ? drawable.getCenter() : this.bones[i].drawablePosition;

				if (xform == null) {
					xform = new _transformsRotateTransform2["default"]();
					drawable.setRenderTransform(xform);
				}

				drawable.setX(px - offset.x);
				drawable.setY(py - offset.y);

				xform.setAngle(_EngineMath2["default"].radiansToDegrees(angle));
				xform.setCenterX(offset.x);
				xform.setCenterY(offset.y);
			}

			px += Math.cos(angle) * this.bones[i].getLength();
			py += Math.sin(angle) * this.bones[i].getLength();
		}

		if (this.draw) {
			this.draw.requestLayout();
			this.draw.requestMeasure();
		}
	};

	IK.prototype.moveTo = function moveTo(targetX, targetY) {
		var i;
		var len = this.bones.length;
		var bones = [];
		var worldBones = [];
		var prevBone;
		var currBone;

		for (i = 0; i <= len; ++i) {
			bones.push(new IKBoneImpl(i > 0 ? this.bones[i - 1].getLength() : 0, 0, i < len ? _EngineMath2["default"].degreesToRadians(this.bones[i].getAngle()) : 0));
		}

		len = bones.length;

		worldBones.push(new IKBoneImpl(bones[0].x, bones[0].y, bones[0].angle));

		for (i = 1; i < len; ++i) {
			prevBone = worldBones[i - 1];
			currBone = bones[i];

			worldBones.push(new IKBoneImpl(prevBone.x + Math.cos(prevBone.angle) * currBone.x - Math.sin(prevBone.angle) * currBone.y, prevBone.y + Math.sin(prevBone.angle) * currBone.x + Math.cos(prevBone.angle) * currBone.y, prevBone.angle + currBone.angle));
		}

		var endX = worldBones[len - 1].x;
		var endY = worldBones[len - 1].y;
		var modified = false;
		var success = false;
		var epsilon = 0.0001;
		var arcLength = 0.00001;

		for (i = len - 1; i >= 0; --i) {
			var curToEndX = endX - worldBones[i].x;
			var curToEndY = endY - worldBones[i].y;
			var curToEndMag = Math.sqrt(curToEndX * curToEndX + curToEndY * curToEndY);

			var curToTargetX = targetX - worldBones[i].x;
			var curToTargetY = targetY - worldBones[i].y;
			var curToTargetMag = Math.sqrt(curToTargetX * curToTargetX + curToTargetY * curToTargetY);

			var rotAngleC = 0;
			var rotAngleS = 0;
			var endTargetMag = curToEndMag * curToTargetMag;

			if (endTargetMag <= epsilon) {
				rotAngleC = 1;
				rotAngleS = 0;
			} else {
				rotAngleC = (curToEndX * curToTargetX + curToEndY * curToTargetY) / endTargetMag;
				rotAngleS = (curToEndX * curToTargetY - curToEndY * curToTargetX) / endTargetMag;
			}

			var rotAngle = Math.acos(Math.max(-1, Math.min(1, rotAngleC)));

			if (rotAngleS < 0.0) {
				rotAngle = -rotAngle;
			}

			endX = worldBones[i].x + rotAngleC * curToEndX - rotAngleS * curToEndY;
			endY = worldBones[i].y + rotAngleS * curToEndX + rotAngleC * curToEndY;

			bones[i].angle = this.simplifyAngle(bones[i].angle + rotAngle);

			var endToTargetX = targetX - endX;
			var endToTargetY = targetY - endY;

			if (endToTargetX * endToTargetX + endToTargetY * endToTargetY <= 2) {
				success = true;
				break;
			}

			if (!modified && Math.abs(rotAngle) * curToEndMag > arcLength) {
				modified = true;
			}
		}

		for (i = 0; i < this.bones.length; ++i) {
			this.bones[i].setAngle(_EngineMath2["default"].radiansToDegrees(bones[i].angle));
		}
	};

	IK.prototype.simplifyAngle = function simplifyAngle(angle) {
		angle = angle % (2.0 * Math.PI);

		if (angle < -Math.PI) {
			angle += 2.0 * Math.PI;
		} else if (angle > Math.PI) {
			angle -= 2.0 * Math.PI;
		}

		return angle;
	};

	return IK;
})();

var Mixed = _Engine.Mixin(_EventDispatcher2["default"], _Animatable2["default"]);

var IKBone = (function (_Mixed) {
	_inherits(IKBone, _Mixed);

	function IKBone(name, length, angle, drawable) {
		_classCallCheck(this, IKBone);

		_Mixed.call(this);

		this.initializeAnimatableProperties();

		this.name = name;
		this.setLength(length);
		this.setAngle(angle);

		this.prevBone = null;
		this.nextBone = null;
		this.drawable = _Engine.ValueOrDefault(drawable, null);
		this.drawablePosition = null;
	}

	IKBone.prototype.initializeAnimatablePropertiesCore = function initializeAnimatablePropertiesCore() {
		this.enableAnimatableProperty("length", this.getLength, this.setLength, _uiPropertyOptions2["default"].None);
		this.enableAnimatableProperty("angle", this.getAngle, this.setAngle, _uiPropertyOptions2["default"].None);
	};

	IKBone.prototype.getName = function getName() {
		return this.name;
	};

	IKBone.prototype.setName = function setName(value) {
		this.name = value;
	};

	IKBone.prototype.getDrawable = function getDrawable() {
		return this.drawable;
	};

	IKBone.prototype.getDrawablePosition = function getDrawablePosition() {
		return this.drawablePosition;
	};

	IKBone.prototype.setDrawablePosition = function setDrawablePosition(value) {
		if (value == null) {
			this.drawablePosition = null;
		} else {
			if (this.drawablePosition == null) {
				this.drawablePosition = new _Vector2D2["default"]();
			}

			this.drawablePosition.x = value.x;
			this.drawablePosition.y = value.y;
		}
	};

	IKBone.prototype.setDrawable = function setDrawable(value) {
		this.drawable = value;
	};

	IKBone.prototype.getAngle = function getAngle() {
		return this.getPropertyValue("angle");
	};

	IKBone.prototype.setAngle = function setAngle(value) {
		this.setPropertyValue("angle", value);
	};

	IKBone.prototype.getLength = function getLength() {
		return this.getPropertyValue("length");
	};

	IKBone.prototype.setLength = function setLength(value) {
		this.setPropertyValue("length", value);
	};

	IKBone.prototype.getPrevBone = function getPrevBone() {
		return this.prevBone;
	};

	IKBone.prototype.getNextBone = function getNextBone() {
		return this.nextBone;
	};

	return IKBone;
})(Mixed);

var IKContainer = (function (_Canvas) {
	_inherits(IKContainer, _Canvas);

	function IKContainer(name, surface) {
		_classCallCheck(this, IKContainer);

		_Canvas.call(this, name);

		surface = _Engine.ValueOrDefault(surface, _Application2["default"].getInstance().getDisplaySurfaceAt(0));

		this.ik = surface.createArmature(name, 0, 0);
	}

	IKContainer.prototype.getIK = function getIK() {
		return this.ik;
	};

	IKContainer.prototype.attach = function attach(bone) {
		this.ik.add(bone);
	};

	IKContainer.prototype.getBone = function getBone(name) {
		return this.ik.get(name);
	};

	IKContainer.prototype.getBoneAt = function getBoneAt(idx) {
		return this.ik.getAt(idx);
	};

	IKContainer.prototype.getBoneCount = function getBoneCount() {
		return this.ik.getCount();
	};

	IKContainer.prototype.addBone = function addBone(length, angle, drawable, anchorPoint) {
		anchorPoint = _Engine.ValueOrDefault(anchorPoint, new _Vector2D2["default"](0, drawable.getHeight() * 0.5));

		var bone = new IKBone(drawable.getName(), length, angle, drawable);
		bone.setDrawablePosition(anchorPoint);

		this.ik.add(bone);
		this.add(drawable);

		return bone;
	};

	return IKContainer;
})(_uiCanvas2["default"]);

var IKDraw = (function (_Canvas2) {
	_inherits(IKDraw, _Canvas2);

	function IKDraw(ik) {
		_classCallCheck(this, IKDraw);

		_Canvas2.call(this, "ikdraw");

		this.ik = ik;
		this.ik.draw = this;
	}

	IKDraw.prototype.layout = function layout(unscaledWidth, unscaledHeight) {
		_Canvas2.prototype.layout.call(this, unscaledWidth, unscaledHeight);

		var gfx = this.getGraphics();
		var bones = this.ik.bones;
		var len = bones.length;
		var angle = 0;
		var px = 0;
		var py = 0;

		gfx.beginPath();
		gfx.moveTo(0, 0);

		for (var i = 0; i < len; ++i) {
			angle += _EngineMath2["default"].degreesToRadians(bones[i].getAngle());

			px += Math.cos(angle) * bones[i].getLength();
			py += Math.sin(angle) * bones[i].getLength();

			gfx.lineTo(px, py);
		}

		gfx.stroke(new _uiPen2["default"](_brushesSolidColorBrush2["default"].red(), 2));
	};

	return IKDraw;
})(_uiCanvas2["default"]);

exports["default"] = IK;
module.exports = exports["default"];

},{"../Application":38,"../Engine":44,"../EngineMath":45,"../EventDispatcher":48,"../Vector2D":67,"../brushes/SolidColorBrush":77,"../transforms/RotateTransform":134,"../ui/Canvas":139,"../ui/Pen":152,"../ui/PropertyOptions":156,"./Animatable":70,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],72:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _EventDispatcher = require("../EventDispatcher");

var _EventDispatcher2 = _interopRequireDefault(_EventDispatcher);

var _animationAnimatable = require("../animation/Animatable");

var _animationAnimatable2 = _interopRequireDefault(_animationAnimatable);

var _SourceEvent = require("../SourceEvent");

var _SourceEvent2 = _interopRequireDefault(_SourceEvent);

var _uiPropertyOptions = require("../ui/PropertyOptions");

var _uiPropertyOptions2 = _interopRequireDefault(_uiPropertyOptions);

var _Engine = require("../Engine");

var Mixed = _Engine.Mixin(_EventDispatcher2["default"], _animationAnimatable2["default"]);

var Brush = (function (_Mixed) {
	_inherits(Brush, _Mixed);

	function Brush() {
		_classCallCheck(this, Brush);

		_Mixed.call(this);

		/** Boolean **/
		this.isAvailable = false;

		/** CanvasGradient/CanvasPattern **/
		this.nativeBrushCache = null;

		this.setOpacity(1);
		this.initializeAnimatableProperties();
	}

	Brush.prototype.initializeAnimatablePropertiesCore = function initializeAnimatablePropertiesCore() {
		this.enableAnimatableProperty("transform", this.getTransform, this.setTransform, _uiPropertyOptions2["default"].AffectsLayout | _uiPropertyOptions2["default"].AffectsMeasure);
		this.enableAnimatableProperty("opacity", this.getOpacity, this.setOpacity, _uiPropertyOptions2["default"].AffectsLayout);
	};

	Brush.prototype.getIsAvailable = function getIsAvailable() {
		return this.isAvailable;
	};

	Brush.prototype.getTransform = function getTransform() {
		return this.getPropertyValue("transform");
	};

	Brush.prototype.setTransform = function setTransform(value) {
		this.setPropertyValue("transform", value);
	};

	Brush.prototype.getOpacity = function getOpacity() {
		return this.getPropertyValue("opacity");
	};

	Brush.prototype.setOpacity = function setOpacity(value) {
		this.setPropertyValue("opacity", Math.min(1, Math.max(0, value)));
	};

	Brush.prototype.raiseAvailableEvent = function raiseAvailableEvent() {
		this.isAvailable = true;
		this.dispatchEvent(new _SourceEvent2["default"](_SourceEvent2["default"].READY));
		this.raisePropertyChangedEvent("isAvailable", false, true);
	};

	Brush.prototype.isEqualTo = function isEqualTo(other) {
		if (this.getOpacity() == other.getOpacity()) {
			return _Engine.AreEqual(this.getTransform(), other.getTransform());
		}

		return false;
	};

	return Brush;
})(Mixed);

exports["default"] = Brush;
module.exports = exports["default"];

},{"../Engine":44,"../EventDispatcher":48,"../SourceEvent":61,"../animation/Animatable":70,"../ui/PropertyOptions":156,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],73:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Brush2 = require("./Brush");

var _Brush3 = _interopRequireDefault(_Brush2);

var _uiPropertyOptions = require("../ui/PropertyOptions");

var _uiPropertyOptions2 = _interopRequireDefault(_uiPropertyOptions);

var GradientBrush = (function (_Brush) {
	_inherits(GradientBrush, _Brush);

	function GradientBrush() {
		_classCallCheck(this, GradientBrush);

		_Brush.call(this);

		this.setColorStops();
	}

	GradientBrush.prototype.initializeAnimatablePropertiesCore = function initializeAnimatablePropertiesCore() {
		_Brush.prototype.initializeAnimatablePropertiesCore.call(this);

		this.enableAnimatableProperty("colorStops", this.getColorStops, this.setColorStops, _uiPropertyOptions2["default"].AffectsLayout);
	};

	GradientBrush.prototype.getColorStops = function getColorStops() {
		return this.getPropertyValue("colorStops");
	};

	GradientBrush.prototype.setColorStops = function setColorStops(value) {
		if (value == null) {
			value = [];
		}

		this.setPropertyValue("colorStops", value);
	};

	GradientBrush.prototype.getColorStopCount = function getColorStopCount() {
		return this.getColorStops().length;
	};

	GradientBrush.prototype.getColorStop = function getColorStop(index) {
		return this.getColorStops()[index];
	};

	GradientBrush.prototype.addColorStop = function addColorStop(value) {
		var stops = this.getColorStops();
		stops.push(value);

		this.setColorStops(stops);
	};

	GradientBrush.prototype.clearColorStops = function clearColorStops() {
		this.setColorStops(null);
	};

	GradientBrush.prototype.isEqualTo = function isEqualTo(other) {
		if (_Brush.prototype.isEqualTo.call(this, other) && this.getColorStopCount() == other.getColorStopCount()) {
			var len = this.getColorStopCount();
			var stopA = null;
			var stopB = null;

			for (var i = 0; i < len; ++i) {
				stopA = this.getColorStop(i);
				stopB = other.getColorStop(i);

				if (stopA.isNotEqualTo(stopB)) {
					return false;
				}
			}

			return true;
		}

		return false;
	};

	return GradientBrush;
})(_Brush3["default"]);

exports["default"] = GradientBrush;
module.exports = exports["default"];

},{"../ui/PropertyOptions":156,"./Brush":72,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],74:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Brush2 = require("./Brush");

var _Brush3 = _interopRequireDefault(_Brush2);

var _uiHorizontalAlignment = require("../ui/HorizontalAlignment");

var _uiHorizontalAlignment2 = _interopRequireDefault(_uiHorizontalAlignment);

var _uiVerticalAlignment = require("../ui/VerticalAlignment");

var _uiVerticalAlignment2 = _interopRequireDefault(_uiVerticalAlignment);

var _uiStretch = require("../ui/Stretch");

var _uiStretch2 = _interopRequireDefault(_uiStretch);

var _uiTextureSource = require("../ui/TextureSource");

var _uiTextureSource2 = _interopRequireDefault(_uiTextureSource);

var _SourceEvent = require("../SourceEvent");

var _SourceEvent2 = _interopRequireDefault(_SourceEvent);

var ImageBrush = (function (_Brush) {
	_inherits(ImageBrush, _Brush);

	function ImageBrush() {
		_classCallCheck(this, ImageBrush);

		_Brush.call(this);

		/** TextureSource **/
		this.texture = null;

		this.setHorizontalAlignment(_uiHorizontalAlignment2["default"].Center);
		this.setVerticalAlignment(_uiVerticalAlignment2["default"].Center);
		this.setStretch(_uiStretch2["default"].Fill);
	}

	ImageBrush.prototype.getSourceUrl = function getSourceUrl() {
		return this.getPropertyValue("sourceUrl");
	};

	ImageBrush.prototype.setSourceUrl = function setSourceUrl(value) {
		if (this.setPropertyValue("sourceUrl", value)) {
			this.loadImage();
		}
	};

	ImageBrush.prototype.getHorizontalAlignment = function getHorizontalAlignment() {
		return this.getPropertyValue("horizontalAlignment");
	};

	ImageBrush.prototype.setHorizontalAlignment = function setHorizontalAlignment(value) {
		this.setPropertyValue("horizontalAlignment", value);
	};

	ImageBrush.prototype.getVerticalAlignment = function getVerticalAlignment() {
		return this.getPropertyValue("verticalAlignment");
	};

	ImageBrush.prototype.setVerticalAlignment = function setVerticalAlignment(value) {
		this.setPropertyValue("verticalAlignment", value);
	};

	ImageBrush.prototype.getStretch = function getStretch() {
		return this.getPropertyValue("stretch");
	};

	ImageBrush.prototype.setStretch = function setStretch(value) {
		this.setPropertyValue("stretch", value);
	};

	ImageBrush.prototype.loadImage = function loadImage() {

		this.texture = null;

		if (this.getSourceUrl() != null) {
			this.texture = new _uiTextureSource2["default"]();
			this.texture.addEventHandler(_SourceEvent2["default"].READY, this.onTextureSourceReady.asDelegate(this));
			this.texture.setUrl(this.getSourceUrl());

			this.raisePropertyChangedEvent("texture");
		}
	};

	ImageBrush.prototype.onTextureSourceReady = function onTextureSourceReady(event) {
		this.raiseAvailableEvent();
	};

	ImageBrush.prototype.isEqualTo = function isEqualTo(other) {
		return _Brush.prototype.isEqualTo.call(this, other) && this.getSourceUrl() == other.getSourceUrl();
	};

	ImageBrush.fromUrl = function fromUrl(url) {
		var brush = new ImageBrush();
		brush.setSourceUrl(url);

		return brush;
	};

	return ImageBrush;
})(_Brush3["default"]);

exports["default"] = ImageBrush;
module.exports = exports["default"];

},{"../SourceEvent":61,"../ui/HorizontalAlignment":148,"../ui/Stretch":158,"../ui/TextureSource":161,"../ui/VerticalAlignment":162,"./Brush":72,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],75:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _GradientBrush2 = require("./GradientBrush");

var _GradientBrush3 = _interopRequireDefault(_GradientBrush2);

var _Engine = require("../Engine");

var _Vector2D = require("../Vector2D");

var _Vector2D2 = _interopRequireDefault(_Vector2D);

var _EngineMath = require("../EngineMath");

var _EngineMath2 = _interopRequireDefault(_EngineMath);

var _graphicsGradientStop = require("../graphics/GradientStop");

var _graphicsGradientStop2 = _interopRequireDefault(_graphicsGradientStop);

var LinearGradientBrush = (function (_GradientBrush) {
	_inherits(LinearGradientBrush, _GradientBrush);

	function LinearGradientBrush() {
		_classCallCheck(this, LinearGradientBrush);

		_GradientBrush.call(this);

		this.setStartPoint(new _Vector2D2["default"](0, 0));
		this.setEndPoint(new _Vector2D2["default"](1, 1));
	}

	LinearGradientBrush.prototype.initializeAnimatablePropertiesCore = function initializeAnimatablePropertiesCore() {
		_GradientBrush.prototype.initializeAnimatablePropertiesCore.call(this);

		this.enableAnimatableProperty("startPoint", this.getStartPoint, this.setStartPoint);
		this.enableAnimatableProperty("endPoint", this.getEndPoint, this.setEndPoint);
	};

	LinearGradientBrush.prototype.getStartPoint = function getStartPoint() {
		return this.getPropertyValue("startPoint");
	};

	LinearGradientBrush.prototype.setStartPoint = function setStartPoint(value) {
		this.setPropertyValue("startPoint", value);
	};

	LinearGradientBrush.prototype.getEndPoint = function getEndPoint() {
		return this.getPropertyValue("endPoint");
	};

	LinearGradientBrush.prototype.setEndPoint = function setEndPoint(value) {
		this.setPropertyValue("endPoint", value);
	};

	LinearGradientBrush.prototype.isEqualTo = function isEqualTo(other) {
		return _GradientBrush.prototype.isEqualTo.call(this, other) && _Engine.AreEqual(this.getStartPoint(), other.getStartPoint()) && _Engine.AreEqual(this.getEndPoint(), other.getEndPoint());
	};

	LinearGradientBrush.computeStartPointFromAngle = function computeStartPointFromAngle(angle) {
		return _EngineMath2["default"].pointOfAngle(_EngineMath2["default"].degreesToRadians(180 - angle % 360)).normalizeZero();
	};

	LinearGradientBrush.computeEndPointFromAngle = function computeEndPointFromAngle(angle) {
		return _EngineMath2["default"].pointOfAngle(_EngineMath2["default"].degreesToRadians(360 - angle % 360)).normalizeZero();
	};

	LinearGradientBrush.fromGradientStops = function fromGradientStops(stops) {
		var brush = new LinearGradientBrush();
		brush.setColorStops(stops);

		return brush;
	};

	LinearGradientBrush.fromGradientStopsWithAngle = function fromGradientStopsWithAngle(stops, angle) {
		var brush = LinearGradientBrush.fromGradientStops(stops);
		brush.setStartPoint(LinearGradientBrush.computeStartPointFromAngle(angle));
		brush.setEndPoint(LinearGradientBrush.computeEndPointFromAngle(angle));

		return brush;
	};

	LinearGradientBrush.fromColorsWithAngle = function fromColorsWithAngle(startColor, endColor, angle) {
		var stops = [new _graphicsGradientStop2["default"](startColor, 0), new _graphicsGradientStop2["default"](endColor, 1)];

		return LinearGradientBrush.fromGradientStopsWithAngle(stops, angle);
	};

	return LinearGradientBrush;
})(_GradientBrush3["default"]);

exports["default"] = LinearGradientBrush;
module.exports = exports["default"];

},{"../Engine":44,"../EngineMath":45,"../Vector2D":67,"../graphics/GradientStop":81,"./GradientBrush":73,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],76:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _GradientBrush2 = require("./GradientBrush");

var _GradientBrush3 = _interopRequireDefault(_GradientBrush2);

var _Vector2D = require("../Vector2D");

var _Vector2D2 = _interopRequireDefault(_Vector2D);

var _uiPropertyOptions = require("../ui/PropertyOptions");

var _uiPropertyOptions2 = _interopRequireDefault(_uiPropertyOptions);

var _Engine = require("../Engine");

var _graphicsGradientStop = require("../graphics/GradientStop");

var _graphicsGradientStop2 = _interopRequireDefault(_graphicsGradientStop);

var RadialGradientBrush = (function (_GradientBrush) {
	_inherits(RadialGradientBrush, _GradientBrush);

	function RadialGradientBrush() {
		_classCallCheck(this, RadialGradientBrush);

		_GradientBrush.call(this);

		this.setStartPoint(new _Vector2D2["default"](0.5, 0.5));
		this.setEndPoint(new _Vector2D2["default"](0.5, 0.5));
		this.setStartRadius(0);
		this.setEndRadius(1);
	}

	RadialGradientBrush.prototype.initializeAnimatablePropertiesCore = function initializeAnimatablePropertiesCore() {
		_GradientBrush.prototype.initializeAnimatablePropertiesCore.call(this);

		this.enableAnimatableProperty("startPoint", this.getStartPoint, this.setStartPoint, _uiPropertyOptions2["default"].AffectsLayout);
		this.enableAnimatableProperty("startRadius", this.getStartRadius, this.setStartRadius, _uiPropertyOptions2["default"].AffectsLayout);
		this.enableAnimatableProperty("endPoint", this.getEndPoint, this.setEndPoint, _uiPropertyOptions2["default"].AffectsLayout);
		this.enableAnimatableProperty("endRadius", this.getEndRadius, this.setEndRadius, _uiPropertyOptions2["default"].AffectsLayout);
	};

	RadialGradientBrush.prototype.getStartPoint = function getStartPoint() {
		return this.getPropertyValue("startPoint");
	};

	RadialGradientBrush.prototype.setStartPoint = function setStartPoint(value) {
		this.setPropertyValue("startPoint", value);
	};

	RadialGradientBrush.prototype.getEndPoint = function getEndPoint() {
		return this.getPropertyValue("endPoint");
	};

	RadialGradientBrush.prototype.setEndPoint = function setEndPoint(value) {
		this.setPropertyValue("endPoint", value);
	};

	RadialGradientBrush.prototype.getStartRadius = function getStartRadius() {
		return this.getPropertyValue("startRadius");
	};

	RadialGradientBrush.prototype.setStartRadius = function setStartRadius(value) {
		this.setPropertyValue("startRadius", value);
	};

	RadialGradientBrush.prototype.getEndRadius = function getEndRadius() {
		return this.getPropertyValue("endRadius");
	};

	RadialGradientBrush.prototype.setEndRadius = function setEndRadius(value) {
		this.setPropertyValue("endRadius", value);
	};

	RadialGradientBrush.prototype.isEqualTo = function isEqualTo(other) {
		return _GradientBrush.prototype.isEqualTo.call(this, other) && _Engine.AreEqual(this.getStartPoint(), other.getStartPoint()) && _Engine.AreEqual(this.getEndPoint(), other.getEndPoint()) && this.getStartRadius() == other.getStartRadius() && this.getEndRadius() == other.getEndRadius();
	};

	RadialGradientBrush.fromGradientStops = function fromGradientStops(stops) {
		var brush = new RadialGradientBrush();
		brush.setColorStops(stops);

		return brush;
	};

	RadialGradientBrush.fromColors = function fromColors(startColor, endColor) {
		var stops = [new _graphicsGradientStop2["default"](startColor, 0), new _graphicsGradientStop2["default"](endColor, 1)];

		return RadialGradientBrush.fromGradientStops(stops);
	};

	return RadialGradientBrush;
})(_GradientBrush3["default"]);

exports["default"] = RadialGradientBrush;
module.exports = exports["default"];

},{"../Engine":44,"../Vector2D":67,"../graphics/GradientStop":81,"../ui/PropertyOptions":156,"./GradientBrush":73,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],77:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Brush2 = require("./Brush");

var _Brush3 = _interopRequireDefault(_Brush2);

var _uiPropertyOptions = require("../ui/PropertyOptions");

var _uiPropertyOptions2 = _interopRequireDefault(_uiPropertyOptions);

var _Engine = require("../Engine");

var _graphicsColor = require("../graphics/Color");

var _graphicsColor2 = _interopRequireDefault(_graphicsColor);

var SolidColorBrush = (function (_Brush) {
	_inherits(SolidColorBrush, _Brush);

	function SolidColorBrush(color) {
		_classCallCheck(this, SolidColorBrush);

		_Brush.call(this);

		this.setColor(color);
	}

	SolidColorBrush.prototype.initializeAnimatablePropertiesCore = function initializeAnimatablePropertiesCore() {
		_Brush.prototype.initializeAnimatablePropertiesCore.call(this);

		this.enableAnimatableProperty("color", this.getColor, this.setColor, _uiPropertyOptions2["default"].AffectsLayout);
	};

	SolidColorBrush.prototype.getColor = function getColor() {
		return this.getPropertyValue("color");
	};

	SolidColorBrush.prototype.setColor = function setColor(value) {
		this.setPropertyValue("color", value);
	};

	SolidColorBrush.prototype.isEqualTo = function isEqualTo(other) {
		if (_Brush.prototype.isEqualTo.call(this, other)) {
			return _Engine.AreEqual(this.getColor(), other.getColor());
		}

		return false;
	};

	SolidColorBrush.fromColor = function fromColor(color) {
		return new SolidColorBrush(color);
	};

	SolidColorBrush.fromColorHex = function fromColorHex(hexColor) {
		return SolidColorBrush.fromColor(_graphicsColor2["default"].fromHex(hexColor));
	};

	SolidColorBrush.fromColorHexWithAlpha = function fromColorHexWithAlpha(hexColor, alpha) {
		return SolidColorBrush.fromColor(_graphicsColor2["default"].fromHexWithAlpha(hexColor, alpha));
	};

	SolidColorBrush.fromColorRGB = function fromColorRGB(r, g, b) {
		return SolidColorBrush.fromColor(new _graphicsColor2["default"](r, g, b, 1.0));
	};

	SolidColorBrush.fromColorRGBA = function fromColorRGBA(r, g, b, a) {
		return SolidColorBrush.fromColor(new _graphicsColor2["default"](r, g, b, a));
	};

	SolidColorBrush.black = function black() {
		return SolidColorBrush.fromColor(_graphicsColor2["default"].black());
	};

	SolidColorBrush.white = function white() {
		return SolidColorBrush.fromColor(_graphicsColor2["default"].white());
	};

	SolidColorBrush.red = function red() {
		return SolidColorBrush.fromColor(_graphicsColor2["default"].red());
	};

	SolidColorBrush.green = function green() {
		return SolidColorBrush.fromColor(_graphicsColor2["default"].green());
	};

	SolidColorBrush.blue = function blue() {
		return SolidColorBrush.fromColor(_graphicsColor2["default"].blue());
	};

	SolidColorBrush.yellow = function yellow() {
		return SolidColorBrush.fromColor(_graphicsColor2["default"].yellow());
	};

	SolidColorBrush.magenta = function magenta() {
		return SolidColorBrush.fromColor(_graphicsColor2["default"].magenta());
	};

	SolidColorBrush.turquoise = function turquoise() {
		return SolidColorBrush.fromColor(_graphicsColor2["default"].turquoise());
	};

	SolidColorBrush.transparent = function transparent() {
		return SolidColorBrush.fromColor(_graphicsColor2["default"].transparent());
	};

	return SolidColorBrush;
})(_Brush3["default"]);

exports["default"] = SolidColorBrush;
module.exports = exports["default"];

},{"../Engine":44,"../graphics/Color":79,"../ui/PropertyOptions":156,"./Brush":72,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],78:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Brush2 = require("./Brush");

var _Brush3 = _interopRequireDefault(_Brush2);

var _mediaVideoEvent = require("../media/VideoEvent");

var _mediaVideoEvent2 = _interopRequireDefault(_mediaVideoEvent);

var _uiHorizontalAlignment = require("../ui/HorizontalAlignment");

var _uiHorizontalAlignment2 = _interopRequireDefault(_uiHorizontalAlignment);

var _uiVerticalAlignment = require("../ui/VerticalAlignment");

var _uiVerticalAlignment2 = _interopRequireDefault(_uiVerticalAlignment);

var _uiStretch = require("../ui/Stretch");

var _uiStretch2 = _interopRequireDefault(_uiStretch);

var VideoBrush = (function (_Brush) {
	_inherits(VideoBrush, _Brush);

	function VideoBrush(sourceElement) {
		_classCallCheck(this, VideoBrush);

		_Brush.call(this);

		this.sourceElement = sourceElement;
		this.sourceElement.addEventHandler(_mediaVideoEvent2["default"].FRAME_CHANGE, this.handleFrameChangeEvent.asDelegate(this));
		this.isFirstFrame = false;

		this.setHorizontalAlignment(_uiHorizontalAlignment2["default"].Center);
		this.setVerticalAlignment(_uiVerticalAlignment2["default"].Center);
		this.setStretch(_uiStretch2["default"].Fill);
		this.setFrame(0);
	}

	VideoBrush.prototype.getNaturalSize = function getNaturalSize() {
		return this.sourceElement.getNaturalSize();
	};

	VideoBrush.prototype.getSourceElement = function getSourceElement() {
		return this.sourceElement.getSourceElement();
	};

	VideoBrush.prototype.getCurrentPosition = function getCurrentPosition() {
		return this.sourceElement.getCurrentPosition();
	};

	VideoBrush.prototype.getStretch = function getStretch() {
		return this.getPropertyValue("stretch");
	};

	VideoBrush.prototype.setStretch = function setStretch(value) {
		this.setPropertyValue("stretch", value);
	};

	VideoBrush.prototype.getHorizontalAlignment = function getHorizontalAlignment() {
		return this.getPropertyValue("horizontalAlignment");
	};

	VideoBrush.prototype.setHorizontalAlignment = function setHorizontalAlignment(value) {
		this.setPropertyValue("horizontalAlignment", value);
	};

	VideoBrush.prototype.getVerticalAlignment = function getVerticalAlignment() {
		return this.getPropertyValue("verticalAlignment");
	};

	VideoBrush.prototype.setVerticalAlignment = function setVerticalAlignment(value) {
		this.setPropertyValue("verticalAlignment", value);
	};

	VideoBrush.prototype.getFrame = function getFrame() {
		return this.getPropertyValue("frame");
	};

	VideoBrush.prototype.setFrame = function setFrame(value) {
		this.setPropertyValue("frame", value);
	};

	VideoBrush.prototype.handleFrameChangeEvent = function handleFrameChangeEvent(event) {
		if (!this.isFirstFrame) {
			this.isFirstFrame = true;
			this.raiseAvailableEvent();
		}

		this.setFrame(this.getFrame() + 1);
	};

	VideoBrush.prototype.isEqualTo = function isEqualTo(other) {
		return _Brush.prototype.isEqualTo.call(this, other) && this.sourceElement == other.sourceElement;
	};

	return VideoBrush;
})(_Brush3["default"]);

exports["default"] = VideoBrush;
module.exports = exports["default"];

},{"../media/VideoEvent":114,"../ui/HorizontalAlignment":148,"../ui/Stretch":158,"../ui/VerticalAlignment":162,"./Brush":72,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],79:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Equatable2 = require("../Equatable");

var _Equatable3 = _interopRequireDefault(_Equatable2);

var _Engine = require("../Engine");

var Color = (function (_Equatable) {
	_inherits(Color, _Equatable);

	function Color(r, g, b, a) {
		_classCallCheck(this, Color);

		_Equatable.call(this);
		this.r = _Engine.ValueOrDefault(r, 1.0);
		this.g = _Engine.ValueOrDefault(g, 1.0);
		this.b = _Engine.ValueOrDefault(b, 1.0);
		this.a = _Engine.ValueOrDefault(a, 1.0);
	}

	Color.prototype.add = function add(color) {
		return new Color(Math.min(this.r + color.r, 1.0), Math.min(this.g + color.g, 1.0), Math.min(this.b + color.b, 1.0), Math.min(this.a + color.a, 1.0));
	};

	Color.prototype.subtract = function subtract(color) {
		return new Color(Math.max(this.r - color.r, 0.0), Math.max(this.g - color.g, 0.0), Math.max(this.b - color.b, 0.0), Math.max(this.a - color.a, 0.0));
	};

	Color.prototype.toRGB = function toRGB() {
		return this.r * 255 << 16 | this.g * 255 << 8 | this.b * 255;
	};

	Color.prototype.toRGBString = function toRGBString() {
		return "rgb(" + parseInt(this.r * 255) + "," + parseInt(this.g * 255) + "," + parseInt(this.b * 255) + ")";
	};

	Color.prototype.toRGBAString = function toRGBAString() {
		return "rgba(" + parseInt(this.r * 255) + "," + parseInt(this.g * 255) + "," + parseInt(this.b * 255) + "," + Math.max(Math.min(this.a.toFixed(2), 1.0), 0.0) + ")";
	};

	Color.prototype.toHex = function toHex() {
		return "#" + this.toRGB().toString(16);
	};

	Color.prototype.isEqualTo = function isEqualTo(color) {
		return color.r == this.r && color.g == this.g && color.b == this.b && color.a == this.a;
	};

	Color.prototype.toString = function toString() {
		return this.toRGBString();
	};

	Color.fromColor = function fromColor(color) {
		return new Color(color.r, color.g, color.b, color.a);
	};

	Color.fromRGB = function fromRGB(value) {
		return new Color((value >> 16 & 0xff) / 255, (value >> 8 & 0xff) / 255, (value & 0xff) / 255, 1);
	};

	Color.fromCSSColor = function fromCSSColor(value) {
		if (!value) {
			return Color.Transparent;
		}

		if (value[0] == "#") {
			return Color.fromHex(value);
		}

		// parse as rgb(0,0,0) or rgba(0,0,0,0)
		var colorString = value.toLowerCase();

		if (colorString[0] == "r" && colorString[1] == "g" && colorString[2] == "b") {
			var components = value.substring(value.indexOf("(") + 1, value.length - 1).split(",");

			for (var i = 0; i < components.length; ++i) {
				components[i] = components[i].replace(" ", "");
			}

			var r = components[0];
			var g = components[1];
			var b = components[2];
			var a = components.length > 3 ? components[3] : "1";

			return new Color(parseInt(r) / 255, parseInt(g) / 255, parseInt(b) / 255, parseFloat(a));
		}

		return Color.Transparent;
	};

	Color.fromHSV = function fromHSV(h, s, v, a) {
		s = Math.max(0.0, Math.min(1.0, s));
		v = Math.max(0.0, Math.min(1.0, v));

		if (s > 0) {
			h = (h < 0 ? h % 360 + 360 : h % 360) / 60;

			if (h < 1) {
				return new Color(v, v * (1 - s * (1 - h)), v * (1 - s), a);
			} else if (h < 2) {
				return new Color(v * (1 - s * (h - 1)), v, v * (1 - s), a);
			} else if (h < 3) {
				return new Color(v * (1 - s), v, v * (1 - s * (3 - h)), a);
			} else if (h < 4) {
				return new Color(v * (1 - s), v * (1 - s * (h - 3)), v, a);
			} else if (h < 5) {
				return new Color(v * (1 - s * (5 - h)), v * (1 - s), v, a);
			} else {
				return new Color(v, v * (1 - s), v * (1 - s * (h - 5)), a);
			}
		}

		return new Color(v, v, v, a);
	};

	Color.fromHex = function fromHex(value) {

		if (value.length == 9) {
			// # + 8 color components (includes an alpha)
			return new Color(parseInt('0x' + value.substring(1, 3)) / 255, parseInt('0x' + value.substring(3, 5)) / 255, parseInt('0x' + value.substring(5, 7)) / 255, parseInt('0x' + value.substring(7, 9)) / 255);
		} else {
			// # + 6 color components
			return new Color(parseInt('0x' + value.substring(1, 3)) / 255, parseInt('0x' + value.substring(3, 5)) / 255, parseInt('0x' + value.substring(5, 7)) / 255, 1);
		}
	};

	Color.fromHexWithAlpha = function fromHexWithAlpha(value, alpha) {
		var color = Color.fromHex(value);
		color.a = alpha;

		return color;
	};

	Color.multiply255 = function multiply255(a, b) {
		var v = a * b + 128;
		return (v >> 8) + v >> 8;
	};

	// helper functions to initialize a color variable with a default color that
	// is expected to be changed, this way the color 'constant' doesn't also change
	// since assigning the 'constant' to a variable is by reference

	Color.black = function black() {
		return Color.fromColor(Color.Black);
	};

	Color.white = function white() {
		return Color.fromColor(Color.White);
	};

	Color.red = function red() {
		return Color.fromColor(Color.Red);
	};

	Color.green = function green() {
		return Color.fromColor(Color.Green);
	};

	Color.blue = function blue() {
		return Color.fromColor(Color.Blue);
	};

	Color.yellow = function yellow() {
		return Color.fromColor(Color.Yellow);
	};

	Color.magenta = function magenta() {
		return Color.fromColor(Color.Magenta);
	};

	Color.turquoise = function turquoise() {
		return Color.fromColor(Color.Turquoise);
	};

	Color.transparent = function transparent() {
		return Color.fromColor(Color.Transparent);
	};

	return Color;
})(_Equatable3["default"]);

Color.Black = new Color(0, 0, 0, 1);
Color.White = new Color(1, 1, 1, 1);
Color.Red = new Color(1, 0, 0, 1);
Color.Green = new Color(0, 1, 0, 1);
Color.Blue = new Color(0, 0, 1, 1);
Color.Yellow = new Color(1, 1, 0, 1);
Color.Magenta = new Color(1, 0, 1, 1);
Color.Turquoise = new Color(0, 1, 1, 1);
Color.Transparent = new Color(0, 0, 0, 0);

exports["default"] = Color;
module.exports = exports["default"];

},{"../Engine":44,"../Equatable":46,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],80:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var CompositeOperator = {
	Clear: 0,
	SourceOver: 1,
	SourceIn: 2,
	SourceOut: 3,
	SourceAtop: 4,
	DestinationOver: 5,
	DestinationIn: 6,
	DestinationOut: 7,
	DestinationAtop: 8,
	Xor: 9,
	Copy: 10
};

exports["default"] = CompositeOperator;
module.exports = exports["default"];

},{}],81:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _EventDispatcher = require("../EventDispatcher");

var _EventDispatcher2 = _interopRequireDefault(_EventDispatcher);

var _Engine = require("../Engine");

var _graphicsColor = require("../graphics/Color");

var _graphicsColor2 = _interopRequireDefault(_graphicsColor);

var _animationAnimatable = require("../animation/Animatable");

var _animationAnimatable2 = _interopRequireDefault(_animationAnimatable);

var _uiPropertyOptions = require("../ui/PropertyOptions");

var _uiPropertyOptions2 = _interopRequireDefault(_uiPropertyOptions);

var Mixed = _Engine.Mixin(_EventDispatcher2["default"], _animationAnimatable2["default"]);

var GradientStop = (function (_Mixed) {
	_inherits(GradientStop, _Mixed);

	function GradientStop(color, offset) {
		_classCallCheck(this, GradientStop);

		_Mixed.call(this);

		this.setColor(_Engine.ValueOrDefault(color, _graphicsColor2["default"].Transparent));
		this.setOffset(_Engine.ValueOrDefault(offset, 0));

		/** GradientBrush **/
		this.brush = null;

		this.initializeAnimatableProperties();
	}

	GradientStop.prototype.initializeAnimatablePropertiesCore = function initializeAnimatablePropertiesCore() {
		this.enableAnimatableProperty("color", this.getColor, this.setColor, _uiPropertyOptions2["default"].AffectsLayout);
		this.enableAnimatableProperty("offset", this.getOffset, this.setOffset, _uiPropertyOptions2["default"].AffectsLayout);
	};

	GradientStop.prototype.getColor = function getColor() {
		return this.getPropertyValue("color");
	};

	GradientStop.prototype.setColor = function setColor(value) {
		this.setPropertyValue("color", value);
	};

	GradientStop.prototype.getOffset = function getOffset() {
		return this.getPropertyValue("offset");
	};

	GradientStop.prototype.setOffset = function setOffset(value) {
		this.setPropertyValue("offset", value);
	};

	GradientStop.prototype.isEqualTo = function isEqualTo(other) {
		return _Engine.AreEqual(this.getColor(), other.getColor()) && this.getOffset() && other.getOffset();
	};

	GradientStop.prototype.toString = function toString() {
		return "GradientStop[ offset=" + this.getOffset() + ", color=" + this.getColor() + " ]";
	};

	return GradientStop;
})(Mixed);

exports["default"] = GradientStop;
module.exports = exports["default"];

},{"../Engine":44,"../EventDispatcher":48,"../animation/Animatable":70,"../graphics/Color":79,"../ui/PropertyOptions":156,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],82:[function(require,module,exports){
"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Rectangle = require("../Rectangle");

var _Rectangle2 = _interopRequireDefault(_Rectangle);

var _GraphicsProcessor = require("./GraphicsProcessor");

var _GraphicsProcessor2 = _interopRequireDefault(_GraphicsProcessor);

var _Dictionary = require("../Dictionary");

var _Dictionary2 = _interopRequireDefault(_Dictionary);

var _Vector2D = require("../Vector2D");

var _Vector2D2 = _interopRequireDefault(_Vector2D);

var _Size = require("../Size");

var _Size2 = _interopRequireDefault(_Size);

var _transformsScaleTransform = require("../transforms/ScaleTransform");

var _transformsScaleTransform2 = _interopRequireDefault(_transformsScaleTransform);

var _transformsTranslateTransform = require("../transforms/TranslateTransform");

var _transformsTranslateTransform2 = _interopRequireDefault(_transformsTranslateTransform);

var _Matrix2D = require("../Matrix2D");

var _Matrix2D2 = _interopRequireDefault(_Matrix2D);

var _Pair = require("../Pair");

var _Pair2 = _interopRequireDefault(_Pair);

var _GraphicsOp = require("./GraphicsOp");

var _GraphicsOp2 = _interopRequireDefault(_GraphicsOp);

var _CompositeOperator = require("./CompositeOperator");

var _CompositeOperator2 = _interopRequireDefault(_CompositeOperator);

var _Engine = require("../Engine");

var _PathMoveSegment = require("./PathMoveSegment");

var _PathMoveSegment2 = _interopRequireDefault(_PathMoveSegment);

var _PathLineSegment = require("./PathLineSegment");

var _PathLineSegment2 = _interopRequireDefault(_PathLineSegment);

var _PathQuadraticBezierSegment = require("./PathQuadraticBezierSegment");

var _PathQuadraticBezierSegment2 = _interopRequireDefault(_PathQuadraticBezierSegment);

var _PathCubicBezierSegment = require("./PathCubicBezierSegment");

var _PathCubicBezierSegment2 = _interopRequireDefault(_PathCubicBezierSegment);

var _SweepDirection = require("./SweepDirection");

var _SweepDirection2 = _interopRequireDefault(_SweepDirection);

var _EngineMath = require("../EngineMath");

var _EngineMath2 = _interopRequireDefault(_EngineMath);

var _mediaVideoSource = require("../media/VideoSource");

var _mediaVideoSource2 = _interopRequireDefault(_mediaVideoSource);

var _uiDashStyle = require("../ui/DashStyle");

var _uiDashStyle2 = _interopRequireDefault(_uiDashStyle);

var _brushesSolidColorBrush = require("../brushes/SolidColorBrush");

var _brushesSolidColorBrush2 = _interopRequireDefault(_brushesSolidColorBrush);

var _brushesLinearGradientBrush = require("../brushes/LinearGradientBrush");

var _brushesLinearGradientBrush2 = _interopRequireDefault(_brushesLinearGradientBrush);

var _brushesRadialGradientBrush = require("../brushes/RadialGradientBrush");

var _brushesRadialGradientBrush2 = _interopRequireDefault(_brushesRadialGradientBrush);

var _brushesImageBrush = require("../brushes/ImageBrush");

var _brushesImageBrush2 = _interopRequireDefault(_brushesImageBrush);

var _brushesVideoBrush = require("../brushes/VideoBrush");

var _brushesVideoBrush2 = _interopRequireDefault(_brushesVideoBrush);

var _Color = require("./Color");

var _Color2 = _interopRequireDefault(_Color);

var _uiStretch = require("../ui/Stretch");

var _uiStretch2 = _interopRequireDefault(_uiStretch);

var _Line = require("../Line");

var _Line2 = _interopRequireDefault(_Line);

var _uiPenLineCap = require("../ui/PenLineCap");

var _uiPenLineCap2 = _interopRequireDefault(_uiPenLineCap);

var _uiPenLineJoin = require("../ui/PenLineJoin");

var _uiPenLineJoin2 = _interopRequireDefault(_uiPenLineJoin);

var GraphicsBrushType = {
	"Unknown": 0,
	"Solid": 1,
	"Linear": 2,
	"Radial": 3,
	"Image": 4,
	"Video": 5
};

var Graphics = (function () {
	function Graphics(drawable) {
		_classCallCheck(this, Graphics);

		this.drawable = drawable;
		this.offscreenSurface = null;
		this.offscreenStyleSurface = null;
		this.ops = [];
		this.lastOps = null;
		this.lastBounds = new _Rectangle2["default"](0, 0, 0, 0);
		this.currentTextOp = null;
		this.currentPathItem = null;
		this.hasChangedSinceLastRender = true;
		this.cachedPatterns = new _Dictionary2["default"]();
		this.processor = new _GraphicsProcessor2["default"]();
		this.needsProcessing = false;
		this.tmpRect = new _Rectangle2["default"](0, 0, 0, 0);
		this.tmpVect = new _Vector2D2["default"](0, 0);
		this.tmpSize = new _Size2["default"](0, 0);
		this.tmpScaleTransform = new _transformsScaleTransform2["default"](0, 0);
		this.tmpTranslateTransform = new _transformsTranslateTransform2["default"](0, 0);
		this.tmpMatrix = new _Matrix2D2["default"]();
	}

	Graphics.prototype.getHasChangedSinceLastRender = function getHasChangedSinceLastRender() {
		return this.hasChangedSinceLastRender;
	};

	Graphics.prototype.pushOp = function pushOp(type /** ... **/) {
		var op = new _Pair2["default"](type, []);

		for (var i = 1; i < arguments.length; i++) {
			op.getSecond().push(arguments[i]);
		}

		this.ops.push(op);
	};

	Graphics.prototype.beginPath = function beginPath() {
		this.pushOp(_GraphicsOp2["default"].BeginPath);
	};

	Graphics.prototype.closePath = function closePath() {
		this.pushOp(_GraphicsOp2["default"].ClosePath);
	};

	Graphics.prototype.fill = function fill(brush, compositeOp) {
		compositeOp = _Engine.ValueOrDefault(compositeOp, _CompositeOperator2["default"].SourceOver);

		this.drawable.registerGraphicsObject(brush);
		this.pushOp(_GraphicsOp2["default"].Fill, this.createParamsFromBrush(brush), compositeOp);
	};

	Graphics.prototype.stroke = function stroke(pen, compositeOp) {
		compositeOp = _Engine.ValueOrDefault(compositeOp, _CompositeOperator2["default"].SourceOver);

		this.drawable.registerGraphicsObject(pen);
		this.pushOp(_GraphicsOp2["default"].Stroke, this.createParamsFromPen(pen), compositeOp);
	};

	Graphics.prototype.clear = function clear() {
		this.lastOps = this.ops;
		this.ops = [];
		this.needsProcessing = true;
		this.hasChangedSinceLastRender = true;
		this.drawable.clearGraphicsObjects();
		this.drawable.invalidate();
	};

	Graphics.prototype.moveTo = function moveTo(x, y) {
		this.pushOp(_GraphicsOp2["default"].MoveTo, new _PathMoveSegment2["default"](x, y));
	};

	Graphics.prototype.lineTo = function lineTo(x, y) {
		this.pushOp(_GraphicsOp2["default"].LineTo, new _PathLineSegment2["default"](x, y));
	};

	Graphics.prototype.curveTo = function curveTo(cx, cy, x, y) {
		this.pushOp(_GraphicsOp2["default"].CurveTo, new _PathQuadraticBezierSegment2["default"](x, y, cx, cy));
	};

	Graphics.prototype.cubicCurveTo = function cubicCurveTo(cx1, cy1, cx2, cy2, x, y) {
		this.pushOp(_GraphicsOp2["default"].CubicCurveTo, new _PathCubicBezierSegment2["default"](x, y, cx1, cy1, cx2, cy2));
	};

	Graphics.prototype.arcTo = function arcTo(x, y, width, height, startAngle, sweepAngle, direction) {
		direction = _Engine.ValueOrDefault(direction, _SweepDirection2["default"].Clockwise);

		this.makeArcPath(x, y, width, height, startAngle, sweepAngle, direction, true);
	};

	Graphics.prototype.drawOpenArc = function drawOpenArc(x, y, width, height, startAngle, sweepAngle, direction, fromCenter) {
		direction = _Engine.ValueOrDefault(direction, _SweepDirection2["default"].Clockwise);
		fromCenter = _Engine.ValueOrDefault(fromCenter, true);

		if (!fromCenter) {
			x += width * 0.5;
			y += height * 0.5;
		}

		this.beginPath();
		this.makeArcPath(x, y, width, height, startAngle, sweepAngle, direction, false);
	};

	Graphics.prototype.drawArc = function drawArc(x, y, width, height, startAngle, sweepAngle, direction, fromCenter) {
		this.drawOpenArc(x, y, width, height, startAngle, sweepAngle, direction, fromCenter);
		this.closePath();
	};

	Graphics.prototype.drawEllipse = function drawEllipse(x, y, width, height, isCenter) {
		isCenter = _Engine.ValueOrDefault(isCenter, true);

		var radiusX = width * 0.5;
		var radiusY = height * 0.5;
		var centerX = x;
		var centerY = y;
		var kappa = Graphics.Kappa;

		if (!isCenter) {
			centerX += radiusX;
			centerY += radiusY;
		}

		this.beginPath();
		this.moveTo(centerX + radiusX, centerY);
		this.cubicCurveTo(centerX + radiusX, centerY - kappa * radiusY, centerX + kappa * radiusX, centerY - radiusY, centerX, centerY - radiusY);
		this.cubicCurveTo(centerX - kappa * radiusX, centerY - radiusY, centerX - radiusX, centerY - kappa * radiusY, centerX - radiusX, centerY);
		this.cubicCurveTo(centerX - radiusX, centerY + kappa * radiusY, centerX - kappa * radiusX, centerY + radiusY, centerX, centerY + radiusY);
		this.cubicCurveTo(centerX + kappa * radiusX, centerY + radiusY, centerX + radiusX, centerY + kappa * radiusY, centerX + radiusX, centerY);
		this.closePath();
	};

	Graphics.prototype.drawCircle = function drawCircle(x, y, radius, isCenter) {
		this.drawEllipse(x, y, radius * 2, radius * 2, isCenter);
	};

	Graphics.prototype.drawImage = function drawImage(imageSource, x, y, width, height, repeat, matrix) {
		this.drawImageComplex(imageSource, 0, 0, imageSource.getWidth(), imageSource.getHeight(), x, y, width, height, repeat, matrix);
	};

	Graphics.prototype.drawImageComplex = function drawImageComplex(imageSource, srcX, srcY, srcWidth, srcHeight, dstX, dstY, dstWidth, dstHeight, repeat, matrix) {
		dstX = _Engine.ValueOrDefault(dstX, 0);
		dstY = _Engine.ValueOrDefault(dstY, 0);
		dstWidth = _Engine.ValueOrDefault(dstWidth, srcWidth);
		dstHeight = _Engine.ValueOrDefault(dstHeight, srcHeight);
		repeat = _Engine.ValueOrDefault(repeat, false);

		// identity matrices still have an overhead of transformations
		// and state changes, so skip omit these
		if (matrix != null && matrix.isIdentity()) {
			matrix = null;
		}

		// make sure we don't use the object reference, otherwise
		// a user will need to pass in a new matrix everytime.
		if (matrix != null) {
			matrix = matrix.copy();
		}

		if (repeat) {
			this.pushOp(_GraphicsOp2["default"].TiledImage, imageSource, srcX, srcY, srcWidth, srcHeight, dstX, dstY, dstWidth, dstHeight, matrix);
		} else {
			this.pushOp(_GraphicsOp2["default"].Image, imageSource, srcX, srcY, srcWidth, srcHeight, dstX, dstY, dstWidth, dstHeight, matrix);
		}
	};

	Graphics.prototype.drawLine = function drawLine(x1, y1, x2, y2) {
		this.beginPath();
		this.moveTo(x1, y1);
		this.lineTo(x2, y2);
	};

	Graphics.prototype.drawRect = function drawRect(x, y, width, height) {
		this.beginPath();
		this.moveTo(x, y);
		this.lineTo(x + width, y);
		this.lineTo(x + width, y + height);
		this.lineTo(x, y + height);
		this.closePath();
	};

	Graphics.prototype.drawRoundRect = function drawRoundRect(x, y, width, height, radius) {
		radius = _Engine.ValueOrDefault(radius, 0);

		// not a rounded rectangle, just draw as a normal rectangle
		if (radius <= 0) {
			this.drawRect(x, y, width, height);
			return;
		}

		this.makeRoundRectPath(x, y, width, height, radius);
	};

	Graphics.prototype.drawRoundRectComplex = function drawRoundRectComplex(x, y, width, height, cornerRadii) {
		// not a rounded rectangle, just draw as a normal rectangle
		if (cornerRadii.isSquare()) {
			this.drawRect(x, y, width, height);
			return;
		}

		this.makeRoundRectPathComplex(x, y, width, height, cornerRadii);
	};

	Graphics.prototype.drawPoly = function drawPoly(points, dontClosePath) {
		dontClosePath = _Engine.ValueOrDefault(dontClosePath, false);

		var len = points.length;
		var pt = null;
		var isFirst = true;

		this.beginPath();

		for (var i = 0; i < len; ++i) {
			pt = points[i];

			if (isFirst) {
				this.moveTo(pt.x, pt.y);

				isFirst = false;
				continue;
			}

			this.lineTo(pt.x, pt.y);
		}

		if (!dontClosePath) {
			this.closePath();
		}
	};

	Graphics.prototype.drawPath = function drawPath(path) {
		if (path == null || path.length == 0) {
			return;
		}

		var segment = null;
		var segments = path.segments;
		var len = segments.length;

		this.beginPath();

		for (var i = 0; i < len; ++i) {
			segment = segments[i];

			if (i == 0 && !(segment instanceof _PathMoveSegment2["default"])) {
				this.moveTo(0, 0);
			}

			if (segment instanceof _PathMoveSegment2["default"]) {
				this.moveTo(segment.x, segment.y);
			} else if (segment instanceof _PathLineSegment2["default"]) {
				this.lineTo(segment.x, segment.y);
			} else if (segment instanceof _PathQuadraticBezierSegment2["default"]) {
				this.curveTo(segment.cx, segment.cy, segment.x, segment.y);
			} else if (segment instanceof _PathCubicBezierSegment2["default"]) {
				this.cubicCurveTo(segment.cx1, segment.cy1, segment.cx2, segment.cy2, segment.x, segment.y);
			}
		}
	};

	Graphics.prototype.drawText = function drawText(text, x, y, font) {
		this.pushOp(_GraphicsOp2["default"].Text, text, x, y, font);
	};

	Graphics.prototype.makeArcPath = function makeArcPath(x, y, width, height, startAngle, sweepAngle, direction, connectWithPrevOp) {
		var theta = 0;
		var angle = 0;
		var angleH = 0;
		var segmentCount = 0;
		var tx = 0;
		var ty = 0;
		var cx = 0;
		var cy = 0;
		var rx = width * 0.5;
		var ry = height * 0.5;

		startAngle = _EngineMath2["default"].degreesToRadians(startAngle);
		sweepAngle = _EngineMath2["default"].degreesToRadians(sweepAngle);

		if (Math.abs(sweepAngle) > 2 * Math.PI) {
			sweepAngle = 2 * Math.PI;
		}

		sweepAngle *= direction;
		segmentCount = Math.ceil(Math.abs(sweepAngle) / (Math.PI * 0.25));
		theta = -(sweepAngle / segmentCount);
		angle = -startAngle;

		if (segmentCount > 0) {
			tx = x + Math.cos(startAngle) * rx;
			ty = y + Math.sin(-startAngle) * ry;

			if (connectWithPrevOp) {
				this.lineTo(tx, ty);
			} else {
				this.moveTo(tx, ty);
			}

			for (var i = 0; i < segmentCount; ++i) {
				angle += theta;
				angleH = angle - theta * 0.5;

				cx = x + Math.cos(angleH) * (rx / Math.cos(theta * 0.5));
				cy = y + Math.sin(angleH) * (ry / Math.cos(theta * 0.5));

				tx = x + Math.cos(angle) * rx;
				ty = y + Math.sin(angle) * ry;

				this.curveTo(cx, cy, tx, ty);
			}
		}
	};

	Graphics.prototype.makeRoundRectPath = function makeRoundRectPath(x, y, width, height, radius) {
		var arcSize = radius * 2;

		this.beginPath();
		this.arcTo(x + width - radius, y + radius, arcSize, arcSize, 90, 90);
		this.arcTo(x + width - radius, y + height - radius, arcSize, arcSize, 0, 90);
		this.arcTo(x + radius, y + height - radius, arcSize, arcSize, 270, 90);
		this.arcTo(x + radius, y + radius, arcSize, arcSize, 180, 90);
		this.closePath();
	};

	Graphics.prototype.makeRoundRectPathComplex = function makeRoundRectPathComplex(x, y, width, height, cornerRadius) {
		var xw = x + width;
		var yh = y + height;
		var minSize = width < height ? width * 2 : height * 2;
		var tl = cornerRadius.getTopLeft();
		var tr = cornerRadius.getTopRight();
		var bl = cornerRadius.getBottomLeft();
		var br = cornerRadius.getBottomRight();
		var a, s;
		var ac = 0.292893218813453;
		var sc = 0.585786437626905;

		tl = tl < minSize ? tl : minSize;
		tr = tr < minSize ? tr : minSize;
		bl = bl < minSize ? bl : minSize;
		br = br < minSize ? br : minSize;

		this.beginPath();

		// bottom right
		a = br * ac;
		s = br * sc;

		this.moveTo(xw, yh - br);
		this.curveTo(xw, yh - s, xw - a, yh - a);
		this.curveTo(xw - s, yh, xw - br, yh);

		// bottom left
		a = bl * ac;
		s = bl * sc;
		this.lineTo(x + bl, yh);
		this.curveTo(x + s, yh, x + a, yh - a);
		this.curveTo(x, yh - s, x, yh - bl);

		// top left
		a = tl * ac;
		s = tl * sc;
		this.lineTo(x, y + tl);
		this.curveTo(x, y + s, x + a, y + a);
		this.curveTo(x + s, y, x + tl, y);

		// top right
		a = tr * ac;
		s = tr * sc;
		this.lineTo(xw - tr, y);
		this.curveTo(xw - s, y, xw - a, y + a);
		this.curveTo(xw, y + s, xw, y + tr);
		this.lineTo(xw, yh - br);

		this.closePath();
	};

	Graphics.prototype.render = function render(ctx) {

		this.processIfNeeded();

		// reset dirty flag
		this.hasChangedSinceLastRender = false;

		// nothing to do
		if (this.processor.items.length == 0) {
			return;
		}

		var renderBounds = this.getStrokeBounds().toIntRect().inflate(4, 4);
		var itemCount = this.processor.items.length;
		var item = null;
		var op = null;
		var opType = null;
		var params = null;

		this.currentPathItem = null;

		// setup the render clip
		ctx.save();
		ctx.beginPath();
		ctx.rect(renderBounds.x, renderBounds.y, renderBounds.width, renderBounds.height);
		ctx.clip();

		for (var i = 0; i < itemCount; ++i) {
			item = this.processor.items[i];

			// render the item as an image
			if (item instanceof _GraphicsProcessor.GraphicsImageItem) {
				op = item.imageOp;
				opType = op.getFirst();
				params = op.getSecond();

				switch (opType) {
					case _GraphicsOp2["default"].TiledImage:
						this.drawImageImpl(ctx, params[0], params[1], params[2], params[3], params[4], params[5], params[6], params[7], params[8], true, params[9]);
						break;
					case _GraphicsOp2["default"].Image:
						this.drawImageImpl(ctx, params[0], params[1], params[2], params[3], params[4], params[5], params[6], params[7], params[8], false, params[9]);
						break;
				}
			}

			// render the item as a path, or text
			else {
					if (item.ops.length == 0) {
						continue;
					}

					var len = item.ops.length;
					var bounds = item.strokedBounds == null ? item.bounds : item.strokedBounds;

					this.currentTextOp = null;
					this.currentPathItem = item;

					// must always start off with a beginPath
					op = item.ops[0];
					opType = op.getFirst();

					if (opType != _GraphicsOp2["default"].BeginPath) {
						this.beginPathImpl(ctx);
					}

					for (var j = 0; j < len; ++j) {
						op = item.ops[j];
						opType = op.getFirst();
						params = op.getSecond();

						this.currentTextOp = null;

						switch (opType) {
							case _GraphicsOp2["default"].BeginPath:
								this.beginPathImpl(ctx);
								break;
							case _GraphicsOp2["default"].ClosePath:
								this.closePathImpl(ctx);
								break;
							case _GraphicsOp2["default"].MoveTo:
								this.moveToImpl(ctx, params[0]);
								break;
							case _GraphicsOp2["default"].LineTo:
								this.lineToImpl(ctx, params[0]);
								break;
							case _GraphicsOp2["default"].CurveTo:
								this.quadraticCurveToImpl(ctx, params[0]);
								break;
							case _GraphicsOp2["default"].CubicCurveTo:
								this.bezierCurveToImpl(ctx, params[0]);
								break;
							case _GraphicsOp2["default"].Text:
								this.currentTextOp = op;
								this.drawTextImpl(ctx, bounds, item.fillOp, item.strokeOp, params[0], params[1], params[2], params[3]);
								break;
						}
					}

					if (this.currentTextOp != null) {
						continue;
					}

					// now paint the path, fill and stroke can be in any order, should
					// only ever be two or less paint operations, but just incase
					var paintOpCount = item.paintOps.length;

					for (var j = 0; j < paintOpCount; ++j) {
						op = item.paintOps[j];
						opType = op.getFirst();
						params = op.getSecond();

						switch (opType) {
							case _GraphicsOp2["default"].Fill:
								this.fillImpl(ctx, bounds, params[0], params[1], false);
								break;
							case _GraphicsOp2["default"].Stroke:
								this.strokeImpl(ctx, bounds, params[0], params[1], false);
								break;
						}
					}
				}
		}

		ctx.restore();
	};

	Graphics.prototype.renderAlphaMask = function renderAlphaMask(ctx, maskBrush, width, height) {
		// make a rect that will be filled in with our mask
		ctx.beginPath();
		ctx.rect(0, 0, width, height);

		this.tmpRect.x = this.tmpRect.y = 0;
		this.tmpRect.width = width;
		this.tmpRect.height = height;

		this.drawable.registerGraphicsObject(maskBrush);

		// fill the mask rect
		this.fillImpl(ctx, this.tmpRect, this.createParamsFromBrush(maskBrush), _CompositeOperator2["default"].DestinationIn);
	};

	Graphics.prototype.processIfNeeded = function processIfNeeded() {
		if (!this.needsProcessing) {
			return;
		}

		this.processor.process(this.ops, this.drawable);
		this.needsProcessing = false;
	};

	Graphics.prototype.getBounds = function getBounds() {
		this.processIfNeeded();

		return this.processor.bounds;
	};

	Graphics.prototype.getStrokeBounds = function getStrokeBounds() {
		this.processIfNeeded();

		if (this.processor.strokedBounds != null) {
			return this.processor.strokedBounds;
		}

		return this.processor.bounds;
	};

	Graphics.prototype.beginPathImpl = function beginPathImpl(ctx) {
		ctx.beginPath();
	};

	Graphics.prototype.closePathImpl = function closePathImpl(ctx) {
		ctx.closePath();
	};

	Graphics.prototype.moveToImpl = function moveToImpl(ctx, segment) {
		ctx.moveTo(segment.x, segment.y);
	};

	Graphics.prototype.lineToImpl = function lineToImpl(ctx, segment) {
		ctx.lineTo(segment.x, segment.y);
	};

	Graphics.prototype.quadraticCurveToImpl = function quadraticCurveToImpl(ctx, segment) {
		ctx.quadraticCurveTo(segment.cx, segment.cy, segment.x, segment.y);
	};

	Graphics.prototype.bezierCurveToImpl = function bezierCurveToImpl(ctx, segment) {
		ctx.bezierCurveTo(segment.cx1, segment.cy1, segment.cx2, segment.cy2, segment.x, segment.y);
	};

	Graphics.prototype.drawImageImpl = function drawImageImpl(ctx, imageSource, srcX, srcY, srcWidth, srcHeight, dstX, dstY, dstWidth, dstHeight, repeat, matrix) {

		if (!imageSource.getIsSourceReady()) {
			return;
		}

		var nativeData = imageSource.getNativeData();

		/** NON-REPEATING IMAGE **/
		if (!repeat) {
			// bugfix: it seems that FF will randomly throw an exception if the source rect is provided, so we omit
			//         this for the video element only, which is fine, if a user needs a specific rect from the video
			//         a VideoBrush should be used instead anyway.
			if (imageSource instanceof _mediaVideoSource2["default"]) {
				ctx.drawImage(nativeData, dstX, dstY, dstWidth, dstHeight);
			} else {
				if (matrix == null) {
					ctx.drawImage(nativeData, srcX, srcY, srcWidth, srcHeight, dstX, dstY, dstWidth, dstHeight);
				} else {
					ctx.save();
					ctx.transform(matrix.m11, matrix.m12, matrix.m21, matrix.m22, matrix.offsetX, matrix.offsetY);
					ctx.drawImage(nativeData, srcX, srcY, srcWidth, srcHeight, dstX, dstY, dstWidth, dstHeight);
					ctx.restore();
				}
			}

			return;
		}

		/** REPEATING IMAGE **/

		// !!! TODO : need to support the matrix for repeating images... (do we apply it to the drawn image? or to the entire pattern??)

		// create the offscreen surface (if needed) that we will use
		// to render the source tile into, patterns are as-is so we
		// must draw the tile first then create the pattern from the
		// offscreen surface. most likely this surface will be used
		// multiple times, hence the reason for keeping it in memory
		if (this.offscreenSurface == null) {
			this.offscreenSurface = document.createElement("canvas");
		}

		// round the dimensions to whole numbers		
		this.offscreenSurface.width = _EngineMath2["default"].round(srcWidth);
		this.offscreenSurface.height = _EngineMath2["default"].round(srcHeight);

		// create and reset the offscreen context, then render the tile
		// into it at 0,0
		var offscreenContext = this.offscreenSurface.getContext("2d");

		offscreenContext.clearRect(0, 0, this.offscreenSurface.width, this.offscreenSurface.height);
		offscreenContext.beginPath();
		offscreenContext.drawImage(nativeData, srcX, srcY, srcWidth, srcHeight, 0, 0, srcWidth, srcHeight);

		// now create the pattern from our surface, repeating in both directions
		var pattern = ctx.createPattern(this.offscreenSurface, "repeat");

		// draw the final tiled image into our main context, the pattern
		// will handle tiling (i.e. via repeat), this is much faster than
		// computing the tiles ourself and rendering each one using drawImage
		//
		// NOTE : here we translate instead of passing in the dstX/dstY to
		//		  the rect method, this will actually translate the entire
		//		  pattern, the latter method would end up just clipping
		ctx.save();
		ctx.beginPath();
		ctx.translate(dstX, dstY);
		ctx.rect(0, 0, dstWidth, dstHeight);
		ctx.fillStyle = pattern;
		ctx.fill();
		ctx.restore();
	};

	Graphics.prototype.drawTextImpl = function drawTextImpl(ctx, boundsRect, fillOp, strokeOp, text, x, y, font) {

		if (fillOp != null) {
			this.fillImpl(ctx, boundsRect, fillOp.getSecond()[0], fillOp.getSecond()[1], true);
		}

		if (strokeOp != null) {
			this.strokeImpl(ctx, boundsRect, strokeOp.getSecond()[0], strokeOp.getSecond()[1], true);
		}
	};

	Graphics.prototype.fillImpl = function fillImpl(ctx, boundsRect, brushParams, compositeOp, forText) {

		if (brushParams == null) {
			ctx.fillStyle = this.createFallbackStyle();

			if (forText) {
				this.fillText(ctx);
			} else {
				ctx.fill();
			}

			return;
		}

		var success = true;
		var saveState = false;
		var alpha = ctx.globalAlpha;
		var currentCompositeOp = ctx.globalCompositeOperation;

		// if the brush has a transform we will need to save our current state and restore it, this adds a bit of overhead
		// so we only do this if we absolutley must (hence the saving of the alpha directly)
		if (this.getMustSaveContextForBrush(brushParams)) {
			saveState = true;
		}

		try {
			if (saveState) {
				ctx.save();
			}

			ctx.globalCompositeOperation = this.getCompositeOperatorString(compositeOp);
			ctx.fillStyle = this.createStyleFromBrush(ctx, boundsRect, brushParams, false);

			// the brush may have it's own alpha channel, so we append it to the global alpha
			// this will relieve us of some overhead of making a copy of the brushes color(s), however, the
			// color(s) could also have their own alpha which will be in the style created
			ctx.globalAlpha *= brushParams[brushParams.length - 2];

			if (forText) {
				this.fillText(ctx);
			} else {
				ctx.fill();
			}
		} catch (e) {
			success = false;
			_Engine.DebugWrite(e.toString(), _Engine.DebugLevel.Error);
		} finally {
			// restore back to our previous state
			if (!saveState) {
				ctx.globalAlpha = alpha;
				ctx.globalCompositeOperation = currentCompositeOp;
			} else {
				ctx.restore();
			}
		}

		return success;
	};

	Graphics.prototype.fillText = function fillText(ctx) {
		if (this.currentTextOp == null) {
			return;
		}

		var params = this.currentTextOp.getSecond();
		var text = params[0];
		var x = params[1];
		var y = params[2];
		var font = params[3];

		ctx.font = font.toString();
		ctx.textBaseline = "top";
		ctx.fillText(text, x, y);
	};

	Graphics.prototype.strokeImpl = function strokeImpl(ctx, boundsRect, penParams, compositeOp, forText) {
		if (penParams == null) {
			ctx.strokeStyle = this.createFallbackStyle();

			if (forText) {
				this.strokeText(ctx);
			} else {
				ctx.stroke();
			}

			return;
		}

		var success = true;
		var lineWidth = penParams[0];
		var lineCap = penParams[3];
		var dashCap = penParams[6];
		var dashStyle = penParams[5];
		var dashSuccess = false;
		var brushParams = penParams[4];
		var saveState = false;
		var alpha = ctx.globalAlpha;
		var currentCompositeOp = ctx.globalCompositeOperation;

		// if the brush has a transform we will need to save our current state and restore it, this adds a bit of overhead
		// so we only do this if we absolutley must (hence the saving of the alpha directly)
		if (this.getMustSaveContextForBrush(brushParams)) {
			saveState = true;
		}

		try {
			if (saveState) {
				ctx.save();
			}

			ctx.globalCompositeOperation = this.getCompositeOperatorString(compositeOp);
			ctx.strokeStyle = this.createStyleFromBrush(ctx, boundsRect, brushParams, true);

			// the brush may have it's own alpha channel, so we append it to the global alpha
			// this will relieve us of some overhead of making a copy of the brushes color(s), however, the
			// color(s) could also have their own alpha which will be in the style created
			ctx.globalAlpha *= brushParams[brushParams.length - 2];

			ctx.lineWidth = lineWidth;
			ctx.miterLimit = penParams[1];
			ctx.lineJoin = penParams[2];

			// dashing is currently available for paths created through the Graphics class only
			// so text cannot have a dashed path since we currently use the native font rendering provided
			// by the canvas context.
			//
			// TODO : implement our own OpenType or TrueType font reader and renderer so we can use precise
			//        bounds caclulation, dashing, etc...
			//
			if (!forText && dashStyle != null && dashStyle != _uiDashStyle2["default"].Solid && lineWidth > 0) {
				dashSuccess = this.dashCurrentPath(ctx, dashStyle, lineWidth, dashCap, lineCap);
			}

			if (!dashSuccess) {
				ctx.lineCap = lineCap;

				if (forText) {
					this.strokeText(ctx);
				} else {
					ctx.stroke();
				}
			}
		} catch (e) {
			success = false;
			_Engine.DebugWrite(e.toString(), _Engine.DebugLevel.Error);
		} finally {
			// restore back to our previous state
			if (!saveState) {
				ctx.globalAlpha = alpha;
				ctx.globalCompositeOperation = currentCompositeOp;
			} else {
				ctx.restore();
			}
		}

		return success;
	};

	Graphics.prototype.strokeText = function strokeText(ctx) {
		if (this.currentTextOp == null) {
			return;
		}

		var params = this.currentTextOp.getSecond();
		var text = params[0];
		var x = params[1];
		var y = params[2];
		var font = params[3];

		ctx.font = font.toString();
		ctx.textBaseline = "top";
		ctx.strokeText(text, x, y);
	};

	/** Pen Parameters **/

	Graphics.prototype.createParamsFromPen = function createParamsFromPen(pen) {
		if (pen == null || pen.getBrush() == null) {
			return null;
		}

		return [pen.getThickness(), pen.getMiterLimit(), this.getLineJoinString(pen.getLineJoin()), this.getLineCapString(pen.getLineCap()), this.createParamsFromBrush(pen.getBrush()), pen.getDashStyle(), this.getLineCapString(pen.getDashCap())];
	};

	/** Brush Parameters **/

	Graphics.prototype.createParamsFromBrush = function createParamsFromBrush(brush) {
		if (brush == null) {
			return null;
		}

		var params = null;

		if (brush instanceof _brushesSolidColorBrush2["default"]) {
			params = this.createParamsFromSolidColorBrush(brush);
		} else if (brush instanceof _brushesLinearGradientBrush2["default"]) {
			params = this.createParamsFromLinearGradientBrush(brush);
		} else if (brush instanceof _brushesRadialGradientBrush2["default"]) {
			params = this.createParamsFromRadialGradientBrush(brush);
		} else if (brush instanceof _brushesImageBrush2["default"]) {
			params = this.createParamsFromImageBrush(brush);
		} else if (brush instanceof _brushesVideoBrush2["default"]) {
			params = this.createParamsFromVideoBrush(brush);
		} else {
			_Engine.DebugWrite("Graphics.createParamsFromBrush() found an unknown brush type.", _Engine.DebugLevel.Warning);

			// the brush is unknown so just return a solid type with the fallback color
			params = [GraphicsBrushType.Solid, this.createFallbackStyle()];
			params.push(1); // opacity
			params.push(null); // matrix

			return params;
		}

		params.push(brush.getOpacity());

		if (brush.getTransform() != null) {
			params.push(brush.getTransform().getValue());
		} else {
			params.push(null);
		}

		return params;
	};

	Graphics.prototype.createParamsFromSolidColorBrush = function createParamsFromSolidColorBrush(brush) {
		return [GraphicsBrushType.Solid, brush.getColor().toRGBAString()];
	};

	Graphics.prototype.createParamsFromGradientBrush = function createParamsFromGradientBrush(brush) {
		var len = brush.getColorStopCount();
		var stop = null;
		var stops = [];

		for (var i = 0; i < len; ++i) {
			stop = brush.getColorStop(i);
			stops.push([stop.getColor().toRGBAString(), stop.getOffset()]);
		}

		return stops;
	};

	Graphics.prototype.createParamsFromLinearGradientBrush = function createParamsFromLinearGradientBrush(brush) {
		return [GraphicsBrushType.Linear, brush.getStartPoint().x, brush.getStartPoint().y, brush.getEndPoint().x, brush.getEndPoint().y, this.createParamsFromGradientBrush(brush)];
	};

	Graphics.prototype.createParamsFromRadialGradientBrush = function createParamsFromRadialGradientBrush(brush) {
		return [GraphicsBrushType.Radial, brush.getStartPoint().x, brush.getStartPoint().y, brush.getStartRadius(), brush.getEndPoint().x, brush.getEndPoint().y, brush.getEndRadius(), this.createParamsFromGradientBrush(brush)];
	};

	Graphics.prototype.createParamsFromImageBrush = function createParamsFromImageBrush(brush) {
		if (!brush.getIsAvailable()) {
			return [GraphicsBrushType.Solid, this.createFallbackStyle()];
		}

		return [GraphicsBrushType.Image, brush.texture.getSize().width, brush.texture.getSize().height, brush.texture.getNativeData(), brush.getSourceUrl(), brush.getStretch(), brush.getHorizontalAlignment(), brush.getVerticalAlignment()];
	};

	Graphics.prototype.createParamsFromVideoBrush = function createParamsFromVideoBrush(brush) {
		if (!brush.getIsAvailable()) {
			return [GraphicsBrushType.Solid, this.createFallbackStyle()];
		}

		var naturalSize = brush.getNaturalSize();

		return [GraphicsBrushType.Video, naturalSize.width, naturalSize.height, brush.getSourceElement(), brush.getCurrentPosition(), brush.getStretch(), brush.getHorizontalAlignment(), brush.getVerticalAlignment()];
	};

	/** Brush Styles **/

	Graphics.prototype.createStyleFromBrush = function createStyleFromBrush(ctx, boundsRect, brushParams, isStroking) {
		var type = brushParams[0];

		switch (type) {
			case GraphicsBrushType.Solid:
				return this.createStyleFromSolidColorBrush(brushParams);
			case GraphicsBrushType.Linear:
				return this.createStyleFromLinearGradientBrush(ctx, boundsRect, brushParams, isStroking);
			case GraphicsBrushType.Radial:
				return this.createStyleFromRadialGradientBrush(ctx, boundsRect, brushParams, isStroking);
			case GraphicsBrushType.Image:
				return this.createStyleFromImageBrush(ctx, boundsRect, brushParams, isStroking);
			case GraphicsBrushType.Video:
				return this.createStyleFromVideoBrush(ctx, boundsRect, brushParams, isStroking);
		}

		_Engine.DebugWrite("Graphics.fill() found an unknown brush type. " + type, _Engine.DebugLevel.Warning);

		return this.createFallbackStyle();
	};

	Graphics.prototype.createStyleFromSolidColorBrush = function createStyleFromSolidColorBrush(brushParams) {
		return brushParams[1];
	};

	Graphics.prototype.createStyleFromLinearGradientBrush = function createStyleFromLinearGradientBrush(ctx, boundsRect, brushParams, isStroking) {
		var startX = brushParams[1];
		var startY = brushParams[2];
		var endX = brushParams[3];
		var endY = brushParams[4];
		var stops = brushParams[5];
		var xform = brushParams[7];
		var len = stops.length;
		var stop = null;
		var rect = boundsRect;

		// pre-transform start/end points
		startX = rect.x + startX * rect.width;
		startY = rect.y + startY * rect.height;
		endX = rect.x + endX * rect.width;
		endY = rect.y + endY * rect.height;

		if (xform != null) {
			// transform the start point
			this.tmpVect.x = startX;
			this.tmpVect.y = startY;
			this.tmpVect = xform.transformPoint(this.tmpVect);

			startX = this.tmpVect.x;
			startY = this.tmpVect.y;

			// transform the end point
			this.tmpVect.x = endX;
			this.tmpVect.y = endY;
			this.tmpVect = xform.transformPoint(this.tmpVect);

			endX = this.tmpVect.x;
			endY = this.tmpVect.y;
		}

		var pattern = ctx.createLinearGradient(startX, startY, endX, endY);

		for (var i = 0; i < len; ++i) {
			stop = stops[i];

			pattern.addColorStop(stop[1], stop[0]);
		}

		return pattern;
	};

	// TODO : for some reason, this fails when the start/end radius and points are lowered or increased,
	//        the results fail differently in IE and FF so something is def wrong with the below

	Graphics.prototype.createStyleFromRadialGradientBrush = function createStyleFromRadialGradientBrush(ctx, boundsRect, brushParams, isStroking) {
		var startX = brushParams[1];
		var startY = brushParams[2];
		var startRadius = brushParams[3];
		var endX = brushParams[4];
		var endY = brushParams[5];
		var endRadius = brushParams[6];
		var stops = brushParams[7];
		var xform = brushParams[9];
		var len = stops.length;
		var stop = null;
		var rect = boundsRect;

		if (xform != null) {
			rect = xform.transformRect(rect);
		}
		/*
   console.log(
   rect.x + (startX * rect.width),
   rect.y + (startY * rect.height),
   startRadius * Math.max(rect.width, rect.height),
   rect.x + (endX * rect.width),
   rect.y + (endY * rect.height),
   endRadius * Math.max(rect.width, rect.height));
   */
		var pattern = ctx.createRadialGradient(
		/** start point / radius **/
		rect.x + startX * rect.width, rect.y + startY * rect.height, startRadius * Math.max(rect.width, rect.height),

		/** end point / radius **/
		rect.x + endX * rect.width, rect.y + endY * rect.height, endRadius * Math.max(rect.width, rect.height));

		for (var i = 0; i < len; ++i) {
			stop = stops[i];

			pattern.addColorStop(stop[1], stop[0]);
		}

		return pattern;
	};

	//***********************************************************************************************
	// TODO : need to cache image patterns, more likely than not, these patterns will not change in
	//        subsequent renders so caching them can dramatically speed up performance, especially
	//        when animating. But, it get's a bit complex because strokes have a intermediate stage
	//        where it renders to a offscreen canvas first, which is then used to create that pattern,
	//        so if a transform changes, then the cache would be invalidated. Fills are much more easy,
	//        the pattern could just be cached based on the url because any transforms are applied
	//        directly to the source context, we don't get the wierdness with fills as we do with the
	//        strokes.
	//***********************************************************************************************

	Graphics.prototype.createStyleFromImageBrush = function createStyleFromImageBrush(ctx, boundsRect, brushParams, isStroking) {
		var sourceWidth = brushParams[1];
		var sourceHeight = brushParams[2];
		var nativeData = brushParams[3];
		var sourceUrl = brushParams[4].toLowerCase();
		var stretch = brushParams[5];
		var horizontalAlignment = brushParams[6];
		var verticalAlignment = brushParams[7];
		var xform = brushParams[9];
		var patternSize = this.computePatternSize(stretch, boundsRect, sourceWidth, sourceHeight);
		var patternPosition = this.computePatternPosition(horizontalAlignment, verticalAlignment, patternSize, boundsRect);
		var pattern = this.createBrushStylePattern(ctx, nativeData, xform, patternSize, isStroking);

		this.setContextTransform(ctx, this.makeBrushStyleMatrix(xform, patternPosition, patternSize, sourceWidth, sourceHeight, isStroking));

		return pattern;
	};

	Graphics.prototype.createStyleFromVideoBrush = function createStyleFromVideoBrush(ctx, boundsRect, brushParams, isStroking) {
		var sourceWidth = brushParams[1];
		var sourceHeight = brushParams[2];
		var sourceElement = brushParams[3];
		var stretch = brushParams[5];
		var horizontalAlignment = brushParams[6];
		var verticalAlignment = brushParams[7];
		var xform = brushParams[9];
		var patternSize = this.computePatternSize(stretch, boundsRect, sourceWidth, sourceHeight);
		var patternPosition = this.computePatternPosition(horizontalAlignment, verticalAlignment, patternSize, boundsRect);
		var pattern = this.createBrushStylePattern(ctx, sourceElement, xform, patternSize, isStroking);

		this.setContextTransform(ctx, this.makeBrushStyleMatrix(xform, patternPosition, patternSize, sourceWidth, sourceHeight, isStroking));

		return pattern;
	};

	Graphics.prototype.createFallbackStyle = function createFallbackStyle() {
		return _Color2["default"].Transparent.toRGBAString();
	};

	Graphics.prototype.createBrushStylePattern = function createBrushStylePattern(ctx, sourceElement, brushMatrix, patternSize, isStroking) {
		// for strokes with a pattern, we must do some intermediate drawing
		if (isStroking) {
			return ctx.createPattern(this.createBrushPatternSource(sourceElement, brushMatrix, patternSize.width, patternSize.height), "no-repeat");
		}

		return ctx.createPattern(sourceElement, "no-repeat");
	};

	Graphics.prototype.createBrushPatternSource = function createBrushPatternSource(sourceElement, xform, width, height) {
		// create the offscreen surface that we will use to render the source style
		// into, strokes with a video and texture need to first be rendered into a
		// seperate surface that can then be used as the final source when creating
		// the pattern, otherwise if we scale the stroke itself it will end up looking
		// like ass, this produces a much better and accurate stroke
		if (this.offscreenStyleSurface == null) {
			this.offscreenStyleSurface = document.createElement("canvas");
		}

		var surfaceWidth = width;
		var surfaceHeight = height;
		var alignX = 0;
		var alignY = 0;

		// if the brush has a transform, we need to run that transform here
		if (xform != null) {
			this.tmpRect = xform.transformRect(new _Rectangle2["default"](0, 0, width, height));

			// re-align so that the source is drawn at 0,0
			alignX = -this.tmpRect.x;
			alignY = -this.tmpRect.y;

			// get the post-transform size
			surfaceWidth = this.tmpRect.width;
			surfaceHeight = this.tmpRect.height;
		}

		// round the dimensions to whole numbers		
		this.offscreenStyleSurface.width = _EngineMath2["default"].round(surfaceWidth);
		this.offscreenStyleSurface.height = _EngineMath2["default"].round(surfaceHeight);

		var ctx = this.offscreenStyleSurface.getContext("2d");

		if (xform != null) {
			ctx.setTransform(xform.m11, xform.m12, xform.m21, xform.m22, xform.offsetX + alignX, xform.offsetY + alignY);
		}

		ctx.drawImage(sourceElement, 0, 0, width, height);

		return this.offscreenStyleSurface;
	};

	/** Other **/

	Graphics.prototype.makeBrushStyleMatrix = function makeBrushStyleMatrix(brushMatrix, patternPosition, patternSize, sourceWidth, sourceHeight, isStroking) {
		this.tmpMatrix.setIdentity();

		if (brushMatrix != null) {
			if (isStroking) {
				this.tmpRect = brushMatrix.transformRect(new _Rectangle2["default"](patternPosition.x, patternPosition.y, patternSize.width, patternSize.height));
				this.tmpMatrix.translate(this.tmpRect.x, this.tmpRect.y);
			} else {
				this.tmpMatrix.scale(patternSize.width / sourceWidth, patternSize.height / sourceHeight);
				this.tmpMatrix.translate(patternPosition.x, patternPosition.y);
				this.tmpMatrix.append(brushMatrix);
			}
		} else {
			if (!isStroking) {
				this.tmpMatrix.scale(patternSize.width / sourceWidth, patternSize.height / sourceHeight);
			}

			this.tmpMatrix.translate(patternPosition.x, patternPosition.y);
		}

		return this.tmpMatrix;
	};

	Graphics.prototype.computePatternSize = function computePatternSize(stretch, boundsRect, sourceWidth, sourceHeight) {
		var scaleX = boundsRect.width / sourceWidth;
		var scaleY = boundsRect.height / sourceHeight;
		var minScale = Math.min(scaleX, scaleY);
		var maxScale = Math.max(scaleX, scaleY);

		switch (stretch) {
			case _uiStretch2["default"].Uniform:
				scaleX = minScale;
				scaleY = minScale;
				break;
			case _uiStretch2["default"].UniformToFill:
				scaleX = maxScale;
				scaleY = maxScale;
				break;
			case _uiStretch2["default"].Fill:
				break;
			case _uiStretch2["default"].None:
				scaleX = scaleY = 1;
				break;
		}

		this.tmpSize.width = sourceWidth * scaleX;
		this.tmpSize.height = sourceHeight * scaleY;

		return this.tmpSize;
	};

	Graphics.prototype.computePatternPosition = function computePatternPosition(horizontalAlignment, verticalAlignment, patternSize, dstRect) {
		this.tmpVect.x = dstRect.x + (dstRect.width - patternSize.width) * horizontalAlignment;
		this.tmpVect.y = dstRect.y + (dstRect.height - patternSize.height) * verticalAlignment;

		return this.tmpVect;
	};

	Graphics.prototype.dashCurrentPath = function dashCurrentPath(ctx, dashStyle, lineWidth, dashCap, lineCap) {
		var srcDashOffset = dashStyle.getOffset();
		var srcDashes = dashStyle.getDashes();
		var srcDashCount = Math.min(srcDashes.length, 32);
		var dashes = [];
		var sumDashLength = 0;
		var sumInvDashLength = 0;

		// compute the real dash lengths based on our pen's stroke weight, we also need
		// to sum the entire set of dash lengths so we can check that we have a valid
		// set of dashes and compute the real dash offset
		for (var i = 0; i < srcDashCount; ++i) {
			// ensure we don't have negative values
			//
			// TODO : should probably limit to 1 so it is atleast a solid dash?
			//
			dashes.push(Math.max(srcDashes[i], 0) * lineWidth);

			sumDashLength += dashes[i];
		}

		// unable to actual perform an dashing
		if (Math.abs(_EngineMath2["default"].toPrecision(sumDashLength, 2)) <= 0.01) {
			return false;
		}

		var dashCount = 0;
		var dashIndex = 0;
		var dashCurvePos = 0;
		var dashPos = 0;
		var dashOffset = 0;
		var dashPoint = new _Vector2D2["default"](0, 0);
		var segment = null;
		var segmentLength = 0;
		var segmentCount = 0;
		var segmentStartIndex = 0;
		var segmentStopIndex = 0;
		var segmentLine = null;
		var prevSegment = null;
		var lineX = 0;
		var lineY = 0;
		var moveX = 0;
		var moveY = 0;
		var firstMoveDone = false;
		var isDashingDone = false;
		var isDashOffset = false;
		var isDashEven = false;
		var useDashCap = false;
		var flatSegments = [];

		// capping each dash is an expensive process since we have to render
		// each dash individually, so if the caps are the same we can wait
		// till the end to stroke, which will apply the same cap on all strokes
		// otherwise, instead of dashing directly to the context we builds up a
		// set of dash segments so we can handle start and ending caps
		if (dashCap != lineCap) {
			useDashCap = true;
		}

		// round down to an even number
		dashCount = _EngineMath2["default"].evenRoundDown(dashes.length);

		// get the inverse of the sum of the dash lengths
		sumInvDashLength = 1 / sumDashLength;

		// compute the initial dash offset
		dashOffset -= Math.floor(srcDashOffset * lineWidth * sumInvDashLength) * sumDashLength;

		while (dashOffset >= dashes[dashIndex]) {
			dashOffset -= dashes[dashIndex];

			if (++dashIndex >= dashCount) {
				dashIndex = 0;
			}
		}

		// now we need to flatten the current path down to something more
		// managable for high quality dashing, otherwise we wouldn't be able
		// to draw curved dashes

		flatSegments = this.flattenCurrentPath();

		if (flatSegments == null) {
			return false;
		}

		// get the new flattened segment count
		segmentCount = flatSegments.length;

		// start with the first segment
		prevSegment = flatSegments[0];
		moveX = prevSegment.x;
		moveY = prevSegment.y;

		// there will already be a path in our context from previous
		// draw operations that assumed a solid stroke, this will clear all sub-paths and
		// start a new path for us to draw into
		ctx.beginPath();

		// finally, go through all our segments and draw each dash
		for (var i = 1; i < segmentCount; ++i) {
			segment = flatSegments[i];
			segmentLine = new _Line2["default"](prevSegment.x, prevSegment.y, segment.x, segment.y);
			segmentLength = segmentLine.length();
			segmentStopIndex = segmentStartIndex + segmentLength;

			isDashingDone = dashCurvePos >= segmentStopIndex;

			while (!isDashingDone) {
				dashPoint.x = 0;
				dashPoint.y = 0;
				dashPos = dashCurvePos + dashes[dashIndex] - dashOffset - segmentStartIndex;

				isDashOffset = dashOffset > 0;
				isDashEven = (dashIndex & 1) == 0;

				// unable to dash anymore, the dash extends beyond this line so we need to subtract
				// the dash part that we've already used and move to the next segment
				if (dashPos > segmentLength) {
					dashCurvePos = segmentStopIndex;
					dashOffset = dashes[dashIndex] - (dashPos - segmentLength);

					dashPoint.x = segmentLine.x2;
					dashPoint.y = segmentLine.y2;

					isDashingDone = true;
				}

				// the dash is on this line, keep dashing
				else {
						dashCurvePos = dashPos + segmentStartIndex;
						dashOffset = 0;

						dashPoint = segmentLine.pointAt(dashPos / segmentLength);

						if (++dashIndex >= dashCount) {
							dashIndex = 0;
						}

						isDashingDone = dashCurvePos >= segmentStopIndex;
					}

				if (isDashEven) {
					lineX = dashPoint.x;
					lineY = dashPoint.y;

					// we only want to start a new subpath if we have a dash offset, otherwise
					// we need to just continue dashing
					if (!isDashOffset || !firstMoveDone) {
						ctx.moveTo(moveX, moveY);
						firstMoveDone = true;
					}

					ctx.lineTo(lineX, lineY);

					moveX = lineX;
					moveY = lineY;
				} else {
					moveX = dashPoint.x;
					moveY = dashPoint.y;
				}
			}

			// go to the next segment
			segmentStartIndex = segmentStopIndex;
			prevSegment = segment;
		}

		// stroke the dashed path first
		ctx.lineCap = dashCap;
		ctx.stroke();

		// finally, we need to draw all the line caps, these are different than the
		// dash caps, i.e. the start and end of a non-connecting path
		if (useDashCap) {
			// TODO : need to implement different caps for non-connecting paths
		}

		return true;
	};

	Graphics.prototype.flattenCurrentPath = function flattenCurrentPath() {
		if (this.currentPathItem.segments == null || this.currentPathItem.segments.length == 0) {
			return null;
		}

		var segmentCount = this.currentPathItem.segments.length;
		var segment = null;
		var flatSegments = [];

		for (var i = 0; i < segmentCount; ++i) {
			segment = this.currentPathItem.segments[i];

			if (segment instanceof _PathMoveSegment2["default"]) {
				flatSegments.push(segment);
			} else {
				var lineSegments = segment.flattenForThreshold(2, i > 0 ? this.currentPathItem.segments[i - 1] : null);

				for (var j = 0; j < lineSegments.length; ++j) {
					flatSegments.push(lineSegments[j]);
				}
			}
		}

		return flatSegments;
	};

	Graphics.prototype.getMustSaveContextForBrush = function getMustSaveContextForBrush(brushParams) {
		return brushParams[brushParams.length - 1] != null || brushParams[0] == GraphicsBrushType.Image || brushParams[0] == GraphicsBrushType.Video;
	};

	Graphics.prototype.setContextTransform = function setContextTransform(ctx, mx) {
		ctx.transform(mx.m11, mx.m12, mx.m21, mx.m22, mx.offsetX, mx.offsetY);
	};

	// getCurrentStrokeDashStyle : function() {
	// if(this.strokeIndex == -1)
	// return null;

	// var op = this.ops[this.strokes[this.pathIndex][this.strokeIndex]];
	// var dashStyle = op.getSecond()[0][5];

	// if(dashStyle != null && dashStyle == DashStyle.Solid)
	// return null;

	// return dashStyle;
	// },

	Graphics.prototype.getLineCapString = function getLineCapString(penLineCap) {
		switch (penLineCap) {
			case _uiPenLineCap2["default"].Round:
				return "round";
			case _uiPenLineCap2["default"].Square:
				return "square";
		}

		return "butt";
	};

	Graphics.prototype.getLineJoinString = function getLineJoinString(penLineJoin) {
		switch (penLineJoin) {
			case _uiPenLineJoin2["default"].Bevel:
				return "bevel";
			case _uiPenLineJoin2["default"].Round:
				return "round";
		}

		return "miter";
	};

	Graphics.prototype.getCompositeOperatorString = function getCompositeOperatorString(compositeOp) {
		switch (compositeOp) {
			case _CompositeOperator2["default"].Clear:
				return "clear";
			case _CompositeOperator2["default"].SourceIn:
				return "source-in";
			case _CompositeOperator2["default"].SourceOut:
				return "source-out";
			case _CompositeOperator2["default"].SourceAtop:
				return "source-atop";
			case _CompositeOperator2["default"].DestinationOver:
				return "destination-over";
			case _CompositeOperator2["default"].DestinationIn:
				return "destination-in";
			case _CompositeOperator2["default"].DestinationOut:
				return "destination-out";
			case _CompositeOperator2["default"].DestinationAtop:
				return "destination-atop";
			case _CompositeOperator2["default"].Xor:
				return "xor";
			case _CompositeOperator2["default"].Copy:
				return "copy";
		}

		return "source-over";
	};

	return Graphics;
})();

Graphics.Kappa = 0.5522847498307933;
Graphics.MiterJointAccuracy = 1.0E-9;

exports["default"] = Graphics;
module.exports = exports["default"];

},{"../Dictionary":43,"../Engine":44,"../EngineMath":45,"../Line":52,"../Matrix2D":54,"../Pair":57,"../Rectangle":59,"../Size":60,"../Vector2D":67,"../brushes/ImageBrush":74,"../brushes/LinearGradientBrush":75,"../brushes/RadialGradientBrush":76,"../brushes/SolidColorBrush":77,"../brushes/VideoBrush":78,"../media/VideoSource":115,"../transforms/ScaleTransform":135,"../transforms/TranslateTransform":137,"../ui/DashStyle":142,"../ui/PenLineCap":153,"../ui/PenLineJoin":154,"../ui/Stretch":158,"./Color":79,"./CompositeOperator":80,"./GraphicsOp":83,"./GraphicsProcessor":84,"./PathCubicBezierSegment":85,"./PathLineSegment":86,"./PathMoveSegment":87,"./PathQuadraticBezierSegment":88,"./SweepDirection":90,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/interop-require-default":11}],83:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var GraphicsOp = {
	//  @PRIVATE
	"MoveTo": 1,
	"LineTo": 2,
	"CurveTo": 3,
	"CubicCurveTo": 4,
	"Image": 5,
	"TiledImage": 6,
	"Fill": 7,
	"Stroke": 8,
	"BeginPath": 9,
	"ClosePath": 10,
	"RoundRect": 11,
	"Text": 12
};

exports["default"] = GraphicsOp;
module.exports = exports["default"];

},{}],84:[function(require,module,exports){
"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Rectangle = require("../Rectangle");

var _Rectangle2 = _interopRequireDefault(_Rectangle);

var _PathMoveSegment = require("./PathMoveSegment");

var _PathMoveSegment2 = _interopRequireDefault(_PathMoveSegment);

var _Vector2D = require("../Vector2D");

var _Vector2D2 = _interopRequireDefault(_Vector2D);

var _GraphicsOp = require("./GraphicsOp");

var _GraphicsOp2 = _interopRequireDefault(_GraphicsOp);

var GraphicsItem = (function () {
	function GraphicsItem() {
		_classCallCheck(this, GraphicsItem);

		this.bounds = new _Rectangle2["default"]();
	}

	GraphicsItem.prototype.computeBounds = function computeBounds() {
		/** override **/
	};

	return GraphicsItem;
})();

var GraphicsPathItem = (function (_GraphicsItem) {
	_inherits(GraphicsPathItem, _GraphicsItem);

	function GraphicsPathItem() {
		_classCallCheck(this, GraphicsPathItem);

		_GraphicsItem.call(this);

		this.fillOp = null;
		this.strokeOp = null;
		this.strokedBounds = null;
		this.lastMoveSegment = null;
		this.lastSegment = null;
		this.paintOps = [];
		this.ops = [];
		this.segments = null;
	}

	GraphicsPathItem.prototype.beginSegments = function beginSegments() {
		this.lastMoveSegment = null;
		this.lastSegment = null;
		this.segments = [];
	};

	GraphicsPathItem.prototype.computeBounds = function computeBounds() {
		if (this.ops.length == 0) {
			return;
		}

		//**************************************************************************
		//* NOTE: instead of computing the initial bounds here this process has
		//*      been merged to occur during the main process method, this allows
		//*      use to remove an extra loop
		//**************************************************************************

		// now that we have the initial bounds, we can compute the final stroked bounds
		// this only needs to happen if we actually have a stroke, otherwise we're done
		if (this.strokeOp != null) {
			var params = this.strokeOp.getSecond();

			var thickness = params[0][0];
			var metrics = new _Rectangle2["default"](-thickness * 0.5, -thickness * 0.5, thickness, thickness);
			var miterLimit = Math.max(params[0][1], 1);
			var joinType = params[0][2];

			// copy the non-stroked bounds
			this.strokedBounds = new _Rectangle2["default"]();
			this.strokedBounds.copyFrom(this.bounds);

			// we will always need to adjust the bounds by the stroke thickness, centered on the outline
			this.strokedBounds.inflate(metrics.right(), metrics.bottom());

			// TODO : need to figure in SQUARE and ROUND line caps, square is close but round pushes
			//        beyond the bounds in some cases so we need to apply an extra half a stroke (?)
			//        to non-connecting segments.

			if (joinType != "miter") {
				return;
			}

			// if we have a miter join, then we will need to adjust for that as well, this is
			// not perfect, but it should be good enough to always extend the bounds of the
			// path
			this.computeMiterJoins(metrics, miterLimit);
		}
	};

	GraphicsPathItem.prototype.computeMiterJoins = function computeMiterJoins(strokeMetrics, miterLimit) {
		var count = this.segments.length;
		var jointStartIndex = 0;
		var jointStartSeg = null;
		var jointEndIndex = -1;
		var jointEndSeg = null;
		var openIndex = 0;
		var moveX = 0;
		var moveY = 0;

		while (true) {
			// locate the first operation with a valid tangent or a move operation
			while (jointStartIndex < count && !(this.segments[jointStartIndex] instanceof _PathMoveSegment2["default"])) {
				var prevSeg = jointStartIndex > 0 ? this.segments[jointStartIndex - 1] : null;

				if (this.segments[jointStartIndex].hasValidTangent(prevSeg)) {
					break;
				}

				jointStartIndex++;
			}

			// no valid operations found
			if (jointStartIndex >= count) {
				break;
			}

			// get the operation that we will begin at
			jointStartSeg = this.segments[jointStartIndex];

			// we found an 'open' operation, save the position and try to use the
			// next operation as the starting point
			if (jointStartSeg instanceof _PathMoveSegment2["default"]) {
				openIndex = jointStartIndex + 1;
				moveX = jointStartSeg.x;
				moveY = jointStartSeg.y;

				jointStartIndex++;
				continue;
			}

			// the current and previous operation are 'closed' and form a joint
			if (jointStartIndex == count - 1 || this.segments[jointStartIndex + 1] instanceof _PathMoveSegment2["default"] && jointStartSeg.x == moveX && jointStartSeg.y == moveY) {
				jointEndIndex = openIndex;
			} // move to the next operation
			else {
					jointEndIndex = jointStartIndex + 1;
				}

			// now locate the ending operation with a valid tangent or a move operation
			while (jointEndIndex < count && !(this.segments[jointEndIndex] instanceof _PathMoveSegment2["default"])) {
				if (this.segments[jointEndIndex].hasValidTangent(jointStartSeg)) {
					break;
				}

				jointEndIndex++;
			}

			// no valid operations found
			if (jointEndIndex >= count) {
				break;
			}

			// get the operation that we will finish at
			jointEndSeg = this.segments[jointEndIndex];

			// if the end operation is not a move, then we have a valid a joint, adjust
			// our bounds to include the miter
			if (!(jointEndSeg instanceof _PathMoveSegment2["default"])) {
				this.adjustBoundsForMiter(jointStartIndex > 0 ? this.segments[jointStartIndex - 1] : null, jointStartSeg, jointEndSeg, miterLimit, strokeMetrics.width * 0.5);
			}

			// move to the next operation, it's possible the end operation comes before
			// the starting operation because of closed paths
			jointStartIndex = jointStartIndex >= jointEndIndex ? jointStartIndex + 1 : jointEndIndex;
		}
	};

	GraphicsPathItem.prototype.ensureSubPath = function ensureSubPath(segment) {
		// if there isn't a previous move segment then we must assume
		// the current segment as an implicit move
		//
		// for example:
		//      beginPath();
		//                    <-- no explicit move
		//      lineTo(0,0);  <-- assume implicit move
		//      lineTo(100, 0);
		//
		if (this.lastMoveSegment == null) {
			this.lastMoveSegment = segment;
		}
	};

	GraphicsPathItem.prototype.closePath = function closePath() {

		// if the last move segment is not the same as the last path segment
		// then we need make a straight line from the last segment to the
		// last move segment
		if (this.lastMoveSegment != null && this.lastSegment != null) {
			if (this.lastSegment.x != this.lastMoveSegment.x || this.lastSegment.y != this.lastMoveSegment.y) {
				this.segments.push(new PathLineSegment(this.lastMoveSegment.x, this.lastMoveSegment.y));
			}
		}

		this.lastMoveSegment = null;
	};

	GraphicsPathItem.prototype.moveTo = function moveTo(segment) {
		this.segments.push(segment);

		// we're starting a new sub-path
		this.lastSegment = this.lastMoveSegment = segment;
	};

	GraphicsPathItem.prototype.pathTo = function pathTo(segment) {
		// adjust the current bounds to include this segment
		this.adjustBoundsForSegment(segment);

		// see ensureSubPath for details
		this.ensureSubPath(segment);

		// add this segment, these will be used for rendering and computing
		// the stroked bounds
		this.segments.push(segment);

		// we need to keep a reference to the last segment so we can close out
		// the path (if required) and more importantly to adjust the bounds,
		// since we need two segments for accuracy
		this.lastSegment = segment;
	};

	GraphicsPathItem.prototype.text = function text(_text, x, y, font) {
		var size = font.measureString(_text);

		// the text is quite simple, we don't render individual text glyphs (yet)
		// so we can only add the measured approximate rendered bounds, but it
		// seems to be good enough
		this.bounds.union(x, y, x + size.width, y + size.height);
	};

	GraphicsPathItem.prototype.adjustBoundsForSegment = function adjustBoundsForSegment(segment) {
		// merge the segments bounds into our bounds
		if (segment != null) {
			segment.mergeBounds(this.lastSegment, this.bounds);
		}
	};

	GraphicsPathItem.prototype.adjustBoundsForMiter = function adjustBoundsForMiter(op0, op1, op2, miterLimit, weight) {
		// joint tip
		var jointX = op1.x;
		var jointY = op1.y;

		// end tangent for first operation
		var t0 = new _Vector2D2["default"]();
		var ts1 = op1.getTangent(op0, false);

		t0.x = ts1[0];
		t0.y = ts1[1];

		// start tangent for second operation
		var t1 = new _Vector2D2["default"]();
		var ts2 = op2.getTangent(op1, true);

		t1.x = ts2[0];
		t1.y = ts2[1];

		// we must have at least one valid tangent
		if (t0.length() == 0 || t1.length() == 0) {
			return;
		}

		// convert the tangents to unit vectors
		t1.normalize(1);
		t0.normalize(1);
		t0.x = -t0.x;
		t0.y = -t0.y;

		// find the vector from t0 to the mid-point of [t0,t1]
		var midPoint = new _Vector2D2["default"]((t1.x - t0.x) * 0.5, (t1.y - t0.y) * 0.5);

		// sin(A/2) == midPoint.length() / t1.length()
		var alpha = midPoint.length();

		// ensure that we skip any degenerate joints that are close to 0 degrees
		if (Math.abs(alpha) < 1.0E-9) {
			return;
		}

		// find the vector of the bisect
		var bisect = new _Vector2D2["default"]((t0.x + t1.x) * -0.5, (t0.y + t1.y) * -0.5);

		// joint is at 180 degrees, nothing to do
		if (bisect.length() == 0) {
			return;
		}

		// compute based on the set miter limit
		if (alpha == 0 || miterLimit < 1 / alpha) {
			// normalize the mid point first, we need the bisect vector
			midPoint.normalize((weight - miterLimit * weight * alpha) / bisect.length());

			// convert bisect to a unit vector
			bisect.normalize(1);

			var px = jointX + miterLimit * weight * bisect.x + midPoint.x;
			var py = jointY + miterLimit * weight * bisect.y + midPoint.y;

			this.strokedBounds.union(px, py, px, py);

			px = jointX + miterLimit * weight * bisect.x - midPoint.x;
			py = jointY + miterLimit * weight * bisect.y - midPoint.y;

			this.strokedBounds.union(px, py, px, py);
		} else {
			// the miter limit was not reached so add the tip of the stroke
			bisect.normalize(1);

			var tipX = jointX + bisect.x * weight / alpha;
			var tipY = jointY + bisect.y * weight / alpha;

			// adjust the current path rect
			this.strokedBounds.union(tipX, tipY, tipX, tipY);
		}
	};

	return GraphicsPathItem;
})(GraphicsItem);

var GraphicsImageItem = (function (_GraphicsItem2) {
	_inherits(GraphicsImageItem, _GraphicsItem2);

	function GraphicsImageItem(op) {
		_classCallCheck(this, GraphicsImageItem);

		_GraphicsItem2.call(this);

		this.imageOp = op;
	}

	GraphicsImageItem.prototype.computeBounds = function computeBounds() {
		var params = this.imageOp.getSecond();
		var x = params[5]; // dstX
		var y = params[6]; // dstY
		var width = params[7]; // dstWidth
		var height = params[8]; // dstHeight
		var mx = params[9]; // matrix

		this.bounds.x = x;
		this.bounds.y = y;
		this.bounds.width = width;
		this.bounds.height = height;

		if (mx != null) {
			this.bounds = mx.transformRect(this.bounds);
		}
	};

	return GraphicsImageItem;
})(GraphicsItem);

var GraphicsProcessor = (function () {
	function GraphicsProcessor() {
		_classCallCheck(this, GraphicsProcessor);

		this.items = [];
		this.currentPath = null;
		this.bounds = new _Rectangle2["default"]();
		this.strokedBounds = null;
	}

	GraphicsProcessor.prototype.process = function process(ops) {
		this.items = [];
		this.currentPath = null;
		this.bounds = new _Rectangle2["default"]();
		this.strokedBounds = null;

		if (ops == null || ops.length == 0) {
			return;
		}

		var len = ops.length;
		var op = null;
		var opType = null;
		var params = null;
		var item = null;

		//***********************************************************************************************
		// process each operation first and group them into items, which can be a path or image item, this
		// give us unique paths to work with, each item should have it's own bounds, that is used for computing
		// the entire bounding rect and more importantly for accurately creating the stroke/fill patterns. we
		// also do this so that we can easily compute the stroked bounds, dashes, etc...
		//***********************************************************************************************
		for (var i = 0; i < len; ++i) {
			op = ops[i];
			opType = op.getFirst();

			switch (opType) {
				case _GraphicsOp2["default"].BeginPath:
					this.processBeginPath(op);
					break;
				case _GraphicsOp2["default"].ClosePath:
				case _GraphicsOp2["default"].MoveTo:
				case _GraphicsOp2["default"].LineTo:
				case _GraphicsOp2["default"].CurveTo:
				case _GraphicsOp2["default"].CubicCurveTo:
					this.processPathOp(op, opType);
					break;
				case _GraphicsOp2["default"].Image:
				case _GraphicsOp2["default"].TiledImage:
					this.processImage(op);
					break;
				case _GraphicsOp2["default"].Text:
					this.processPathOp(op, opType);
					break;
				case _GraphicsOp2["default"].Fill:
					this.processFillOp(op);
					break;
				case _GraphicsOp2["default"].Stroke:
					this.processStrokeOp(op);
					break;
			}
		}

		// finish any pending path
		this.finishPathItem();

		// no items were generated, this is possible if we only received path operations with no fill
		// or stroke, there MUST be a fill, stroke or image to be considered a complete item
		if (this.items.length == 0) {
			return;
		}

		//***********************************************************************************************
		// now that we have all the items nicely organized we can go through each one and compute the
		// bounds, the initial non-stroked bounds is computed first, once that is finished we can then
		// compute the stroked bounds, the stroked bounds is what we will use for everything, strokes,
		// fills, hit testing, dirty regions, clips, etc...
		//***********************************************************************************************		
		len = this.items.length;

		for (var i = 0; i < len; ++i) {
			item = this.items[i];

			// compute the item's bounds, if there is a stroke this
			// will also compute the stroked bounds
			item.computeBounds();

			// union the item's bounds with our total bounds
			this.bounds.unionWithRect(item.bounds);

			// might not have a stroke
			if (item.strokedBounds != null) {
				// union the item's stroked bounds with our total stroked bounds
				if (this.strokedBounds == null) {
					this.strokedBounds = new _Rectangle2["default"]();
				}

				this.strokedBounds.unionWithRect(item.strokedBounds);
			}
		}
	};

	GraphicsProcessor.prototype.ensurePathItem = function ensurePathItem() {
		if (this.currentPath == null) {
			this.currentPath = new GraphicsPathItem();
			this.currentPath.beginSegments();
		}
	};

	GraphicsProcessor.prototype.finishPathItem = function finishPathItem() {
		// add the current path
		if (this.currentPath != null) {
			// the current path is only valid if it has a stroke or a fill, otherwise
			// there is nothing to do
			if (this.currentPath.strokeOp != null || this.currentPath.fillOp != null) {
				this.items.push(this.currentPath);
			}

			this.currentPath = null;
		}
	};

	GraphicsProcessor.prototype.processBeginPath = function processBeginPath(op) {
		this.finishPathItem();

		this.processPathOp(op);
	};

	GraphicsProcessor.prototype.processPathOp = function processPathOp(op, opType) {
		this.ensurePathItem();
		this.currentPath.ops.push(op);

		var params = op.getSecond();

		switch (opType) {
			case _GraphicsOp2["default"].ClosePath:
				this.currentPath.closePath();
				break;
			case _GraphicsOp2["default"].MoveTo:
				this.currentPath.moveTo(params[0]);
				break;
			case _GraphicsOp2["default"].LineTo:
			case _GraphicsOp2["default"].CurveTo:
			case _GraphicsOp2["default"].CubicCurveTo:
				this.currentPath.pathTo(params[0]);
				break;
			case _GraphicsOp2["default"].Text:

				this.currentPath.text(params[0], params[1], params[2], params[3]);
				break;
		}
	};

	GraphicsProcessor.prototype.processFillOp = function processFillOp(op) {
		if (this.currentPath == null) {
			return;
		}

		this.currentPath.fillOp = op;
		this.currentPath.paintOps.push(op);
	};

	GraphicsProcessor.prototype.processStrokeOp = function processStrokeOp(op) {
		if (this.currentPath == null) {
			return;
		}

		this.currentPath.strokeOp = op;
		this.currentPath.paintOps.push(op);
	};

	GraphicsProcessor.prototype.processImage = function processImage(op) {
		this.items.push(new GraphicsImageItem(op));
	};

	return GraphicsProcessor;
})();

exports.GraphicsImageItem = GraphicsImageItem;
exports["default"] = GraphicsProcessor;

},{"../Rectangle":59,"../Vector2D":67,"./GraphicsOp":83,"./PathMoveSegment":87,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],85:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Equatable2 = require("../Equatable");

var _Equatable3 = _interopRequireDefault(_Equatable2);

var _PathSegment2 = require("./PathSegment");

var _PathSegment3 = _interopRequireDefault(_PathSegment2);

var _Engine = require("../Engine");

var _Vector2D = require("../Vector2D");

var _Vector2D2 = _interopRequireDefault(_Vector2D);

var CurvePoints = (function (_Equatable) {
	_inherits(CurvePoints, _Equatable);

	function CurvePoints() {
		_classCallCheck(this, CurvePoints);

		_Equatable.call(this);

		this.c1 = null;
		this.c2 = null;
		this.c3 = null;
		this.c4 = null;
		this.a1 = null;
		this.a2 = null;
		this.a3 = null;
		this.a4 = null;
	}

	CurvePoints.prototype.isEqualTo = function isEqualTo(other) {
		return _Engine.AreEqual(this.c1, other.c1) && _Engine.AreEqual(this.c2, other.c2) && _Engine.AreEqual(this.c3, other.c3) && _Engine.AreEqual(this.c4, other.c4) && _Engine.AreEqual(this.a1, other.a1) && _Engine.AreEqual(this.a2, other.a2) && _Engine.AreEqual(this.a3, other.a3) && _Engine.AreEqual(this.a4, other.a4);
	};

	return CurvePoints;
})(_Equatable3["default"]);

var PathCubicBezierSegment = (function (_PathSegment) {
	_inherits(PathCubicBezierSegment, _PathSegment);

	function PathCubicBezierSegment(x, y, cx1, cy1, cx2, cy2) {
		_classCallCheck(this, PathCubicBezierSegment);

		_PathSegment.call(this, x, y);

		this.cx1 = cx1;
		this.cy1 = cy1;
		this.cx2 = cx2;
		this.cy2 = cy2;
		this.curvePoints = null;
	}

	PathCubicBezierSegment.prototype.mergeBounds = function mergeBounds(prevSegment, withRect) {
		// starting point
		var x1 = prevSegment != null ? prevSegment.x : 0;
		var y1 = prevSegment != null ? prevSegment.y : 0;

		// min/max bounds
		var minX = Math.min(x1, this.x);
		var minY = Math.min(y1, this.y);
		var maxX = Math.max(x1, this.x);
		var maxY = Math.max(y1, this.y);

		var xts = this.computeFirstDerivativeRoots(x1, this.cx1, this.cx2, this.x);
		var yts = this.computeFirstDerivativeRoots(y1, this.cy1, this.cy2, this.y);

		for (var i = 0; i < 2; i++) {
			var tx = xts[i];
			var ty = yts[i];

			if (tx >= 0 && tx <= 1) {
				var x = this.computeBaseValue(tx, x1, this.cx1, this.cx2, this.x);

				minX = Math.min(x, minX);
				maxX = Math.max(x, maxX);
			}

			if (ty >= 0 && ty <= 1) {
				var y = this.computeBaseValue(ty, y1, this.cy1, this.cy2, this.y);

				minY = Math.min(y, minY);
				maxY = Math.max(y, maxY);
			}
		}

		withRect.union(minX, minY, maxX, maxY);
	};

	PathCubicBezierSegment.prototype.getCurvePoints = function getCurvePoints(prevSegment) {
		if (this.curvePoints != null) {
			return this.curvePoints;
		}

		this.curvePoints = new CurvePoints();

		var p1 = new _Vector2D2["default"](prevSegment != null ? prevSegment.x : 0, prevSegment != null ? prevSegment.y : 0);
		var p2 = new _Vector2D2["default"](this.x, this.y);
		var c1 = new _Vector2D2["default"](this.cx1, this.cy1);
		var c2 = new _Vector2D2["default"](this.cx2, this.cy2);

		var pA = c1.interpolate(p1, 0.75);
		var pB = c2.interpolate(p2, 0.75);

		var dx = (p2.x - p1.x) * 0.0625;
		var dy = (p2.y - p1.y) * 0.0625;

		this.curvePoints.c1 = c1.interpolate(p1, 0.375);

		this.curvePoints.c2 = pB.interpolate(pA, 0.375);
		this.curvePoints.c2.x -= dx;
		this.curvePoints.c2.y -= dy;

		this.curvePoints.c3 = pA.interpolate(pB, 0.375);
		this.curvePoints.c3.x += dx;
		this.curvePoints.c3.y += dy;

		this.curvePoints.c4 = c2.interpolate(p2, 0.375);

		this.curvePoints.a1 = this.curvePoints.c1.interpolate(this.curvePoints.c2, 0.5);
		this.curvePoints.a2 = pA.interpolate(pB, 0.5);
		this.curvePoints.a3 = this.curvePoints.c3.interpolate(this.curvePoints.c4, 0.5);
		this.curvePoints.a4 = p2;

		return this.curvePoints;
	};

	PathCubicBezierSegment.prototype.getTangent = function getTangent(prevSegment, fromStart) {
		var pt0 = new _Vector2D2["default"](prevSegment != null ? prevSegment.x : 0, prevSegment != null ? prevSegment.y : 0);
		var pt1 = new _Vector2D2["default"](this.curvePoints.c1.x, this.curvePoints.c1.y);
		var pt2 = new _Vector2D2["default"](this.curvePoints.a1.x, this.curvePoints.a1.y);
		var pt3 = new _Vector2D2["default"](this.curvePoints.c2.x, this.curvePoints.c2.y);
		var pt4 = new _Vector2D2["default"](this.curvePoints.a2.x, this.curvePoints.a2.y);
		var pt5 = new _Vector2D2["default"](this.curvePoints.c3.x, this.curvePoints.c3.y);
		var pt6 = new _Vector2D2["default"](this.curvePoints.a3.x, this.curvePoints.a3.y);
		var pt7 = new _Vector2D2["default"](this.curvePoints.c4.x, this.curvePoints.c4.y);
		var pt8 = new _Vector2D2["default"](this.curvePoints.a4.x, this.curvePoints.a4.y);
		var ts = [0, 0];

		if (fromStart) {
			// 1, 2
			ts = this.getCurveTangent(pt0, pt1, pt2, fromStart);

			if (this.isZero(ts)) {
				// 3,4
				ts = this.getCurveTangent(pt0, pt3, pt4, fromStart);

				if (this.isZero(ts)) {
					// 5,6
					ts = this.getCurveTangent(pt0, pt5, pt6, fromStart);

					if (this.isZero(ts)) {
						// 7,8
						ts = this.getCurveTangent(pt0, pt7, pt8, fromStart);
					}
				}
			}
		} else {
			// 6,7
			ts = this.getCurveTangent(pt6, pt7, pt8, fromStart);

			if (this.isZero(ts)) {
				// 4,5
				ts = this.getCurveTangent(pt4, pt5, pt8, fromStart);

				if (this.isZero(ts)) {
					// 2,3
					ts = this.getCurveTangent(pt2, pt3, pt8, fromStart);

					if (this.isZero(ts)) {
						// 0,1
						ts = this.getCurveTangent(pt0, pt1, pt8, fromStart);
					}
				}
			}
		}

		return ts;
	};

	PathCubicBezierSegment.prototype.isZero = function isZero(ts) {
		return ts[0] == 0 && ts[1] == 0;
	};

	PathCubicBezierSegment.prototype.computeBaseValue = function computeBaseValue(t, a, b, c, d) {
		var mt = 1 - t;

		return mt * mt * mt * a + 3 * mt * mt * t * b + 3 * mt * t * t * c + t * t * t * d;
	};

	PathCubicBezierSegment.prototype.computeFirstDerivativeRoots = function computeFirstDerivativeRoots(a, b, c, d) {
		var ret = [-1, -1];
		var tl = -a + 2 * b - c;
		var tr = -Math.sqrt(-a * (c - d) + b * b - b * (c + d) + c * c);
		var dn = -a + 3 * b - 3 * c + d;

		if (dn != 0) {
			ret[0] = (tl + tr) / dn;
			ret[1] = (tl - tr) / dn;
		}

		return ret;
	};

	PathCubicBezierSegment.prototype.computeSecondDerivativeRoot = function computeSecondDerivativeRoot(a, b, c, d) {
		var ret = -1;
		var tt = a - 2 * b + c;
		var dn = a - 3 * b + 3 * c - d;

		if (dn != 0) {
			ret = tt / dn;
		}

		return ret;
	};

	PathCubicBezierSegment.prototype.getXAt = function getXAt(t, prevSegment) {
		var x1 = prevSegment != null ? prevSegment.x : 0;

		return this.computeBaseValue(t, x1, this.cx1, this.cx2, this.x);
	};

	PathCubicBezierSegment.prototype.getYAt = function getYAt(t, prevSegment) {
		var y1 = prevSegment != null ? prevSegment.y : 0;

		return this.computeBaseValue(t, y1, this.cy1, this.cy2, this.y);
	};

	PathCubicBezierSegment.prototype.subdivide = function subdivide(t, prevSegment) {
		var x1 = prevSegment != null ? prevSegment.x : 0;
		var y1 = prevSegment != null ? prevSegment.y : 0;
		var x2 = (1 - t) * x1 + t * this.cx1; // p5
		var y2 = (1 - t) * y1 + t * this.cy1;
		var x3 = (1 - t) * this.cx1 + t * this.cx2; // p6
		var y3 = (1 - t) * this.cy1 + t * this.cy2;
		var x4 = (1 - t) * this.cx2 + t * this.x; // p7
		var y4 = (1 - t) * this.cy2 + t * this.y;
		var x5 = (1 - t) * x2 + t * x3; // p8
		var y5 = (1 - t) * y2 + t * y3;
		var x6 = (1 - t) * x3 + t * x4; // p9
		var y6 = (1 - t) * y3 + t * y4;
		var x7 = (1 - t) * x5 + t * x6; // p10
		var y7 = (1 - t) * y5 + t * y6;
		var curveA = new PathCubicBezierSegment(x7, y7, x2, y2, x5, y5);
		var curveB = new PathCubicBezierSegment(this.x, this.y, x6, y6, x4, y4);

		return [curveA, curveB];
	};

	PathCubicBezierSegment.prototype.isEqualTo = function isEqualTo(other) {
		return _PathSegment.prototype.isEqualTo.call(this, other) && this.cx1 == other.cx1 && this.cy1 == other.cy1 && this.cx2 == other.cx2 && this.cy2 == other.cy2;
	};

	return PathCubicBezierSegment;
})(_PathSegment3["default"]);

exports["default"] = PathCubicBezierSegment;
module.exports = exports["default"];

},{"../Engine":44,"../Equatable":46,"../Vector2D":67,"./PathSegment":89,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],86:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _PathSegment2 = require("./PathSegment");

var _PathSegment3 = _interopRequireDefault(_PathSegment2);

var _PathMoveSegment = require("./PathMoveSegment");

var _PathMoveSegment2 = _interopRequireDefault(_PathMoveSegment);

var PathLineSegment = (function (_PathSegment) {
	_inherits(PathLineSegment, _PathSegment);

	function PathLineSegment(x, y) {
		_classCallCheck(this, PathLineSegment);

		_PathSegment.call(this, x, y);
	}

	PathLineSegment.prototype.mergeBounds = function mergeBounds(prevSegment, withRect) {
		if (prevSegment != null && !(prevSegment instanceof _PathMoveSegment2["default"])) {
			withRect.union(this.x, this.y, this.x, this.y);
			return;
		}

		var px = prevSegment != null ? prevSegment.x : 0;
		var py = prevSegment != null ? prevSegment.y : 0;

		withRect.union(Math.min(this.x, px), Math.min(this.y, py), Math.max(this.x, px), Math.max(this.y, py));
	};

	PathLineSegment.prototype.flatten = function flatten(steps, prevSegment) {
		return [this];
	};

	PathLineSegment.prototype.getTangent = function getTangent(prevSegment, fromStart) {
		var x1 = prevSegment != null ? prevSegment.x : 0;
		var y1 = prevSegment != null ? prevSegment.y : 0;
		var x2 = this.x;
		var y2 = this.y;

		return [x2 - x1, y2 - y1];
	};

	return PathLineSegment;
})(_PathSegment3["default"]);

exports["default"] = PathLineSegment;
module.exports = exports["default"];

},{"./PathMoveSegment":87,"./PathSegment":89,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],87:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _PathSegment2 = require("./PathSegment");

var _PathSegment3 = _interopRequireDefault(_PathSegment2);

var PathMoveSegment = (function (_PathSegment) {
	_inherits(PathMoveSegment, _PathSegment);

	function PathMoveSegment(x, y) {
		_classCallCheck(this, PathMoveSegment);

		_PathSegment.call(this, x, y);
	}

	return PathMoveSegment;
})(_PathSegment3["default"]);

exports["default"] = PathMoveSegment;
module.exports = exports["default"];

},{"./PathSegment":89,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],88:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _PathSegment2 = require("./PathSegment");

var _PathSegment3 = _interopRequireDefault(_PathSegment2);

var _Vector2D = require("../Vector2D");

var _Vector2D2 = _interopRequireDefault(_Vector2D);

var PathQuadraticBezierSegment = (function (_PathSegment) {
	_inherits(PathQuadraticBezierSegment, _PathSegment);

	function PathQuadraticBezierSegment(x, y, cx, cy) {
		_classCallCheck(this, PathQuadraticBezierSegment);

		_PathSegment.call(this, x, y);

		this.cx = cx;
		this.cy = cy;
	}

	PathQuadraticBezierSegment.prototype.mergeBounds = function mergeBounds(prevSegment, withRect) {
		// start point
		var x1 = prevSegment != null ? prevSegment.x : 0;
		var y1 = prevSegment != null ? prevSegment.y : 0;

		// min/max bounds
		var minX = Math.min(this.x, x1);
		var minY = Math.min(this.y, y1);
		var maxX = Math.max(this.x, x1);
		var maxY = Math.max(this.y, y1);

		var tx = this.computeFirstDerivativeRoot(x1, this.cx, this.x);
		var ty = this.computeFirstDerivativeRoot(y1, this.cy, this.y);

		if (tx >= 0 && tx <= 1) {
			var x = this.computeBaseValue(tx, x1, this.cx, this.x);

			minX = Math.min(x, minX);
			maxX = Math.max(x, maxX);
		}

		if (ty >= 0 && ty <= 1) {
			var y = this.computeBaseValue(ty, y1, this.cy, this.y);

			minY = Math.min(y, minY);
			maxY = Math.max(y, maxY);
		}

		withRect.union(minX, minY, maxX, maxY);
	};

	PathQuadraticBezierSegment.prototype.getXAt = function getXAt(t, prevSegment) {
		var x1 = prevSegment != null ? prevSegment.x : 0;

		return this.computeBaseValue(t, x1, this.cx, this.x);
	};

	PathQuadraticBezierSegment.prototype.getYAt = function getYAt(t, prevSegment) {
		var y1 = prevSegment != null ? prevSegment.y : 0;

		return this.computeBaseValue(t, y1, this.cy, this.y);
	};

	PathQuadraticBezierSegment.prototype.computeBaseValue = function computeBaseValue(t, a, b, c) {
		var mt = 1 - t;

		return mt * mt * a + 2 * mt * t * b + t * t * c;
	};

	PathQuadraticBezierSegment.prototype.computeFirstDerivativeRoot = function computeFirstDerivativeRoot(a, b, c) {
		var t = -1;
		var dn = a - 2 * b + c;

		if (dn != 0) {
			t = (a - b) / dn;
		}

		return t;
	};

	PathQuadraticBezierSegment.prototype.getTangent = function getTangent(prevSegment, fromStart) {
		var pt0 = new _Vector2D2["default"](prevSegment != null ? prevSegment.x : 0, prevSegment != null ? prevSegment.y : 0);
		var pt1 = new _Vector2D2["default"](this.cx, this.cy);
		var pt2 = new _Vector2D2["default"](this.x, this.y);

		return this.getCurveTangent(pt0, pt1, pt2, fromStart);
	};

	PathQuadraticBezierSegment.prototype.isEqualTo = function isEqualTo(other) {
		return _PathSegment.prototype.isEqualTo.call(this, other) && this.cx == other.cx && this.cy == other.cy;
	};

	return PathQuadraticBezierSegment;
})(_PathSegment3["default"]);

exports["default"] = PathQuadraticBezierSegment;
module.exports = exports["default"];

},{"../Vector2D":67,"./PathSegment":89,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],89:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Equatable2 = require("../Equatable");

var _Equatable3 = _interopRequireDefault(_Equatable2);

var _Engine = require("../Engine");

var _Line = require("../Line");

var _Line2 = _interopRequireDefault(_Line);

var PathSegment = (function (_Equatable) {
	_inherits(PathSegment, _Equatable);

	function PathSegment(x, y) {
		_classCallCheck(this, PathSegment);

		_Equatable.call(this);

		this.x = _Engine.ValueOrDefault(x, 0);
		this.y = _Engine.ValueOrDefault(y, 0);
		this.flatSegments = null;
		this.isStartSegment = false;
	}

	PathSegment.prototype.getXAt = function getXAt(t, prevSegment) {
		return this.x;
	};

	PathSegment.prototype.getYAt = function getYAt(t, prevSegment) {
		return this.y;
	};

	PathSegment.prototype.hasValidTangent = function hasValidTangent(prevSegment) {
		var ts = this.getTangent(prevSegment, true);

		return ts[0] != 0 || ts[1] != 0;
	};

	PathSegment.prototype.getTangent = function getTangent(prevSegment, fromStart) {
		return [0, 0];
	};

	PathSegment.prototype.mergeBounds = function mergeBounds(prevSegment, withRect) {
		/** override **/
	};

	PathSegment.prototype.isEqualTo = function isEqualTo(other) {
		return this.x == other.x && this.y == other.y;
	};

	PathSegment.prototype.flatten = function flatten(steps, prevSegment) {
		if (this.flatSegments != null) {
			return this.flatSegments;
		}

		this.flatSegments = [];

		var step = 1.0 / steps;
		var sx = this.getXAt(0, prevSegment);
		var sy = this.getYAt(0, prevSegment);
		var line = new this.constructor(sx, sy);

		this.flatSegments.push(line);

		for (var t = step; t < 1.0; t += step) {
			var nx = this.getXAt(t, prevSegment);
			var ny = this.getYAt(t, prevSegment);

			line = new this.constructor(nx, ny);
			this.flatSegments.push(line);
		}

		line = new this.constructor(this.getXAt(1, prevSegment), this.getYAt(1, prevSegment));
		this.flatSegments.push(line);

		return this.flatSegments;
	};

	PathSegment.prototype.flattenForThreshold = function flattenForThreshold(threshold, prevSegment) {
		if (this.flatSegments != null) {
			return this.flatSegments;
		}

		this.flatSegments = [];

		var x1 = this.getXAt(0, prevSegment);
		var y1 = this.getYAt(0, prevSegment);
		var x2 = x1;
		var y2 = y1;
		var lastLine = new _Line2["default"](x1, y1, x2, y2);
		var testLine = null;
		var pixelCount = 0;
		var steps = 200;
		var xcoords = new Array(steps);
		var ycoords = new Array(steps);
		var pos = 0;
		var step = 1.0 / steps;

		xcoords[pos] = x1;
		ycoords[pos++] = y1;

		for (var t = step; t < 1.0; t += step) {
			x2 = this.getXAt(t, prevSegment);
			y2 = this.getYAt(t, prevSegment);

			xcoords[pos] = x2;
			ycoords[pos++] = x2;

			testLine = new _Line2["default"](x1, y1, x2, y2);
			pixelCount = testLine.getPixelsOutside(xcoords, ycoords, pos);

			if (pixelCount > threshold) {
				this.flatSegments.push(new this.constructor(lastLine.x1, lastLine.y1, lastLine.x2, lastLine.y2));

				x1 = lastLine.x2;
				y1 = lastLine.y2;

				lastLine.x1 = x1;
				lastLine.y1 = y1;
				lastLine.x2 = x2;
				lastLine.y2 = y2;

				xcoords = new Array(steps);
				ycoords = new Array(steps);
				pos = 0;

				xcoords[pos] = x1;
				ycoords[pos++] = y1;
			} else {
				lastLine = testLine;
			}
		}

		this.flatSegments.push(new this.constructor(x1, y1, this.getXAt(1, prevSegment), this.getYAt(1, prevSegment)));

		return this.flatSegments;
	};

	PathSegment.prototype.getCurveTangent = function getCurveTangent(pt0, pt1, pt2, fromStart) {
		var x = 0;
		var y = 0;

		if (fromStart) {
			if (pt0.x == pt1.x && pt0.y == pt1.y) {
				x = pt2.x - pt0.x;
				y = pt2.y - pt0.y;
			} else {
				x = pt1.x - pt0.x;
				y = pt1.y - pt0.y;
			}
		} else {
			if (pt2.x == pt1.x && pt2.y == pt1.y) {
				x = pt2.x - pt0.x;
				y = pt2.y - pt0.y;
			} else {
				x = pt2.x - pt1.x;
				y = pt2.y - pt1.y;
			}
		}

		return [x, y];
	};

	return PathSegment;
})(_Equatable3["default"]);

exports["default"] = PathSegment;
module.exports = exports["default"];

},{"../Engine":44,"../Equatable":46,"../Line":52,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],90:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var SweepDirection = {
	"Clockwise": -1,
	"CounterClockwise": 1
};

exports["default"] = SweepDirection;
module.exports = exports["default"];

},{}],91:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _EventDispatcher2 = require("../EventDispatcher");

var _EventDispatcher3 = _interopRequireDefault(_EventDispatcher2);

var _Engine = require("../Engine");

var _GamepadDeadZoneMode = require("./GamepadDeadZoneMode");

var _GamepadDeadZoneMode2 = _interopRequireDefault(_GamepadDeadZoneMode);

var _GamepadDeadZoneSize = require("./GamepadDeadZoneSize");

var _GamepadDeadZoneSize2 = _interopRequireDefault(_GamepadDeadZoneSize);

var _GamepadButtonMap = require("./GamepadButtonMap");

var _GamepadButtonMap2 = _interopRequireDefault(_GamepadButtonMap);

var _GamepadState = require("./GamepadState");

var _GamepadState2 = _interopRequireDefault(_GamepadState);

var _GamepadButtons = require("./GamepadButtons");

var _GamepadButtons2 = _interopRequireDefault(_GamepadButtons);

var _Vector2D = require("../Vector2D");

var _Vector2D2 = _interopRequireDefault(_Vector2D);

var _ApplicationJs = require("../Application.js");

var _ApplicationJs2 = _interopRequireDefault(_ApplicationJs);

var _Timer = require("../Timer");

var _Timer2 = _interopRequireDefault(_Timer);

var _TimerEvent = require("../TimerEvent");

var _TimerEvent2 = _interopRequireDefault(_TimerEvent);

var _GamepadButtonEvent = require("./GamepadButtonEvent");

var _GamepadButtonEvent2 = _interopRequireDefault(_GamepadButtonEvent);

var _GamepadEvent = require("./GamepadEvent");

var _GamepadEvent2 = _interopRequireDefault(_GamepadEvent);

var Gamepad = (function (_EventDispatcher) {
	_inherits(Gamepad, _EventDispatcher);

	function Gamepad() {
		_classCallCheck(this, Gamepad);

		_EventDispatcher.call(this);

		this.connected = [false, false, false, false];
		this.timestamps = [0, 0, 0, 0];
		this.states = [null, null, null, null];
		this.prevStates = [null, null, null, null];
		this.deadZoneSizes = [_GamepadDeadZoneSize2["default"].Trigger, _GamepadDeadZoneSize2["default"].LeftStick, _GamepadDeadZoneSize2["default"].RightStick];
		this.deadZoneModes = [_GamepadDeadZoneMode2["default"].Normal, _GamepadDeadZoneMode2["default"].Normal, _GamepadDeadZoneMode2["default"].Normal];
		this.mapping = _GamepadButtonMap2["default"].XBOX360;
		this.eventTimer = null;
		this.eventTicks = [0, 0, 0, 0];
		this.buttonEventCache = null;
		this.inputIndex = 0;

		if (_Engine.IsFirefox()) {
			navigator.mozGamepads = [];

			window.addEventListener("MozGamepadConnected", this.onMozGamepadConnected);
			window.addEventListener("MozGamepadDisconnected", this.onMozGamepadDisconnected);
		}

		// setup a timer to check the connection status
		// for each controller, this will allow us to
		// dispatch connected/disconnected events properly
		var me = this;

		setInterval(function () {
			me.validateConnectionStatus();
		}, 500);
	}

	Gamepad.prototype.onMozGamepadConnected = function onMozGamepadConnected(e) {
		navigator.mozGamepads[e.gamepad.index] = e.gamepad;
	};

	Gamepad.prototype.onMozGamepadDisconnected = function onMozGamepadDisconnected(e) {
		navigator.mozGamepads[e.gamepad.index] = undefined;
	};

	Gamepad.prototype.getIsConnected = function getIsConnected(index) {
		if (index < 1 || index > 4) {
			throw new Error("Index must be between 1 and 4.");
		}

		return this.connected[index - 1];
	};

	Gamepad.prototype.getLastState = function getLastState(index) {
		if (index < 1 || index > 4) {
			throw new Error("Index must be between 1 and 4.");
		}

		if (!this.connected[index - 1]) {
			return null;
		}

		return this.prevStates[index - 1];
	};

	Gamepad.prototype.getState = function getState(index) {
		if (index < 1 || index > 4) {
			throw new Error("Index must be between 1 and 4.");
		}

		if (!this.connected[index - 1]) {
			return null;
		}

		var idx = index - 1;
		var gp = _Engine.Gamepads()[idx];
		var ts = this.timestamps[idx];
		var lastState = this.prevStates[idx];
		var state = null;

		// no new input has been read since the last time
		if (ts != 0 && gp.timestamp - ts == 0) {
			// make sure to update the last state, otherwise if a button
			// was pressed then released it will always seem that way when
			// in actual, it's a no change
			if (lastState != null) {
				lastState.copyFrom(this.states[idx]);
			}

			return this.states[idx];
		}

		// update the timestamp
		this.timestamps[idx] = gp.timestamp;

		// state has never been read for this gamepad, so
		// create a new state to hold our values
		if (this.states[idx] == null) {
			this.states[idx] = new _GamepadState2["default"]();
		}

		// get the current state and the previous state
		state = this.states[idx];

		// since the previous state is not null, we can simply
		// copy the values over from the current state and
		// avoid a new allocation
		if (lastState != null) {
			lastState.copyFrom(state);
		}

		// again, instead of allocating a new state object
		// we just update the one we already have
		var buttonValues = this.getButtonValues(gp);
		var stickValues = this.getStickValues(gp);
		var triggerValues = this.getTriggerValues(gp);

		state.update(gp.id, gp.index, gp.timestamp, true, buttonValues, stickValues[0], stickValues[1], triggerValues[0], triggerValues[1]);

		// finally, if the previous state was indeed null,
		// then just clone the current state object even if
		// this is the first time through, this will make
		// any delta comparisons zero
		if (lastState == null) {
			this.prevStates[idx] = state.copy();
		}

		return state;
	};

	Gamepad.prototype.getButtonValues = function getButtonValues(gp) {
		var buttons = _GamepadButtons2["default"].None;

		for (var i = 0, len = gp.buttons.length; i < len; ++i) {
			buttons |= this.getFlagForButton(gp, i, this.mapping.get(i));
		}

		return buttons;
	};

	Gamepad.prototype.getStickValues = function getStickValues(gp) {
		return [new _Vector2D2["default"](gp.axes[0], gp.axes[1]), new _Vector2D2["default"](gp.axes[2], gp.axes[3])];
	};

	Gamepad.prototype.getTriggerValues = function getTriggerValues(gp) {
		return [gp.buttons[6], gp.buttons[7]];
	};

	Gamepad.prototype.getFlagForButton = function getFlagForButton(gp, idx, button) {
		return gp.buttons[idx] == 0 ? 0 : button;
	};

	Gamepad.prototype.enableEvents = function enableEvents() {
		if (this.eventTimer != null) {
			return;
		}

		this.eventTimer = new _Timer2["default"](1000 / _ApplicationJs2["default"].getInstance().getFrameRate());
		this.eventTimer.addEventHandler(_TimerEvent2["default"].TICK, this.onEventTimerTick.d(this));
		this.eventTimer.start();
	};

	Gamepad.prototype.disableEvents = function disableEvents() {
		if (this.eventTimer == null) {
			return;
		}

		this.eventTimer.stop();
		this.eventTimer = null;
		this.eventTicks = [0, 0, 0, 0];
	};

	Gamepad.prototype.onEventTimerTick = function onEventTimerTick(e) {
		var lastFrameTick = 0;
		var lastState = null;
		var state = null;
		var tickNow = _Engine.GetTimer();
		var includeDownEvents = false;

		for (var i = 1; i <= 4; ++i) {
			lastState = this.getLastState(i);
			state = this.getState(i);

			// gamepad disconnected
			if (state == null) {
				continue;
			}

			// determine whether a sufficient amount of time has passed to dispatch repeated down events
			// or to skip them and allow some catch up, otherwise, if a user presses a button then a down
			// event could be sent numerous times before an up event, however, we want to try and simulate
			// a true button press/release, then if the user holds it can be considered a repeating down
			// event.
			//
			// FIXME : should probably rethink this after a bit more testing, because the event API is
			//         meant for general navigation and not for high-frequency input processing as games
			//         usually need, we can probably just lock the event timer down to a fixed rate
			//         instead of clocking off the main frame rate.
			//
			lastFrameTick = this.eventTicks[i - 1];
			includeDownEvents = lastFrameTick == 0 || tickNow - lastFrameTick >= 150;

			// process any events
			if (this.processStateEvents(i, lastState, state, includeDownEvents)) {
				this.eventTicks[i - 1] = tickNow;
			}
		}
	};

	Gamepad.prototype.processStateEvents = function processStateEvents(index, lastState, state, includeDownEvents) {
		var downEventProcessed = false;

		for (var b in _GamepadButtons2["default"]) {
			// skip any built in properties or the None value
			if (!_GamepadButtons2["default"].hasOwnProperty(b) || b == "None") {
				continue;
			}

			var buttonFlag = _GamepadButtons2["default"][b];

			// dispatch down event
			if (includeDownEvents && state.isDown(buttonFlag)) {
				downEventProcessed = true;
				this.dispatchEvent(this.createButtonEvent(_GamepadButtonEvent2["default"].DOWN, index, buttonFlag, true, _Engine.GetTimer()));
			}

			// unable to check for up events without a
			// previous state
			if (lastState == null) {
				continue;
			}

			// dispatch up event
			if (lastState.isDown(buttonFlag) && !state.isDown(buttonFlag)) {
				this.dispatchEvent(this.createButtonEvent(_GamepadButtonEvent2["default"].UP, index, buttonFlag, true, _Engine.GetTimer()));
			}
		}

		return downEventProcessed;
	};

	Gamepad.prototype.createButtonEvent = function createButtonEvent(type, index, button, isDown, timestamp) {
		if (this.buttonEventCache == null) {
			this.buttonEventCache = new _GamepadButtonEvent2["default"](type, index, button, isDown, timestamp);
		} else {
			this.buttonEventCache.reuse();
			this.buttonEventCache.type = type;
			this.buttonEventCache.index = index;
			this.buttonEventCache.button = button;
			this.buttonEventCache.isDown = isDown;
			this.buttonEventCache.timestamp = timestamp;
		}

		return this.buttonEventCache;
	};

	Gamepad.prototype.validateConnectionStatus = function validateConnectionStatus() {
		for (var i = 0; i < 4; ++i) {
			var oldValue = this.connected[i];
			var newValue = _Engine.Gamepads()[i] != null;

			if (oldValue != newValue) {
				this.connected[i] = newValue;
				this.dispatchEvent(new _GamepadEvent2["default"](newValue ? _GamepadEvent2["default"].CONNECTED : _GamepadEvent2["default"].DISCONNECTED, i + 1));
			}
		}
	};

	Gamepad.getInstance = function getInstance() {
		if (Gamepad.Instance == null) {
			Gamepad.Instance = new Gamepad();
		}

		return Gamepad.Instance;
	};

	Gamepad.getState = function getState(index) {
		return Gamepad.getInstance().getState(index);
	};

	Gamepad.getIsAvailable = function getIsAvailable() {
		return _Engine.Gamepads() != null;
	};

	Gamepad.getInputIndex = function getInputIndex() {
		return Gamepad.getInstance().inputIndex;
	};

	Gamepad.setInputIndex = function setInputIndex(value) {
		Gamepad.getInstance().inputIndex = value;
	};

	Gamepad.setEnableEvents = function setEnableEvents(value) {
		Gamepad.getInstance()[value ? "enableEvents" : "disableEvents"]();
	};

	Gamepad.getTriggerDeadZoneMode = function getTriggerDeadZoneMode() {
		return Gamepad.getInstance().deadZoneModes[0];
	};

	Gamepad.setTriggerDeadZoneMode = function setTriggerDeadZoneMode(value) {
		Gamepad.getInstance().deadZoneModes[0] = value;
	};

	Gamepad.getTriggerDeadZoneSize = function getTriggerDeadZoneSize() {
		return Gamepad.getInstance().deadZoneSizes[0];
	};

	Gamepad.setTriggerDeadZoneSize = function setTriggerDeadZoneSize(value) {
		Gamepad.getInstance().deadZoneSizes[0] = value;
	};

	Gamepad.getLeftStickDeadZoneMode = function getLeftStickDeadZoneMode() {
		return Gamepad.getInstance().deadZoneModes[1];
	};

	Gamepad.setLeftStickDeadZoneMode = function setLeftStickDeadZoneMode(value) {
		Gamepad.getInstance().deadZoneModes[1] = value;
	};

	Gamepad.getLeftStickDeadZoneSize = function getLeftStickDeadZoneSize() {
		return Gamepad.getInstance().deadZoneSizes[1];
	};

	Gamepad.setLeftStickDeadZoneSize = function setLeftStickDeadZoneSize(value) {
		Gamepad.getInstance().deadZoneSizes[1] = value;
	};

	Gamepad.getRightStickDeadZoneMode = function getRightStickDeadZoneMode() {
		return Gamepad.getInstance().deadZoneModes[2];
	};

	Gamepad.setRightStickDeadZoneMode = function setRightStickDeadZoneMode(value) {
		Gamepad.getInstance().deadZoneModes[2] = value;
	};

	Gamepad.getRightStickDeadZoneSize = function getRightStickDeadZoneSize() {
		return Gamepad.getInstance().deadZoneSizes[2];
	};

	Gamepad.setRightStickDeadZoneSize = function setRightStickDeadZoneSize(value) {
		Gamepad.getInstance().deadZoneSizes[2] = value;
	};

	return Gamepad;
})(_EventDispatcher3["default"]);

exports["default"] = Gamepad;
module.exports = exports["default"];

},{"../Application.js":38,"../Engine":44,"../EventDispatcher":48,"../Timer":64,"../TimerEvent":65,"../Vector2D":67,"./GamepadButtonEvent":92,"./GamepadButtonMap":93,"./GamepadButtons":94,"./GamepadDeadZoneMode":95,"./GamepadDeadZoneSize":96,"./GamepadEvent":97,"./GamepadState":98,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],92:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

var _GamepadEvent2 = require("./GamepadEvent");

var _GamepadEvent3 = _interopRequireDefault(_GamepadEvent2);

var _Engine = require("../Engine");

var GamepadButtonEvent = (function (_GamepadEvent) {
	_inherits(GamepadButtonEvent, _GamepadEvent);

	function GamepadButtonEvent(type, index, button, isDown, timestamp, bubbles, cancelable) {
		_classCallCheck(this, GamepadButtonEvent);

		_GamepadEvent.call(this, type, index, bubbles, cancelable);

		this.button = button;
		this.timestamp = timestamp;
		this.isDown = _Engine.ValueOrDefault(isDown, false);
	}

	GamepadButtonEvent.prototype.getIsDown = function getIsDown() {
		return this.isDown;
	};

	GamepadButtonEvent.prototype.getTimestamp = function getTimestamp() {
		return this.timestamp;
	};

	GamepadButtonEvent.prototype.getButton = function getButton() {
		return this.button;
	};

	return GamepadButtonEvent;
})(_GamepadEvent3["default"]);

GamepadButtonEvent.DOWN = "gamepadButtonDown";
GamepadButtonEvent.UP = "gamepadButtonUp";

},{"../Engine":44,"./GamepadEvent":97,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],93:[function(require,module,exports){
"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Engine = require("../Engine");

var _GamepadButtons = require("./GamepadButtons");

var _GamepadButtons2 = _interopRequireDefault(_GamepadButtons);

var GamepadButtonMap = (function () {
	function GamepadButtonMap(map) {
		_classCallCheck(this, GamepadButtonMap);

		this.map = _Engine.ValueOrDefault(map, []);

		// just default to 32 available slots
		if (map == null) {
			for (var i = 0; i < 32; ++i) {
				this.map.push(_GamepadButtons2["default"].None);
			}
		}
	}

	GamepadButtonMap.prototype.indexOf = function indexOf(button) {
		if (button == _GamepadButtons2["default"].None) {
			return -1;
		}

		for (var i = 0, len = this.map.length; i < len; ++i) {
			if (this.map[i] === button) {
				return i;
			}
		}

		return -1;
	};

	GamepadButtonMap.prototype.get = function get(index) {
		if (this.isValidIndex(index)) {
			return this.map[index];
		}

		return _GamepadButtons2["default"].None;
	};

	GamepadButtonMap.prototype.add = function add(button, index) {
		button = _Engine.ValueOrDefault(button, _GamepadButtons2["default"].None);

		if (this.isValidIndex(index)) {
			this.map[index] = button;
		}
	};

	GamepadButtonMap.prototype.remove = function remove(index) {
		if (this.isValidIndex(index)) {
			this.map[index] = _GamepadButtons2["default"].None;
		}
	};

	GamepadButtonMap.prototype.isValidIndex = function isValidIndex(index) {
		return index >= 0 && index < this.map.length;
	};

	return GamepadButtonMap;
})();

GamepadButtonMap.XBOX360 = new GamepadButtonMap([_GamepadButtons2["default"].A, _GamepadButtons2["default"].B, _GamepadButtons2["default"].X, _GamepadButtons2["default"].Y, _GamepadButtons2["default"].LeftShoulder, _GamepadButtons2["default"].RightShoulder, _GamepadButtons2["default"].None, _GamepadButtons2["default"].None, // triggers are processed independantly
_GamepadButtons2["default"].Back, _GamepadButtons2["default"].Start, _GamepadButtons2["default"].LeftStick, _GamepadButtons2["default"].RightStick, _GamepadButtons2["default"].DPadUp, _GamepadButtons2["default"].DPadDown, _GamepadButtons2["default"].DPadLeft, _GamepadButtons2["default"].DPadRight]);

exports["default"] = GamepadButtonMap;
module.exports = exports["default"];

},{"../Engine":44,"./GamepadButtons":94,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/interop-require-default":11}],94:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var GamepadButtons = {
	None: 0,
	A: 1 << 0,
	B: 1 << 1,
	X: 1 << 2,
	Y: 1 << 3,
	Start: 1 << 4,
	Back: 1 << 5,
	Big: 1 << 6,
	DPadUp: 1 << 7,
	DPadDown: 1 << 8,
	DPadLeft: 1 << 9,
	DPadRight: 1 << 10,
	LeftShoulder: 1 << 11,
	LeftTrigger: 1 << 12,
	LeftStick: 1 << 13,
	LeftStickUp: 1 << 14,
	LeftStickDown: 1 << 15,
	LeftStickLeft: 1 << 16,
	LeftStickRight: 1 << 17,
	RightShoulder: 1 << 18,
	RightTrigger: 1 << 19,
	RightStick: 1 << 20,
	RightStickUp: 1 << 21,
	RightStickDown: 1 << 22,
	RightStickLeft: 1 << 23,
	RightStickRight: 1 << 24
};

exports["default"] = GamepadButtons;
module.exports = exports["default"];

},{}],95:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var GamepadDeadZoneMode = {
	None: 0,
	Normal: 1,
	Circular: 2
};

exports["default"] = GamepadDeadZoneMode;
module.exports = exports["default"];

},{}],96:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _EngineMath = require("../EngineMath");

var GamepadDeadZoneSize = {
	None: 0,
	LeftStick: 7849 / _EngineMath.MaxShort,
	RightStick: 8689 / _EngineMath.MaxShort,
	Trigger: 30 / 255.0
};

exports["default"] = GamepadDeadZoneSize;
module.exports = exports["default"];

},{"../EngineMath":45}],97:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Event2 = require("../Event");

var _Event3 = _interopRequireDefault(_Event2);

var GamepadEvent = (function (_Event) {
	_inherits(GamepadEvent, _Event);

	function GamepadEvent(type, index, bubbles, cancelable) {
		_classCallCheck(this, GamepadEvent);

		_Event.call(this, type, bubbles, cancelable);

		this.index = index;
	}

	GamepadEvent.prototype.getIndex = function getIndex() {
		return this.index;
	};

	return GamepadEvent;
})(_Event3["default"]);

GamepadEvent.CONNECTED = "connected";
GamepadEvent.DISCONNECTED = "disconnected";

exports["default"] = GamepadEvent;
module.exports = exports["default"];

},{"../Event":47,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],98:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Equatable2 = require("../Equatable");

var _Equatable3 = _interopRequireDefault(_Equatable2);

var _GamepadButtons = require("./GamepadButtons");

var _GamepadButtons2 = _interopRequireDefault(_GamepadButtons);

var _Gamepad = require("./Gamepad");

var _Gamepad2 = _interopRequireDefault(_Gamepad);

var _GamepadDeadZoneMode = require("./GamepadDeadZoneMode");

var _GamepadDeadZoneMode2 = _interopRequireDefault(_GamepadDeadZoneMode);

var _Vector2D = require("../Vector2D");

var _Vector2D2 = _interopRequireDefault(_Vector2D);

var _EngineMath = require("../EngineMath");

var _EngineMath2 = _interopRequireDefault(_EngineMath);

var _Engine = require("../Engine");

var GamepadState = (function (_Equatable) {
	_inherits(GamepadState, _Equatable);

	function GamepadState() {
		_classCallCheck(this, GamepadState);

		_Equatable.call(this);

		// just initialize our class members here and let the update method
		// actually set their values so we can avoid duplicating the code and
		// making state swaps more efficient
		this.name = null;
		this.index = null;
		this.timestamp = null;
		this.isConnected = null;
		this.buttons = null;
		this.leftTrigger = null;
		this.leftTriggerRaw = null;
		this.rightTrigger = null;
		this.rightTriggerRaw = null;
		this.leftStickValue = null;
		this.leftStickValueRaw = null;
		this.rightStickValue = null;
		this.rightStickValueRaw = null;
	}

	GamepadState.prototype.getName = function getName() {
		return this.name;
	};

	GamepadState.prototype.getIndex = function getIndex() {
		return this.index;
	};

	GamepadState.prototype.getIsConnected = function getIsConnected() {
		return this.isConnected;
	};

	GamepadState.prototype.getTimestamp = function getTimestamp() {
		return this.timestamp;
	};

	GamepadState.prototype.getA = function getA() {
		return this.hasFlag(this.buttons, _GamepadButtons2["default"].A);
	};

	GamepadState.prototype.getB = function getB() {
		return this.hasFlag(this.buttons, _GamepadButtons2["default"].B);
	};

	GamepadState.prototype.getX = function getX() {
		return this.hasFlag(this.buttons, _GamepadButtons2["default"].X);
	};

	GamepadState.prototype.getY = function getY() {
		return this.hasFlag(this.buttons, _GamepadButtons2["default"].Y);
	};

	GamepadState.prototype.getBack = function getBack() {
		return this.hasFlag(this.buttons, _GamepadButtons2["default"].Back);
	};

	GamepadState.prototype.getStart = function getStart() {
		return this.hasFlag(this.buttons, _GamepadButtons2["default"].Start);
	};

	GamepadState.prototype.getBig = function getBig() {
		return this.hasFlag(this.buttons, _GamepadButtons2["default"].Big);
	};

	GamepadState.prototype.getLeftShoulder = function getLeftShoulder() {
		return this.hasFlag(this.buttons, _GamepadButtons2["default"].LeftShoulder);
	};

	GamepadState.prototype.getRightShoulder = function getRightShoulder() {
		return this.hasFlag(this.buttons, _GamepadButtons2["default"].RightShoulder);
	};

	GamepadState.prototype.getLeftTrigger = function getLeftTrigger() {
		return this.getLeftTriggerValue() > 0;
	};

	GamepadState.prototype.getLeftTriggerValue = function getLeftTriggerValue(raw) {
		if (raw) {
			return this.leftTriggerRaw;
		}

		return this.leftTrigger;
	};

	GamepadState.prototype.getRightTrigger = function getRightTrigger() {
		return this.getRightTriggerValue() > 0;
	};

	GamepadState.prototype.getRightTriggerValue = function getRightTriggerValue(raw) {
		if (raw) {
			return this.rightTriggerRaw;
		}

		return this.rightTrigger;
	};

	GamepadState.prototype.getLeftStick = function getLeftStick() {
		return this.hasFlag(this.buttons, _GamepadButtons2["default"].LeftStick);
	};

	GamepadState.prototype.getLeftStickValue = function getLeftStickValue(raw) {
		if (raw) {
			return this.leftStickValueRaw;
		}

		return this.leftStickValue;
	};

	GamepadState.prototype.getRightStick = function getRightStick() {
		return this.hasFlag(this.buttons, _GamepadButtons2["default"].RightStick);
	};

	GamepadState.prototype.getRightStickValue = function getRightStickValue(raw) {
		if (raw) {
			return this.rightStickValueRaw;
		}

		return this.rightStickValue;
	};

	GamepadState.prototype.getDPadUp = function getDPadUp() {
		return this.hasFlag(this.buttons, _GamepadButtons2["default"].DPadUp);
	};

	GamepadState.prototype.getDPadDown = function getDPadDown() {
		return this.hasFlag(this.buttons, _GamepadButtons2["default"].DPadDown);
	};

	GamepadState.prototype.getDPadLeft = function getDPadLeft() {
		return this.hasFlag(this.buttons, _GamepadButtons2["default"].DPadLeft);
	};

	GamepadState.prototype.getDPadRight = function getDPadRight() {
		return this.hasFlag(this.buttons, _GamepadButtons2["default"].DPadRight);
	};

	GamepadState.prototype.getLeftStickUp = function getLeftStickUp() {
		return this.leftStickValue.y < 0;
	};

	GamepadState.prototype.getLeftStickDown = function getLeftStickDown() {
		return this.leftStickValue.y > 0;
	};

	GamepadState.prototype.getLeftStickLeft = function getLeftStickLeft() {
		return this.leftStickValue.x < 0;
	};

	GamepadState.prototype.getLeftStickRight = function getLeftStickRight() {
		return this.leftStickValue.x > 0;
	};

	GamepadState.prototype.getRightStickUp = function getRightStickUp() {
		return this.rightStickValue.y < 0;
	};

	GamepadState.prototype.getRightStickDown = function getRightStickDown() {
		return this.rightStickValue.y > 0;
	};

	GamepadState.prototype.getRightStickLeft = function getRightStickLeft() {
		return this.rightStickValue.x < 0;
	};

	GamepadState.prototype.getRightStickRight = function getRightStickRight() {
		return this.rightStickValue.x > 0;
	};

	GamepadState.prototype.isDown = function isDown(button) {
		var state = this.buttons;

		if (this.getLeftStickUp()) {
			state |= _GamepadButtons2["default"].LeftStickUp;
		}
		if (this.getLeftStickDown()) {
			state |= _GamepadButtons2["default"].LeftStickDown;
		}
		if (this.getLeftStickLeft()) {
			state |= _GamepadButtons2["default"].LeftStickLeft;
		}
		if (this.getLeftStickRight()) {
			state |= _GamepadButtons2["default"].LeftStickRight;
		}

		if (this.getRightStickUp()) {
			state |= _GamepadButtons2["default"].RightStickUp;
		}
		if (this.getRightStickDown()) {
			state |= _GamepadButtons2["default"].RightStickDown;
		}
		if (this.getRightStickLeft()) {
			state |= _GamepadButtons2["default"].RightStickLeft;
		}
		if (this.getRightStickRight()) {
			state |= _GamepadButtons2["default"].RightStickRight;
		}

		if (this.getLeftTrigger()) {
			state |= _GamepadButtons2["default"].LeftTrigger;
		}
		if (this.getRightTrigger()) {
			state |= _GamepadButtons2["default"].RightTrigger;
		}

		return this.hasFlag(state, button);
	};

	GamepadState.prototype.isUp = function isUp(button) {
		return !this.isDown(button);
	};

	GamepadState.prototype.hasFlag = function hasFlag(flags, flag) {
		return (flags & flag) == flag;
	};

	GamepadState.prototype.filterLeftStickValue = function filterLeftStickValue(x, y) {
		return this.filterStickValue(x, y, _Gamepad2["default"].getLeftStickDeadZoneMode(), _Gamepad2["default"].getLeftStickDeadZoneSize());
	};

	GamepadState.prototype.filterRightStickValue = function filterRightStickValue(x, y) {
		return this.filterStickValue(x, y, _Gamepad2["default"].getRightStickDeadZoneMode(), _Gamepad2["default"].getRightStickDeadZoneSize());
	};

	GamepadState.prototype.filterStickValue = function filterStickValue(x, y, deadZoneMode, deadZoneSize) {
		if (deadZoneMode == _GamepadDeadZoneMode2["default"].Circular) {
			var magnitude = Math.sqrt(x * x + y * y);
			var value = this.filterValue(magnitude, deadZoneSize);
			var normalized = value > 0 ? value / magnitude : 0;

			return new _Vector2D2["default"](_EngineMath2["default"].clamp(x * normalized, -1.0, 1.0), _EngineMath2["default"].clamp(y * normalized, -1.0, 1.0));
		}

		if (deadZoneMode == _GamepadDeadZoneMode2["default"].None) {
			deadZoneSize = 0;
		}

		return new _Vector2D2["default"](this.filterValue(x, deadZoneSize), this.filterValue(y, deadZoneSize));
	};

	GamepadState.prototype.filterTriggerValue = function filterTriggerValue(value) {
		if (_Gamepad2["default"].getTriggerDeadZoneMode() != _GamepadDeadZoneMode2["default"].None) {
			return this.filterValue(value, _Gamepad2["default"].getTriggerDeadZoneSize());
		}

		return this.filterValue(value, 0);
	};

	GamepadState.prototype.filterValue = function filterValue(value, size) {
		if (value < -size) {
			value += size;
		} else {
			if (value <= size) {
				return 0;
			}

			value -= size;
		}

		return _EngineMath2["default"].clamp(value / (1.0 - size), -1.0, 1.0);
	};

	GamepadState.prototype.update = function update(name, index, timestamp, isConnected, buttons, leftStickValue, rightStickValue, leftTrigger, rightTrigger) {
		this.name = _Engine.ValueOrDefault(name, "");
		this.index = index;
		this.timestamp = timestamp;
		this.isConnected = isConnected;
		this.buttons = buttons;

		this.leftTrigger = _EngineMath2["default"].clamp(this.filterTriggerValue(leftTrigger), 0, 1);
		this.leftTriggerRaw = _EngineMath2["default"].clamp(leftTrigger, 0, 1);
		this.rightTrigger = _EngineMath2["default"].clamp(this.filterTriggerValue(rightTrigger), 0, 1);
		this.rightTriggerRaw = _EngineMath2["default"].clamp(rightTrigger, 0, 1);

		this.leftStickValue = this.filterLeftStickValue(leftStickValue.x, leftStickValue.y);
		this.leftStickValueRaw = _Vector2D2["default"].Zero();
		this.leftStickValueRaw.x = _EngineMath2["default"].clamp(leftStickValue.x, -1, 1);
		this.leftStickValueRaw.y = _EngineMath2["default"].clamp(leftStickValue.y, -1, 1);

		this.rightStickValue = this.filterRightStickValue(rightStickValue.x, rightStickValue.y);
		this.rightStickValueRaw = _Vector2D2["default"].Zero();
		this.rightStickValueRaw.x = _EngineMath2["default"].clamp(rightStickValue.x, -1, 1);
		this.rightStickValueRaw.y = _EngineMath2["default"].clamp(rightStickValue.y, -1, 1);
	};

	GamepadState.prototype.copy = function copy() {
		var c = new this();
		c.update(this.name, this.index, this.timestamp, this.isConnected, this.buttons, this.leftStickValue, this.rightStickValue, this.leftTrigger, this.rightTrigger);
		return c;
	};

	GamepadState.prototype.copyFrom = function copyFrom(other) {
		this.name = other.name;
		this.index = other.index;
		this.timestamp = other.timestamp;
		this.isConnected = other.isConnected;
		this.buttons = other.buttons;
		this.leftTrigger = other.leftTrigger;
		this.leftTriggerRaw = other.leftTriggerRaw;
		this.rightTrigger = other.rightTrigger;
		this.rightTriggerRaw = other.rightTriggerRaw;
		this.leftStickValue.x = other.leftStickValue.x;
		this.leftStickValue.y = other.leftStickValue.y;
		this.leftStickValueRaw.x = other.leftStickValueRaw.x;
		this.leftStickValueRaw.y = other.leftStickValueRaw.y;
		this.rightStickValue.x = other.rightStickValue.x;
		this.rightStickValue.y = other.rightStickValue.y;
		this.rightStickValueRaw.x = other.rightStickValueRaw.x;
		this.rightStickValueRaw.y = other.rightStickValueRaw.y;
	};

	return GamepadState;
})(_Equatable3["default"]);

exports["default"] = GamepadState;
module.exports = exports["default"];

},{"../Engine":44,"../EngineMath":45,"../Equatable":46,"../Vector2D":67,"./Gamepad":91,"./GamepadButtons":94,"./GamepadDeadZoneMode":95,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],99:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Event2 = require("../Event");

var _Event3 = _interopRequireDefault(_Event2);

var _Engine = require("../Engine");

var GestureEvent = (function (_Event) {
	_inherits(GestureEvent, _Event);

	function GestureEvent(type, rotation, scale, bubbles, cancelable) {
		_classCallCheck(this, GestureEvent);

		_Event.call(this, type, _Engine.ValueOrDefault(bubbles, true), _Engine.ValueOrDefault(cancelable, true));

		this.rotation = rotation;
		this.scale = scale;
	}

	GestureEvent.prototype.getRotation = function getRotation() {
		return this.rotation;
	};

	GestureEvent.prototype.getScale = function getScale() {
		return this.scale;
	};

	return GestureEvent;
})(_Event3["default"]);

GestureEvent.GESTURE_START = "gestureStart";
GestureEvent.GESTURE_CHANGE = "gestureChange";
GestureEvent.GESTURE_END = "gestureEnd";

exports["default"] = GestureEvent;
module.exports = exports["default"];

},{"../Engine":44,"../Event":47,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],100:[function(require,module,exports){
"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Vector2D = require("../Vector2D");

var _Vector2D2 = _interopRequireDefault(_Vector2D);

var _Engine = require("../Engine");

var _Gamepad = require("./Gamepad");

var _Gamepad2 = _interopRequireDefault(_Gamepad);

var _GamepadButtonEvent = require("./GamepadButtonEvent");

var _GamepadButtonEvent2 = _interopRequireDefault(_GamepadButtonEvent);

var _GamepadButtons = require("./GamepadButtons");

var _GamepadButtons2 = _interopRequireDefault(_GamepadButtons);

var _MouseButton = require("./MouseButton");

var _MouseButton2 = _interopRequireDefault(_MouseButton);

var _ModifierKeys = require("./ModifierKeys");

var _ModifierKeys2 = _interopRequireDefault(_ModifierKeys);

var _Event = require("../Event");

var _Event2 = _interopRequireDefault(_Event);

var _GestureEvent = require("./GestureEvent");

var _GestureEvent2 = _interopRequireDefault(_GestureEvent);

var _Application = require("../Application");

var _Application2 = _interopRequireDefault(_Application);

var _TouchEvent = require("./TouchEvent");

var _TouchEvent2 = _interopRequireDefault(_TouchEvent);

var _TouchPoint = require("./TouchPoint");

var _TouchPoint2 = _interopRequireDefault(_TouchPoint);

var _MouseEvent = require("./MouseEvent");

var _MouseEvent2 = _interopRequireDefault(_MouseEvent);

var _MouseButtonEvent = require("./MouseButtonEvent");

var _MouseButtonEvent2 = _interopRequireDefault(_MouseButtonEvent);

var _MouseWheelEvent = require("./MouseWheelEvent");

var _MouseWheelEvent2 = _interopRequireDefault(_MouseWheelEvent);

var _Key = require("./Key");

var _Key2 = _interopRequireDefault(_Key);

var _KeyEvent = require("./KeyEvent");

var _KeyEvent2 = _interopRequireDefault(_KeyEvent);

var _NavigationDirection = require("./NavigationDirection");

var _NavigationDirection2 = _interopRequireDefault(_NavigationDirection);

var _NavigationEvent = require("./NavigationEvent");

var _NavigationEvent2 = _interopRequireDefault(_NavigationEvent);

var _NavigationMode = require("./NavigationMode");

var _NavigationMode2 = _interopRequireDefault(_NavigationMode);

var _EventDispatcher2 = require("../EventDispatcher");

var _EventDispatcher3 = _interopRequireDefault(_EventDispatcher2);

var TouchTarget = function TouchTarget(drawable) {
	_classCallCheck(this, TouchTarget);

	this.drawable = drawable;
	this.points = [];
};

var NavigationSearchResult = function NavigationSearchResult() {
	_classCallCheck(this, NavigationSearchResult);

	this.target = null;
	this.distance = null;
}

// TODO : need to convert mouse/touch coordinates to local coordinates when dispatching the event to
//        that target

// TODO : need to hookup the following events/gestures for mobile
//          - tap        (analogous to single click)
//          - doubleTap  (analogous to double click)
//          - flick
//          - swipe
//          - pinch      (pinchIn / pinchOut)
//          - shake

;

var InputManager = (function (_EventDispatcher) {
	_inherits(InputManager, _EventDispatcher);

	function InputManager(scene) {
		_classCallCheck(this, InputManager);

		_EventDispatcher.call(this);

		/** Surface **/
		this.target = scene;

		/** Vector2D **/
		this.mousePosition = _Vector2D2["default"].Zero();

		/** Drawable **/
		this.mouseOverTarget = null;

		/** Drawable **/
		this.mouseTarget = null;

		/** Drawable **/
		this.focusTarget = null;

		/** Boolean **/
		this.hasMouse = false;

		this.touchPosition = _Vector2D2["default"].Zero();
		this.touchTargets = [];
		this.hasTouch = false;

		/** Number **/
		this.lastKeyDown = 0;
		this.lastKeyDownTime = 0;
		this.lastKeyPress = 0;
		this.lastKeyPressTime = 0;
		this.lastNavigationButton = 0;
		this.lastNavigationTime = 0;

		// register all the events we plan to receive
		this.registerEvents();
	}

	InputManager.prototype.getTarget = function getTarget() {
		return this.target;
	};

	InputManager.prototype.getFocusTarget = function getFocusTarget() {
		return this.focusTarget;
	};

	InputManager.prototype.unregisterEvents = function unregisterEvents() {
		var canvas = this.getTarget().getNativeCanvas();

		canvas.removeEventListener("mousedown", this.handleMouseDown.asDelegate(this), false);
		canvas.removeEventListener("mouseup", this.handleMouseUp.asDelegate(this), false);
		canvas.removeEventListener("mousemove", this.handleMouseMove.asDelegate(this), false);
		canvas.removeEventListener("mouseover", this.handleMouseOver.asDelegate(this), false);
		canvas.removeEventListener("mouseout", this.handleMouseOut.asDelegate(this), false);
		canvas.removeEventListener("dblclick", this.handleDoubleClick.asDelegate(this), false);

		if (window.isNativeHost) {
			canvas.removeEventListener("mousewheel", this.handleMouseWheel.asDelegate(this), false);
		} else {
			if (_Engine.IsIE()) {
				canvas.removeEventListener("mousewheel", this.handleMouseWheel.asDelegate(this), false);
			} else if (_Engine.IsFirefox()) {
				//canvas.addEventListener("MozMousePixelScroll", this.handleMouseWheel.asDelegate(this), false);		
				canvas.removeEventListener("DOMMouseScroll", this.handleMouseWheel.asDelegate(this), false);
			}
		}

		canvas.removeEventListener("contextmenu", this.handleContextMenu.asDelegate(this), false);

		canvas.removeEventListener("touchstart", this.handleTouchStart.asDelegate(this), false);
		canvas.removeEventListener("touchend", this.handleTouchEnd.asDelegate(this), false);
		canvas.removeEventListener("touchmove", this.handleTouchMove.asDelegate(this), false);
		canvas.removeEventListener("touchcancel", this.handleTouchCancel.asDelegate(this), false);

		canvas.removeEventListener("gesturestart", this.handleGestureStart.asDelegate(this), false);
		canvas.removeEventListener("gesturechange", this.handleGestureChange.asDelegate(this), false);
		canvas.removeEventListener("gestureend", this.handleGestureEnd.asDelegate(this), false);

		window.removeEventListener("keydown", this.handleKeyDown.asDelegate(this), false);
		window.removeEventListener("keyup", this.handleKeyUp.asDelegate(this), false);
		window.removeEventListener("keypress", this.handleKeyDown.asDelegate(this), false);
	};

	InputManager.prototype.registerEvents = function registerEvents() {
		this.registerMouseEvents();
		this.registerKeyboardEvents();
		this.registerGamepadEvents();
	};

	InputManager.prototype.registerMouseEvents = function registerMouseEvents() {
		var canvas = this.getTarget().getNativeCanvas();

		// we only want to listen to these events from the canvas, this will give
		// use greater control while handling multi-canvas applications
		canvas.addEventListener("mousedown", this.handleMouseDown.asDelegate(this), false);
		canvas.addEventListener("mouseup", this.handleMouseUp.asDelegate(this), false);
		canvas.addEventListener("mousemove", this.handleMouseMove.asDelegate(this), false);
		canvas.addEventListener("mouseover", this.handleMouseOver.asDelegate(this), false);
		canvas.addEventListener("mouseout", this.handleMouseOut.asDelegate(this), false);
		canvas.addEventListener("dblclick", this.handleDoubleClick.asDelegate(this), false);

		// TODO : see what the other browsers support for mouse wheel scrolling
		if (window.isNativeHost) {
			canvas.addEventListener("mousewheel", this.handleMouseWheel.asDelegate(this), false);
		} else {
			if (_Engine.IsIE()) {
				canvas.addEventListener("mousewheel", this.handleMouseWheel.asDelegate(this), false);
			} else if (_Engine.IsFirefox()) {
				// for firefox we need to use the special DOMMouseScroll event
				//canvas.addEventListener("MozMousePixelScroll", this.handleMouseWheel.asDelegate(this), false);		
				canvas.addEventListener("DOMMouseScroll", this.handleMouseWheel.asDelegate(this), false);
			}
		}

		canvas.addEventListener("contextmenu", this.handleContextMenu.asDelegate(this), false);

		canvas.addEventListener("touchstart", this.handleTouchStart.asDelegate(this), false);
		canvas.addEventListener("touchend", this.handleTouchEnd.asDelegate(this), false);
		canvas.addEventListener("touchmove", this.handleTouchMove.asDelegate(this), false);
		canvas.addEventListener("touchcancel", this.handleTouchCancel.asDelegate(this), false);

		canvas.addEventListener("gesturestart", this.handleGestureStart.asDelegate(this), false);
		canvas.addEventListener("gesturechange", this.handleGestureChange.asDelegate(this), false);
		canvas.addEventListener("gestureend", this.handleGestureEnd.asDelegate(this), false);
	};

	InputManager.prototype.registerKeyboardEvents = function registerKeyboardEvents() {
		window.addEventListener("keydown", this.handleKeyDown.asDelegate(this), false);
		window.addEventListener("keyup", this.handleKeyUp.asDelegate(this), false);
		window.addEventListener("keypress", this.handleKeyDown.asDelegate(this), false);
	};

	InputManager.prototype.registerGamepadEvents = function registerGamepadEvents() {
		var gp = _Gamepad2["default"].getInstance();

		gp.addEventHandler(_GamepadButtonEvent2["default"].DOWN, this.handleGamepadButtonDown.d(this));
		gp.addEventHandler(_GamepadButtonEvent2["default"].UP, this.handleGamepadButtonUp.d(this));
	};

	// TODO : need to implement a custom context menu and/or allowing the native context menu

	InputManager.prototype.handleContextMenu = function handleContextMenu(evt) {
		//evt.preventDefault();
	};

	InputManager.prototype.mouseButtonFromNativeButton = function mouseButtonFromNativeButton(id) {
		switch (id) {
			case 0:
				return _MouseButton2["default"].Left;
			case 1:
				return _MouseButton2["default"].Middle;
			case 2:
				return _MouseButton2["default"].Right;
		}

		return _MouseButton2["default"].Unknown;
	};

	InputManager.prototype.updateMousePosition = function updateMousePosition(globalX, globalY) {
		var sourcePosition = this.getTarget().getAbsoluteSourcePosition();
		var sourceBounds = this.getTarget().getBounds();
		var actualPosition = new _Vector2D2["default"](globalX - sourcePosition.x, globalY - sourcePosition.y);

		this.hasMouse = sourceBounds.containsPoint(actualPosition);

		if (this.hasMouse) {
			this.mousePosition.x = actualPosition.x;
			this.mousePosition.y = actualPosition.y;
		}
	};

	InputManager.prototype.updateTouchPosition = function updateTouchPosition(globalX, globalY) {
		var sourcePosition = this.getTarget().getAbsoluteSourcePosition();
		var sourceBounds = this.getTarget().getBounds();
		var actualPosition = new _Vector2D2["default"](globalX - sourcePosition.x, globalY - sourcePosition.y);

		this.hasTouch = sourceBounds.containsPoint(actualPosition);

		if (this.hasTouch) {
			this.touchPosition.x = actualPosition.x;
			this.touchPosition.y = actualPosition.y;
		}
	};

	InputManager.prototype.getModifierKeysFromEvent = function getModifierKeysFromEvent(evt) {
		return _ModifierKeys2["default"].fromValues(evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey);
	};

	InputManager.prototype.focus = function focus(target, isMouse) {
		isMouse = _Engine.ValueOrDefault(isMouse, false);

		// focus if we have moved to a new target drawable
		if (target != this.focusTarget) {
			if (!isMouse || isMouse && target != null && target.getIsMouseFocusEnabled()) {
				// focus out for the previously focused target
				if (this.focusTarget != null) {
					// allow any listeners to cancel the event and keep focus, in which
					// case we simply bail out so the new target doesn't take focus
					if (!this.focusTarget.handleEvent(new _Event2["default"](_Event2["default"].FOCUS_OUT, false, true))) {
						return;
					}

					this.focusTarget.setIsFocused(false);
					this.focusTarget = null;
				}

				// focus in to the new target
				if (target != null) {
					// navigation zone's should not be allowed to receive focus directly
					// however, their children possibly can, so we need to see there is
					// a suitable target to take the focus
					if (target.getIsNavigationZone()) {
						target = this.findFirstAvailableFocusTarget(target);

						// no suitable target to take focus, just abort
						if (target == null) {
							return;
						}
					}

					this.focusTarget = target;

					// focus in on the target as long as the user didn't cancel
					if (this.focusTarget.handleEvent(new _Event2["default"](_Event2["default"].FOCUS_IN, false, true))) {
						this.focusTarget.setIsFocused(true);
					}
				}
			}
		}
	};

	InputManager.prototype.handleMouseMove = function handleMouseMove(evt) {

		var isMouseWithin = this.hasMouse;

		this.updateMousePosition(evt.clientX, evt.clientY);

		// there is no mouse captured and the new mouse position is not in
		// our canvas
		if (!isMouseWithin && !this.hasMouse) {
			return;
		}

		// get the hit test object
		var hitTestResult = this.getTarget().hitTest(this.mousePosition.x, this.mousePosition.y);

		if (hitTestResult != null) {
			if (hitTestResult != this.mouseOverTarget) {
				if (this.mouseOverTarget != null) {
					this.mouseOverTarget.handleEvent(new _MouseEvent2["default"](_MouseEvent2["default"].MOUSE_LEAVE, this.mousePosition.x, this.mousePosition.y, this.mouseButtonFromNativeButton(evt.button), this.getModifierKeysFromEvent(evt)));
				}

				hitTestResult.handleEvent(new _MouseEvent2["default"](_MouseEvent2["default"].MOUSE_ENTER, this.mousePosition.x, this.mousePosition.y, this.mouseButtonFromNativeButton(evt.button), this.getModifierKeysFromEvent(evt)));
			}

			this.mouseOverTarget = hitTestResult;

			hitTestResult.handleEvent(new _MouseEvent2["default"](_MouseEvent2["default"].MOUSE_MOVE, this.mousePosition.x, this.mousePosition.y, this.mouseButtonFromNativeButton(evt.button), this.getModifierKeysFromEvent(evt)));
		} else if (this.mouseOverTarget != null) {
			this.mouseOverTarget.handleEvent(new _MouseEvent2["default"](_MouseEvent2["default"].MOUSE_LEAVE, this.mousePosition.x, this.mousePosition.y, this.mouseButtonFromNativeButton(evt.button), this.getModifierKeysFromEvent(evt)));
			this.mouseOverTarget = null;
		}
	};

	InputManager.prototype.handleMouseDown = function handleMouseDown(evt) {

		this.updateMousePosition(evt.clientX, evt.clientY);

		var hitTestResult = this.getTarget().hitTest(this.mousePosition.x, this.mousePosition.y);

		if (hitTestResult != null) {
			hitTestResult.handleEvent(new _MouseButtonEvent2["default"](_MouseEvent2["default"].MOUSE_DOWN, this.mouseButtonFromNativeButton(evt.button), true, this.mousePosition.x, this.mousePosition.y, 1, this.getModifierKeysFromEvent(evt)));

			this.mouseTarget = hitTestResult;
			this.focus(this.mouseTarget);
		}
	};

	InputManager.prototype.handleMouseUp = function handleMouseUp(evt) {
		this.updateMousePosition(evt.clientX, evt.clientY);

		var hitTestResult = this.getTarget().hitTest(this.mousePosition.x, this.mousePosition.y);

		if (this.mouseTarget != null) {
			if (this.mouseTarget == hitTestResult) {
				hitTestResult.handleEvent(new _MouseButtonEvent2["default"](_MouseEvent2["default"].MOUSE_UP, this.mouseButtonFromNativeButton(evt.button), false, this.mousePosition.x, this.mousePosition.y, 0, this.getModifierKeysFromEvent(evt)));
				hitTestResult.handleEvent(new _MouseButtonEvent2["default"](_MouseEvent2["default"].CLICK, this.mouseButtonFromNativeButton(evt.button), false, this.mousePosition.x, this.mousePosition.y, 1, this.getModifierKeysFromEvent(evt)));
			} else {

				this.mouseTarget.handleEvent(new _MouseButtonEvent2["default"](_MouseEvent2["default"].MOUSE_UP_OUTSIDE, this.mouseButtonFromNativeButton(evt.button), false, this.mousePosition.x, this.mousePosition.y, 0, this.getModifierKeysFromEvent(evt)));
			}
		}

		this.mouseTarget = null;
	};

	InputManager.prototype.handleMouseOver = function handleMouseOver(evt) {
		this.getTarget().handleEvent(new _MouseEvent2["default"](_MouseEvent2["default"].MOUSE_ENTER, this.mousePosition.x, this.mousePosition.y, this.mouseButtonFromNativeButton(evt.button), this.getModifierKeysFromEvent(evt)));
	};

	InputManager.prototype.handleMouseOut = function handleMouseOut(evt) {
		if (this.mouseOverTarget != null) {
			this.mouseOverTarget.handleEvent(new _MouseEvent2["default"](_MouseEvent2["default"].MOUSE_LEAVE, this.mousePosition.x, this.mousePosition.y, this.mouseButtonFromNativeButton(evt.button), this.getModifierKeysFromEvent(evt)));
		}

		// the mouse has left the canvas, fire off an event to the target scene
		// and reset all our current mouse info, since we no longer care about any
		// mouse events.
		this.getTarget().handleEvent(new _MouseEvent2["default"](_MouseEvent2["default"].MOUSE_LEAVE, this.mousePosition.x, this.mousePosition.y, this.mouseButtonFromNativeButton(evt.button), this.getModifierKeysFromEvent(evt)));

		this.hasMouse = false;
		this.mouseTarget = null;
		this.mouseOverTarget = null;
	};

	InputManager.prototype.handleDoubleClick = function handleDoubleClick(evt) {

		var hitTestResult = this.getTarget().hitTest(this.mousePosition.x, this.mousePosition.y);

		if (hitTestResult != null) {
			hitTestResult.handleEvent(new _MouseButtonEvent2["default"](_MouseEvent2["default"].DOUBLE_CLICK, this.mouseButtonFromNativeButton(evt.button), true, this.mousePosition.x, this.mousePosition.y, 2, this.getModifierKeysFromEvent(evt)));
		}
	};

	InputManager.prototype.handleMouseWheel = function handleMouseWheel(evt) {

		if (!this.hasMouse) {
			return;
		}

		var hitTestResult = this.getTarget().hitTest(this.mousePosition.x, this.mousePosition.y);

		if (hitTestResult != null) {
			// TODO : update the delta calculation when pixel scrolling is implemented

			var scrollDelta = evt.wheelDelta ? evt.wheelDelta : evt.detail;

			if (scrollDelta > 100 || scrollDelta < -100) {
				scrollDelta /= -150;
			}

			var delta = scrollDelta;

			if (delta != 0) {
				delta = Math.abs(delta) / delta;
			}

			delta = Math.min(Math.abs(scrollDelta) / 100, 1) * delta;

			hitTestResult.handleEvent(new _MouseWheelEvent2["default"](_MouseEvent2["default"].MOUSE_WHEEL, delta, this.mousePosition.x, this.mousePosition.y, this.getModifierKeysFromEvent(evt)));
		}
	};

	InputManager.prototype.handleKeyDown = function handleKeyDown(evt) {
		var keyEvent = null;
		var isSameKey = false;
		var isRepeat = false;

		if (evt.type == "keydown") {
			isSameKey = evt.keyCode == this.lastKeyDown;
			isRepeat = isSameKey && evt.timeStamp - this.lastKeyDownTime <= 50;
		}

		// it's possible that the focus target might not
		// have focus anymore if the user toggled it off
		if (this.focusTarget != null && this.focusTarget.getIsFocused()) {
			// fire key down event
			if (evt.type == "keydown") {
				keyEvent = new _KeyEvent2["default"](_KeyEvent2["default"].KEY_DOWN, evt.keyCode, true, isRepeat, _ModifierKeys2["default"].fromValues(evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey), -1);

				this.focusTarget.handleEvent(keyEvent);
			}

			// fire key press event
			if (evt.type == "keypress") {
				isSameKey = evt.charCode == this.lastKeyPress;
				isRepeat = isSameKey && evt.timeStamp - this.lastKeyPressTime <= 50;
				keyEvent = new _KeyEvent2["default"](_KeyEvent2["default"].KEY_PRESS, evt.keyCode, true, isRepeat, _ModifierKeys2["default"].fromValues(evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey));

				this.focusTarget.handleEvent(keyEvent);
			}
		}

		if (evt.type == "keydown") {
			this.lastKeyDown = evt.keyCode;
			this.lastKeyDownTime = evt.timeStamp;

			var key = _Key2["default"].fromKeyCode(evt.keyCode);

			if ((keyEvent == null || keyEvent != null && !keyEvent.getIsDefaultPrevented()) && this.isNavigationKey(key)) {
				this.processKeyboardNavigationEvent(key);
			}

			// always send to application
			if (!_Application2["default"].getInstance().dispatchEvent(new _KeyEvent2["default"](_KeyEvent2["default"].KEY_DOWN, evt.keyCode, true, isRepeat, _ModifierKeys2["default"].fromValues(evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey), -1))) {
				evt.preventDefault();
				return;
			}
		}

		if (evt.type == "keypress") {
			this.lastKeyPress = evt.charCode;
			this.lastKeyPressTime = evt.timeStamp;
		}

		if (keyEvent != null && keyEvent.getIsDefaultPrevented()) {
			evt.preventDefault();
		}
	};

	InputManager.prototype.handleKeyUp = function handleKeyUp(evt) {
		// it's possible that the focus target might not
		// have focus anymore if the user toggled it off
		if (this.focusTarget != null && this.focusTarget.getIsFocused()) {
			this.focusTarget.handleEvent(new _KeyEvent2["default"](_KeyEvent2["default"].KEY_UP, evt.keyCode, false, false, _ModifierKeys2["default"].fromValues(evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey), -1));
		}

		// always send to application
		_Application2["default"].getInstance().dispatchEvent(new _KeyEvent2["default"](_KeyEvent2["default"].KEY_UP, evt.keyCode, false, false, _ModifierKeys2["default"].fromValues(evt.altKey, evt.ctrlKey, evt.shiftKey, evt.metaKey), -1));
	};

	InputManager.prototype.handleGamepadButtonDown = function handleGamepadButtonDown(e) {
		if (this.focusTarget != null && this.focusTarget.getIsFocused()) {
			var evt = new _GamepadButtonEvent2["default"](_GamepadButtonEvent2["default"].DOWN, e.getIndex(), e.getButton(), e.getIsDown(), e.getTimestamp(), true, true);

			this.focusTarget.handleEvent(evt);

			if (evt.getIsDefaultPrevented()) {
				return;
			}
		}

		// check if the event came from the current input gamepad
		// and try to process and navigation
		if (e.getIndex() == _Gamepad2["default"].getInputIndex() && this.isNavigationButton(e.getButton())) {
			if (this.lastNavigationTime == 0 || e.getTimestamp() - this.lastNavigationTime > 100) {
				this.lastNavigationTime = e.getTimestamp();
				this.lastNavigationButton = e.getButton();

				this.processGamepadNavigationEvent(e);
			}
		}
	};

	InputManager.prototype.handleGamepadButtonUp = function handleGamepadButtonUp(e) {
		if (this.focusTarget == null) {
			return;
		}

		// just pass the event directly through, however, in the future we may want/need
		// to change this to support repeating flags, timing, etc...
		if (this.focusTarget.getIsFocused()) {
			this.focusTarget.handleEvent(new _GamepadButtonEvent2["default"](_GamepadButtonEvent2["default"].UP, e.getIndex(), e.getButton(), e.getIsDown(), e.getTimestamp(), true));
		}
	};

	InputManager.prototype.processGamepadNavigationEvent = function processGamepadNavigationEvent(e) {
		switch (e.getButton()) {
			case _GamepadButtons2["default"].DPadUp:
			case _GamepadButtons2["default"].LeftStickUp:
				this.processNavigationEvent(_NavigationDirection2["default"].Up);
				break;
			case _GamepadButtons2["default"].DPadDown:
			case _GamepadButtons2["default"].LeftStickDown:
				this.processNavigationEvent(_NavigationDirection2["default"].Down);
				break;
			case _GamepadButtons2["default"].DPadLeft:
			case _GamepadButtons2["default"].LeftStickLeft:
				this.processNavigationEvent(_NavigationDirection2["default"].Left);
				break;
			case _GamepadButtons2["default"].DPadRight:
			case _GamepadButtons2["default"].LeftStickRight:
				this.processNavigationEvent(_NavigationDirection2["default"].Right);
				break;
		}
	};

	InputManager.prototype.processKeyboardNavigationEvent = function processKeyboardNavigationEvent(key) {
		switch (key) {
			case _Key2["default"].Up:
				this.processNavigationEvent(_NavigationDirection2["default"].Up);
				break;
			case _Key2["default"].Down:
				this.processNavigationEvent(_NavigationDirection2["default"].Down);
				break;
			case _Key2["default"].Left:
				this.processNavigationEvent(_NavigationDirection2["default"].Left);
				break;
			case _Key2["default"].Right:
				this.processNavigationEvent(_NavigationDirection2["default"].Right);
				break;
		}
	};

	InputManager.prototype.processNavigationEvent = function processNavigationEvent(direction) {
		var currentFocusTarget = this.focusTarget;
		var currentNavigationZone = currentFocusTarget == null ? null : currentFocusTarget.getNavigationZone();

		// try to find the first available navigation zone if the current
		// focus target does not have one or if there is no focus target
		if (currentFocusTarget == null || currentNavigationZone == null) {
			currentNavigationZone = this.findFirstNavigationZone(this.target);
		}

		// unable to find a suitable navigation zone to search in
		if (currentNavigationZone == null) {
			return;
		}

		// we do not yet have a focus target to use as a search
		// reference, so try and find the first one available in
		// the navigation zone
		if (currentFocusTarget == null) {
			currentFocusTarget = this.findFirstAvailableFocusTarget(currentNavigationZone);

			// still unable to find a focus target, so just focus on the navigation
			// zone and let it handle input events
			if (currentFocusTarget == null) {
				currentFocusTarget = currentNavigationZone;
			}

			this.navigate(direction, this.focusTarget, currentFocusTarget);
			return;
		}

		// otherwise, try to move focus in the requested direction
		var navigationMode = currentFocusTarget.getNavigationMode();
		var navigationDirectionNormal = _Vector2D2["default"].Zero();

		switch (direction) {
			case _NavigationDirection2["default"].Up:
				navigationDirectionNormal.y = -1;
				break;
			case _NavigationDirection2["default"].Down:
				navigationDirectionNormal.y = 1;
				break;
			case _NavigationDirection2["default"].Left:
				navigationDirectionNormal.x = -1;
				break;
			case _NavigationDirection2["default"].Right:
				navigationDirectionNormal.x = 1;
				break;
		}

		// search for the next target that can take focus
		var searchResult = this.findNextFocusTarget(currentFocusTarget, currentNavigationZone, direction, navigationDirectionNormal, navigationMode);

		// if the search found a suitable target, then focus on it
		this.navigate(direction, this.focusTarget, searchResult.target);
	};

	InputManager.prototype.navigate = function navigate(direction, targetFrom, targetTo) {
		// send a leave event to the current target
		if (targetFrom != null) {
			var navLeaveEvent = new _NavigationEvent2["default"](_NavigationEvent2["default"].LEAVE, direction, targetFrom, targetTo, true, true);

			// allow the navigation to be cancelled
			if (!targetFrom.handleEvent(navLeaveEvent)) {
				return false;
			}
		}

		if (targetTo != null) {
			// then an enter event to the new target
			var navEnterEvent = new _NavigationEvent2["default"](_NavigationEvent2["default"].ENTER, direction, targetFrom, targetTo, true, true);

			// also check if it was cancelled, this will still allow listeners
			// to focus or run other custom navigation rules without auto-focusing
			if (!targetTo.handleEvent(navEnterEvent)) {
				return false;
			}

			targetTo.focus();
		}

		return true;
	};

	InputManager.prototype.findNextFocusTarget = function findNextFocusTarget(focusReference, searchTarget, navigationDirection, navigationDirectionNormal, navigationMode) {
		var searchResult = new NavigationSearchResult();
		var referencePosition = this.getNavigationPositionForDirection(focusReference, navigationDirection);

		// run the search
		this.findNextFocusTargetImpl(focusReference, referencePosition, searchResult, searchTarget, navigationDirection, navigationDirectionNormal, navigationMode);

		// no target was found, the last step is to go to the navigation
		// zone above the current and see if there is a sibling that has
		// a suitable target to take focus, otherwise no change in focus
		if (searchResult.target == null) {
			var nextSearchTarget = searchTarget.getNavigationZone(false);
			var nextNavigationZone = null;

			// unable to find any suitable target to focus on to
			if (nextSearchTarget == null) {
				return searchResult;
			}

			// reset search result
			searchResult.distance = null;
			searchResult.target = null;

			// set our reference point to the navigation zone
			referencePosition = this.getNavigationPositionForDirection(searchTarget, navigationDirection);

			// search only the zone's first level children
			for (var i = 0, len = nextSearchTarget.getCount(); i < len; ++i) {
				var c = nextSearchTarget.getAt(i);

				// exclude the existing search target since we
				// have already exhausted all possibilities from it
				if (c == searchTarget) {
					continue;
				}

				// make sure there is a suitable focus target
				var firstAvailableTarget = this.findFirstAvailableFocusTarget(c);

				if (firstAvailableTarget == null) {
					continue;
				}

				// check if the zone is in the right direction
				var position = this.getNavigationPositionForDirection(c, this.getOppositeNavigationDirection(navigationDirection));
				var distance = position.distance(referencePosition);
				var direction = position.subtract(referencePosition);

				direction.normalize();

				if ((searchResult.distance == null || distance < searchResult.distance) && (direction.x * navigationDirectionNormal.x > 0 || direction.y * navigationDirectionNormal.y > 0)) {
					if (navigationMode == _NavigationMode2["default"].Normal || navigationMode == _NavigationMode2["default"].Constrain && nextSearchTarget.getParent() == searchTarget.getParent()) {
						// found one... update our search result
						nextNavigationZone = c;

						searchResult.target = firstAvailableTarget;
						searchResult.distance = distance;
					}
				}
			}
		}

		return searchResult;
	};

	InputManager.prototype.findNextFocusTargetImpl = function findNextFocusTargetImpl(focusReference, referencePosition, searchResult, searchTarget, navigationDirection, navigationDirectionNormal, navigationMode) {
		// only visible containers can be searched
		if (searchTarget == null || !searchTarget.getVisible()) {
			return;
		}

		// must not be the current focused element, must be visible and must have navigation focus enabled
		// to be considered a target candidate
		if (searchTarget != focusReference && searchTarget.getIsNavigationFocusEnabled()) {
			// check if the target is in the right direction
			var position = this.getNavigationPositionForDirection(searchTarget, this.getOppositeNavigationDirection(navigationDirection));
			var distance = position.distance(referencePosition);
			var direction = position.subtract(referencePosition);

			direction.normalize();

			if ((searchResult.distance == null || distance < searchResult.distance) && (direction.x * navigationDirectionNormal.x > 0 || direction.y * navigationDirectionNormal.y > 0)) {
				if (navigationMode == _NavigationMode2["default"].Normal || navigationMode == _NavigationMode2["default"].Constrain && searchTarget.getParent() == focusReference.getParent()) {
					searchResult.target = searchTarget;
					searchResult.distance = distance;
				}
			}
		}

		// keep going until the entire tree has been searched
		for (var i = 0, len = searchTarget.getCount(); i < len; ++i) {
			this.findNextFocusTargetImpl(focusReference, referencePosition, searchResult, searchTarget.getAt(i), navigationDirection, navigationDirectionNormal, navigationMode);
		}
	};

	InputManager.prototype.findFirstAvailableFocusTarget = function findFirstAvailableFocusTarget(searchTarget) {
		if (searchTarget != null && searchTarget.getVisible() && searchTarget.getIsNavigationFocusEnabled()) {
			return searchTarget;
		}

		for (var i = 0, len = searchTarget.getCount(); i < len; ++i) {
			var target = this.findFirstAvailableFocusTarget(searchTarget.getAt(i));

			if (target != null) {
				return target;
			}
		}

		return null;
	};

	InputManager.prototype.findFirstNavigationZone = function findFirstNavigationZone(searchTarget) {
		if (searchTarget != null && searchTarget.getVisible() && searchTarget.getIsNavigationZone()) {
			return searchTarget;
		}

		for (var i = 0, len = searchTarget.getCount(); i < len; ++i) {
			var target = this.findFirstNavigationZone(searchTarget.getAt(i));

			if (target != null) {
				return target;
			}
		}
	};

	InputManager.prototype.getOppositeNavigationDirection = function getOppositeNavigationDirection(direction) {
		switch (direction) {
			case _NavigationDirection2["default"].Up:
				return _NavigationDirection2["default"].Down;
			case _NavigationDirection2["default"].Down:
				return _NavigationDirection2["default"].Up;
			case _NavigationDirection2["default"].Left:
				return _NavigationDirection2["default"].Right;
			case _NavigationDirection2["default"].Right:
				return _NavigationDirection2["default"].Left;
		}
	};

	InputManager.prototype.getNavigationPositionForDirection = function getNavigationPositionForDirection(target, direction) {
		var width = target.getWidth();
		var height = target.getHeight();
		var position = target.pointToGlobal(_Vector2D2["default"].Zero());

		switch (direction) {
			case _NavigationDirection2["default"].Down:
				position.y += height * 0.5;
				break;
			case _NavigationDirection2["default"].Right:
				position.x += width * 0.5;
				break;
		}

		return position;
	};

	InputManager.prototype.isNavigationButton = function isNavigationButton(button) {
		return button == _GamepadButtons2["default"].DPadUp || button == _GamepadButtons2["default"].DPadDown || button == _GamepadButtons2["default"].DPadLeft || button == _GamepadButtons2["default"].DPadRight || button == _GamepadButtons2["default"].LeftStickUp || button == _GamepadButtons2["default"].LeftStickDown || button == _GamepadButtons2["default"].LeftStickLeft || button == _GamepadButtons2["default"].LeftStickRight;
	};

	InputManager.prototype.isNavigationKey = function isNavigationKey(key) {
		return key == _Key2["default"].Down || key == _Key2["default"].Up || key == _Key2["default"].Left || key == _Key2["default"].Right;
	};

	InputManager.prototype.handleTouchStart = function handleTouchStart(evt) {
		var touches = evt.changedTouches;
		var touch, i;
		var len = touches.length;
		var targets = [];

		// determine which drawables have been touched
		for (i = 0; i < len; ++i) {
			touch = touches[i];

			// update the touch position to local scene coordinates
			this.updateTouchPosition(touch.clientX, touch.clientY);

			// the touch exists within our scene
			if (this.hasTouch) {
				// determine which drawable has been hit
				var hitTestResult = this.getTarget().hitTest(this.touchPosition.x, this.touchPosition.y);

				if (hitTestResult != null) {
					// we'll need to store this target so we can track
					// it later during move/end events
					if (!this.touchTargets.contains(hitTestResult)) {
						this.touchTargets.push(hitTestResult);
					}

					// add the touch id
					hitTestResult.touches.push(touch.identifier);

					// add the touch info to our targets
					this.addTouchPointToTarget(targets, hitTestResult, new _TouchPoint2["default"](touch.identifier, this.touchPosition.x, this.touchPosition.y));
				}
			}
		}

		var cancelEvent = !_Application2["default"].getInstance().getEnableNativeGestures();

		// now we can send an event to each of the
		// target drawables found
		len = targets.length;

		for (i = 0; i < len; ++i) {
			var target = targets[i];

			if (!target.drawable.handleEvent(new _TouchEvent2["default"](_TouchEvent2["default"].TOUCH_START, target.points, evt.scale, evt.rotation))) {
				cancelEvent = true;
			}
		}

		// stop the device from processing the native touch event
		if (cancelEvent) {
			evt.preventDefault();
		}
	};

	InputManager.prototype.handleTouchEnd = function handleTouchEnd(evt) {
		var touches = evt.changedTouches;
		var touch, i, target;
		var len = touches.length;
		var targets = [];

		// determine which drawables have been touched
		for (i = 0; i < len; ++i) {
			touch = touches[i];

			// update the touch position to local scene coordinates
			this.updateTouchPosition(touch.clientX, touch.clientY);

			// see if we have a target for the given identifier, otherwise
			// we don't have anything to do, this would most likely never
			// occur but just in case
			target = this.findTouchTarget(touch.identifier, true);

			if (target == null) {
				continue;
			}

			// add the touch info to our target list
			this.addTouchPointToTarget(targets, target, new _TouchPoint2["default"](touch.identifier, this.touchPosition.x, this.touchPosition.y));
		}

		var cancelEvent = !_Application2["default"].getInstance().getEnableNativeGestures();

		// now we can send an event to each of the
		// target drawables found
		len = targets.length;

		for (i = 0; i < len; ++i) {
			target = targets[i];

			// if the drawable doesn't contain anymore touches
			// then we must remove it from the global target list
			if (target.drawable.touches.length == 0) {
				this.touchTargets.remove(target.drawable);
			}

			if (!target.drawable.handleEvent(new _TouchEvent2["default"](_TouchEvent2["default"].TOUCH_END, target.points, evt.scale, evt.rotation))) {
				cancelEvent = true;
			}
		}

		// stop the device from processing the native touch event
		if (cancelEvent) {
			evt.preventDefault();
		}
	};

	InputManager.prototype.handleTouchMove = function handleTouchMove(evt) {
		var touches = evt.changedTouches;
		var touch, i, target;
		var len = touches.length;
		var targets = [];

		// determine which drawables have been touched
		for (i = 0; i < len; ++i) {
			touch = touches[i];

			// update the touch position to local scene coordinates
			this.updateTouchPosition(touch.clientX, touch.clientY);

			// see if we have a target for the given identifier, otherwise
			// we don't have anything to do, this would most likely never
			// occur but just in case
			target = this.findTouchTarget(touch.identifier, false);

			if (target == null) {
				continue;
			}

			// add the touch info to our target list
			this.addTouchPointToTarget(targets, target, new _TouchPoint2["default"](touch.identifier, this.touchPosition.x, this.touchPosition.y));
		}

		var cancelEvent = !_Application2["default"].getInstance().getEnableNativeGestures();

		// now we can send an event to each of the
		// target drawables found
		len = targets.length;

		for (i = 0; i < len; ++i) {
			target = targets[i];

			if (!target.drawable.handleEvent(new _TouchEvent2["default"](_TouchEvent2["default"].TOUCH_MOVE, target.points, evt.scale, evt.rotation))) {
				cancelEvent = true;
			}
		}

		// stop the device from processing the native touch event
		if (cancelEvent) {
			evt.preventDefault();
		}
	};

	InputManager.prototype.handleTouchCancel = function handleTouchCancel(evt) {
		var touches = evt.changedTouches;
		var touch, i, target;
		var len = touches.length;
		var targets = [];

		// determine which drawables have been touched
		for (i = 0; i < len; ++i) {
			touch = touches[i];

			// update the touch position to local scene coordinates
			this.updateTouchPosition(touch.clientX, touch.clientY);

			// see if we have a target for the given identifier, otherwise
			// we don't have anything to do, this would most likely never
			// occur but just in case
			target = this.findTouchTarget(touch.identifier, true);

			if (target == null) {
				continue;
			}

			// add the touch info to our target list
			this.addTouchPointToTarget(targets, target, new _TouchPoint2["default"](touch.identifier, this.touchPosition.x, this.touchPosition.y));
		}

		var cancelEvent = !_Application2["default"].getInstance().getEnableNativeGestures();

		// now we can send an event to each of the
		// target drawables found
		len = targets.length;

		for (i = 0; i < len; ++i) {
			target = targets[i];

			// if the drawable doesn't contain anymore touches
			// then we must remove it from the global target list
			if (target.drawable.touches.length == 0) {
				this.touchTargets.remove(target.drawable);
			}

			if (!target.drawable.handleEvent(new _TouchEvent2["default"](_TouchEvent2["default"].TOUCH_CANCEL, target.points, evt.scale, evt.rotation))) {
				cancelEvent = true;
			}
		}

		// stop the device from processing the native touch event
		if (cancelEvent) {
			evt.preventDefault();
		}
	};

	InputManager.prototype.handleGestureStart = function handleGestureStart(evt) {
		var cancelEvent = !_Application2["default"].getInstance().getEnableNativeGestures();

		if (!this.getTarget().handleEvent(new _GestureEvent2["default"](_GestureEvent2["default"].GESTURE_START, evt.rotation, evt.scale))) {
			cancelEvent = true;
		}

		if (cancelEvent) {
			evt.preventDefault();
		}
	};

	InputManager.prototype.handleGestureChange = function handleGestureChange(evt) {
		var cancelEvent = !_Application2["default"].getInstance().getEnableNativeGestures();

		if (!this.getTarget().handleEvent(new _GestureEvent2["default"](_GestureEvent2["default"].GESTURE_CHANGE, evt.rotation, evt.scale))) {
			cancelEvent = true;
		}

		if (cancelEvent) {
			evt.preventDefault();
		}
	};

	InputManager.prototype.handleGestureEnd = function handleGestureEnd(evt) {
		var cancelEvent = !_Application2["default"].getInstance().getEnableNativeGestures();

		if (!this.getTarget().handleEvent(new _GestureEvent2["default"](_GestureEvent2["default"].GESTURE_END, evt.rotation, evt.scale))) {
			cancelEvent = true;
		}

		if (cancelEvent) {
			evt.preventDefault();
		}
	};

	InputManager.prototype.addTouchPointToTarget = function addTouchPointToTarget(targets, drawable, point) {
		var len = targets.length;
		var touchTarget;

		for (var i = 0; i < len; ++i) {
			touchTarget = targets[i];

			if (touchTarget.drawable == drawable) {
				touchTarget.points.push(point);
				return;
			}
		}

		touchTarget = new TouchTarget(drawable);
		touchTarget.points.push(point);
		targets.push(touchTarget);
	};

	InputManager.prototype.findTouchTarget = function findTouchTarget(id, doRemove) {
		var len = this.touchTargets.length;
		var target = null;

		for (var i = 0; i < len; ++i) {
			target = this.touchTargets[i];

			for (var j = 0; j < target.touches.length; ++j) {
				if (target.touches[j] == id) {
					if (doRemove) {
						target.touches.removeAt(j);
					}

					return target;
				}
			}
		}

		return null;
	};

	return InputManager;
})(_EventDispatcher3["default"]);

exports["default"] = InputManager;
module.exports = exports["default"];

},{"../Application":38,"../Engine":44,"../Event":47,"../EventDispatcher":48,"../Vector2D":67,"./Gamepad":91,"./GamepadButtonEvent":92,"./GamepadButtons":94,"./GestureEvent":99,"./Key":101,"./KeyEvent":102,"./ModifierKeys":103,"./MouseButton":104,"./MouseButtonEvent":105,"./MouseEvent":106,"./MouseWheelEvent":108,"./NavigationDirection":109,"./NavigationEvent":110,"./NavigationMode":111,"./TouchEvent":112,"./TouchPoint":113,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],101:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var Key = {
	"None": 0,
	"Cancel": 1,
	"Back": 2,
	"Tab": 3,
	"LineFeed": 4,
	"Clear": 5,
	"Enter": 6,
	"Pause": 7,
	"CapsLock": 8,
	"Escape": 9,
	"Space": 10,
	"PageUp": 11,
	"PageDown": 12,
	"Next": 13,
	"End": 14,
	"Home": 15,
	"Left": 16,
	"Up": 17,
	"Right": 18,
	"Down": 19,
	"Select": 20,
	"Print": 21,
	"Execute": 22,
	"PrintScreen": 23,
	"Insert": 24,
	"Delete": 25,
	"Help": 26,
	"D0": 27,
	"D1": 28,
	"D2": 29,
	"D3": 30,
	"D4": 31,
	"D5": 32,
	"D6": 33,
	"D7": 34,
	"D8": 35,
	"D9": 36,
	"A": 37,
	"B": 38,
	"C": 39,
	"D": 40,
	"E": 41,
	"F": 42,
	"G": 43,
	"H": 44,
	"I": 45,
	"J": 46,
	"K": 47,
	"L": 48,
	"M": 49,
	"N": 50,
	"O": 51,
	"P": 52,
	"Q": 53,
	"R": 54,
	"S": 55,
	"T": 56,
	"U": 57,
	"V": 58,
	"W": 59,
	"X": 60,
	"Y": 61,
	"Z": 62,
	"LWin": 63,
	"RWin": 64,
	"Apps": 65,
	"Sleep": 66,
	"NumPad0": 67,
	"NumPad1": 68,
	"NumPad2": 69,
	"NumPad3": 70,
	"NumPad4": 71,
	"NumPad5": 72,
	"NumPad6": 73,
	"NumPad7": 74,
	"NumPad8": 75,
	"NumPad9": 76,
	"Multiply": 77,
	"Add": 78,
	"Separator": 79,
	"Subtract": 80,
	"Decimal": 81,
	"Divide": 82,
	"F1": 83,
	"F2": 84,
	"F3": 85,
	"F4": 86,
	"F5": 87,
	"F6": 88,
	"F7": 89,
	"F8": 90,
	"F9": 91,
	"F10": 92,
	"F11": 93,
	"F12": 94,
	"F13": 95,
	"F14": 96,
	"F15": 97,
	"F16": 98,
	"F17": 99,
	"F18": 100,
	"F19": 101,
	"F20": 102,
	"F21": 103,
	"F22": 104,
	"F23": 105,
	"F24": 106,
	"NumLock": 107,
	"Scroll": 108,
	"LeftShift": 109,
	"RightShift": 110,
	"LeftCtrl": 111,
	"RightCtrl": 112,
	"LeftAlt": 113,
	"RightAlt": 114,
	"BrowserBack": 115,
	"BrowserForward": 116,
	"BrowserRefresh": 117,
	"BrowserStop": 118,
	"BrowserSearch": 119,
	"BrowserFavorites": 120,
	"BrowserHome": 121,
	"VolumeMute": 122,
	"VolumeDown": 123,
	"VolumeUp": 124,
	"MediaNextTrack": 125,
	"MediaPreviousTrack": 126,
	"MediaStop": 127,
	"MediaPlayPause": 128,
	"LaunchMail": 129,
	"SelectMedia": 130,
	"LaunchApplication1": 131,
	"LaunchApplication2": 132,
	"System": 133,
	"CrSel": 134,
	"ExSel": 135,
	"EraseEof": 136,
	"Play": 137,
	"Zoom": 138,
	"SemiColon": 139,
	"Comma": 140,
	"Period": 141,
	"Quote": 142,
	"BackQuote": 143,
	"Slash": 144,
	"BackSlash": 145,
	"OpenBracket": 146,
	"CloseBracket": 147,

	fromKeyCode: function fromKeyCode(keyCode) {
		switch (keyCode) {
			case 3:
				return Key.Cancel;
			case 8:
				return Key.Back;
			case 9:
				return Key.Tab;
			case 12:
				return Key.Clear;
			case 13:
				return Key.Enter;
			case 16:
			case 160:
				return Key.LeftShift;
			case 17:
			case 162:
				return Key.LeftCtrl;
			case 18:
			case 164:
				return Key.LeftAlt;
			case 19:
				return Key.Pause;
			case 20:
				return Key.CapsLock;
			case 27:
				return Key.Escape;
			case 32:
				return Key.Space;
			case 33:
				return Key.PageUp;
			case 34:
				return Key.PageDown;
			case 35:
				return Key.End;
			case 36:
				return Key.Home;
			case 37:
				return Key.Left;
			case 38:
				return Key.Up;
			case 39:
				return Key.Right;
			case 40:
				return Key.Down;
			case 41:
				return Key.Select;
			case 42:
				return Key.Print;
			case 43:
				return Key.Execute;
			case 44:
				return Key.PrintScreen;
			case 45:
				return Key.Insert;
			case 46:
				return Key.Delete;
			case 47:
				return Key.Help;
			case 48:
				return Key.D0;
			case 49:
				return Key.D1;
			case 50:
				return Key.D2;
			case 51:
				return Key.D3;
			case 52:
				return Key.D4;
			case 53:
				return Key.D5;
			case 54:
				return Key.D6;
			case 55:
				return Key.D7;
			case 56:
				return Key.D8;
			case 57:
				return Key.D9;
			case 59:
				return Key.SemiColon;
			case 65:
				return Key.A;
			case 66:
				return Key.B;
			case 67:
				return Key.C;
			case 68:
				return Key.D;
			case 69:
				return Key.E;
			case 70:
				return Key.F;
			case 71:
				return Key.G;
			case 72:
				return Key.H;
			case 73:
				return Key.I;
			case 74:
				return Key.J;
			case 75:
				return Key.K;
			case 76:
				return Key.L;
			case 77:
				return Key.M;
			case 78:
				return Key.N;
			case 79:
				return Key.O;
			case 80:
				return Key.P;
			case 81:
				return Key.Q;
			case 82:
				return Key.R;
			case 83:
				return Key.S;
			case 84:
				return Key.T;
			case 85:
				return Key.U;
			case 86:
				return Key.V;
			case 87:
				return Key.W;
			case 88:
				return Key.X;
			case 89:
				return Key.Y;
			case 90:
				return Key.Z;
			case 91:
				return Key.LWin;
			case 92:
				return Key.RWin;
			case 93:
				return Key.Apps;
			case 95:
				return Key.Sleep;
			case 96:
				return Key.NumPad0;
			case 97:
				return Key.NumPad1;
			case 98:
				return Key.NumPad2;
			case 99:
				return Key.NumPad3;
			case 100:
				return Key.NumPad4;
			case 101:
				return Key.NumPad5;
			case 102:
				return Key.NumPad6;
			case 103:
				return Key.NumPad7;
			case 104:
				return Key.NumPad8;
			case 105:
				return Key.NumPad9;
			case 106:
				return Key.Multiply;
			case 107:
				return Key.Add;
			case 108:
				return Key.Separator;
			case 109:
				return Key.Subtract;
			case 110:
				return Key.Decimal;
			case 111:
				return Key.Divide;
			case 112:
				return Key.F1;
			case 113:
				return Key.F2;
			case 114:
				return Key.F3;
			case 115:
				return Key.F4;
			case 116:
				return Key.F5;
			case 117:
				return Key.F6;
			case 118:
				return Key.F7;
			case 119:
				return Key.F8;
			case 120:
				return Key.F9;
			case 121:
				return Key.F10;
			case 122:
				return Key.F11;
			case 123:
				return Key.F12;
			case 124:
				return Key.F13;
			case 125:
				return Key.F14;
			case 126:
				return Key.F15;
			case 127:
				return Key.F16;
			case 128:
				return Key.F17;
			case 129:
				return Key.F18;
			case 130:
				return Key.F19;
			case 131:
				return Key.F20;
			case 132:
				return Key.F21;
			case 133:
				return Key.F22;
			case 134:
				return Key.F23;
			case 135:
				return Key.F24;
			case 144:
				return Key.NumLock;
			case 145:
				return Key.Scroll;
			case 161:
				return Key.RightShift;
			case 163:
				return Key.RightCtrl;
			case 165:
				return Key.RightAlt;
			case 166:
				return Key.BrowserBack;
			case 167:
				return Key.BrowserForward;
			case 168:
				return Key.BrowserRefresh;
			case 169:
				return Key.BrowserStop;
			case 170:
				return Key.BrowserSearch;
			case 171:
				return Key.BrowserFavorites;
			case 172:
				return Key.BrowserHome;
			case 173:
				return Key.VolumeMute;
			case 174:
				return Key.VolumeDown;
			case 175:
				return Key.VolumeUp;
			case 176:
				return Key.MediaNextTrack;
			case 177:
				return Key.MediaPreviousTrack;
			case 178:
				return Key.MediaStop;
			case 179:
				return Key.MediaPlayPause;
			case 180:
				return Key.LaunchMail;
			case 181:
				return Key.SelectMedia;
			case 182:
				return Key.LaunchApplication1;
			case 183:
				return Key.LaunchApplication2;
			case 188:
				return Key.Comma;
			case 190:
				return Key.Period;
			case 191:
				return Key.Slash;
			case 192:
				return Key.BackQuote;
			case 219:
				return Key.OpenBracket;
			case 220:
				return Key.BackSlash;
			case 221:
				return Key.CloseBracket;
			case 222:
				return Key.Quote;
			case 247:
				return Key.CrSel;
			case 248:
				return Key.ExSel;
			case 249:
				return Key.EraseEof;
			case 250:
				return Key.Play;
			case 251:
				return Key.Zoom;
		}

		return Key.None;
	},

	fromCharCode: function fromCharCode(charCode) {
		switch (charCode) {
			case 48:
				return Key.D0;
			case 49:
				return Key.D1;
			case 50:
				return Key.D2;
			case 51:
				return Key.D3;
			case 52:
				return Key.D4;
			case 53:
				return Key.D5;
			case 54:
				return Key.D6;
			case 55:
				return Key.D7;
			case 56:
				return Key.D8;
			case 57:
				return Key.D9;
			case 59:
				return Key.SemiColon;
			case 65:
			case 97:
				return Key.A;
			case 66:
			case 98:
				return Key.B;
			case 67:
			case 99:
				return Key.C;
			case 68:
			case 100:
				return Key.D;
			case 69:
			case 101:
				return Key.E;
			case 70:
			case 102:
				return Key.F;
			case 71:
			case 103:
				return Key.G;
			case 72:
			case 104:
				return Key.H;
			case 73:
			case 105:
				return Key.I;
			case 74:
			case 106:
				return Key.J;
			case 75:
			case 107:
				return Key.K;
			case 76:
			case 108:
				return Key.L;
			case 77:
			case 109:
				return Key.M;
			case 78:
			case 110:
				return Key.N;
			case 79:
			case 111:
				return Key.O;
			case 80:
			case 112:
				return Key.P;
			case 81:
			case 113:
				return Key.Q;
			case 82:
			case 114:
				return Key.R;
			case 83:
			case 115:
				return Key.S;
			case 84:
			case 116:
				return Key.T;
			case 85:
			case 117:
				return Key.U;
			case 86:
			case 118:
				return Key.V;
			case 87:
			case 119:
				return Key.W;
			case 88:
			case 120:
				return Key.X;
			case 89:
			case 121:
				return Key.Y;
			case 90:
			case 122:
				return Key.Z;
			case 42:
				return Key.Multiply;
			case 43:
				return Key.Add;
			case 124:
				return Key.Separator;
			case 45:
				return Key.Subtract;
			case 46:
				return Key.Period;
			case 47:
				return Key.Divide;
			case 44:
				return Key.Comma;
			case 96:
				return Key.BackQuote;
			case 91:
				return Key.OpenBracket;
			case 92:
				return Key.BackSlash;
			case 93:
				return Key.CloseBracket;
			case 39:
				return Key.Quote;
		}

		return Key.None;
	},

	toKeyCode: function toKeyCode(key) {
		switch (key) {
			case Key.Cancel:
				return 3;
			case Key.Back:
				return 8;
			case Key.Tab:
				return 9;
			case Key.Clear:
				return 12;
			case Key.Enter:
				return 13;
			case Key.LeftShift:
				return 16;
			case Key.LeftCtrl:
				return 17;
			case Key.LeftAlt:
				return 18;
			case Key.Pause:
				return 19;
			case Key.CapsLock:
				return 20;
			case Key.Escape:
				return 27;
			case Key.Space:
				return 32;
			case Key.PageUp:
				return 33;
			case Key.PageDown:
				return 34;
			case Key.End:
				return 35;
			case Key.Home:
				return 36;
			case Key.Left:
				return 37;
			case Key.Up:
				return 38;
			case Key.Right:
				return 39;
			case Key.Down:
				return 40;
			case Key.Select:
				return 41;
			case Key.Print:
				return 42;
			case Key.Execute:
				return 43;
			case Key.PrintScreen:
				return 44;
			case Key.Insert:
				return 45;
			case Key.Delete:
				return 46;
			case Key.Help:
				return 47;
			case Key.D0:
				return 48;
			case Key.D1:
				return 49;
			case Key.D2:
				return 50;
			case Key.D3:
				return 51;
			case Key.D4:
				return 52;
			case Key.D5:
				return 53;
			case Key.D6:
				return 54;
			case Key.D7:
				return 55;
			case Key.D8:
				return 56;
			case Key.D9:
				return 57;
			case Key.SemiColon:
				return 59;
			case Key.A:
				return 65;
			case Key.B:
				return 66;
			case Key.C:
				return 67;
			case Key.D:
				return 68;
			case Key.E:
				return 69;
			case Key.F:
				return 70;
			case Key.G:
				return 71;
			case Key.H:
				return 72;
			case Key.I:
				return 73;
			case Key.J:
				return 74;
			case Key.K:
				return 75;
			case Key.L:
				return 76;
			case Key.M:
				return 77;
			case Key.N:
				return 78;
			case Key.O:
				return 79;
			case Key.P:
				return 80;
			case Key.Q:
				return 81;
			case Key.R:
				return 82;
			case Key.S:
				return 83;
			case Key.T:
				return 84;
			case Key.U:
				return 85;
			case Key.V:
				return 86;
			case Key.W:
				return 87;
			case Key.X:
				return 88;
			case Key.Y:
				return 89;
			case Key.Z:
				return 90;
			case Key.LWin:
				return 91;
			case Key.RWin:
				return 92;
			case Key.Apps:
				return 93;
			case Key.Sleep:
				return 95;
			case Key.NumPad0:
				return 96;
			case Key.NumPad1:
				return 97;
			case Key.NumPad2:
				return 98;
			case Key.NumPad3:
				return 99;
			case Key.NumPad4:
				return 100;
			case Key.NumPad5:
				return 101;
			case Key.NumPad6:
				return 102;
			case Key.NumPad7:
				return 103;
			case Key.NumPad8:
				return 104;
			case Key.NumPad9:
				return 105;
			case Key.Multiply:
				return 106;
			case Key.Add:
				return 107;
			case Key.Separator:
				return 108;
			case Key.Subtract:
				return 109;
			case Key.Decimal:
				return 110;
			case Key.Divide:
				return 111;
			case Key.F1:
				return 112;
			case Key.F2:
				return 113;
			case Key.F3:
				return 114;
			case Key.F4:
				return 115;
			case Key.F5:
				return 116;
			case Key.F6:
				return 117;
			case Key.F7:
				return 118;
			case Key.F8:
				return 119;
			case Key.F9:
				return 120;
			case Key.F10:
				return 121;
			case Key.F11:
				return 122;
			case Key.F12:
				return 123;
			case Key.F13:
				return 124;
			case Key.F14:
				return 125;
			case Key.F15:
				return 126;
			case Key.F16:
				return 127;
			case Key.F17:
				return 128;
			case Key.F18:
				return 129;
			case Key.F19:
				return 130;
			case Key.F20:
				return 131;
			case Key.F21:
				return 132;
			case Key.F22:
				return 133;
			case Key.F23:
				return 134;
			case Key.F24:
				return 135;
			case Key.NumLock:
				return 144;
			case Key.Scroll:
				return 145;
			case Key.RightShift:
				return 161;
			case Key.RightCtrl:
				return 163;
			case Key.RightAlt:
				return 165;
			case Key.BrowserBack:
				return 166;
			case Key.BrowserForward:
				return 167;
			case Key.BrowserRefresh:
				return 168;
			case Key.BrowserStop:
				return 169;
			case Key.BrowserSearch:
				return 170;
			case Key.BrowserFavorites:
				return 171;
			case Key.BrowserHome:
				return 172;
			case Key.VolumeMute:
				return 173;
			case Key.VolumeDown:
				return 174;
			case Key.VolumeUp:
				return 175;
			case Key.MediaNextTrack:
				return 176;
			case Key.MediaPreviousTrack:
				return 177;
			case Key.MediaStop:
				return 178;
			case Key.MediaPlayPause:
				return 179;
			case Key.LaunchMail:
				return 180;
			case Key.SelectMedia:
				return 181;
			case Key.LaunchApplication1:
				return 182;
			case Key.LaunchApplication2:
				return 183;
			case Key.Comma:
				return 188;
			case Key.Period:
				return 190;
			case Key.Slash:
				return 191;
			case Key.BackQuote:
				return 192;
			case Key.OpenBracket:
				return 219;
			case Key.BackSlash:
				return 220;
			case Key.CloseBracket:
				return 221;
			case Key.Quote:
				return 222;
			case Key.CrSel:
				return 247;
			case Key.ExSel:
				return 248;
			case Key.EraseEof:
				return 249;
			case Key.Play:
				return 250;
			case Key.Zoom:
				return 251;
		}

		return 0;
	}
};

exports["default"] = Key;
module.exports = exports["default"];

},{}],102:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _Object$assign = require("babel-runtime/core-js/object/assign")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Event2 = require("../Event");

var _Event3 = _interopRequireDefault(_Event2);

var _Engine = require("../Engine");

var _Key = require("./Key");

var _Key2 = _interopRequireDefault(_Key);

var _ModifierKeys = require("./ModifierKeys");

var _ModifierKeys2 = _interopRequireDefault(_ModifierKeys);

var KeyEvent = (function (_Event) {
	_inherits(KeyEvent, _Event);

	function KeyEvent(type, key, isDown, isRepeat, modifierKeys, charCode, bubbles, cancelable) {
		_classCallCheck(this, KeyEvent);

		_Event.call(this, type, _Engine.ValueOrDefault(bubbles, true), _Engine.ValueOrDefault(cancelable, true));

		/** Boolean **/
		this.isDown = _Engine.ValueOrDefault(isDown, false);

		/** Boolean **/
		this.isUp = _Engine.ValueOrDefault(!isDown, false);

		/** Boolean **/
		this.isRepeat = _Engine.ValueOrDefault(isRepeat, false);

		/** Number **/
		this.keyCode = key;

		/** Number **/
		this.charCode = _Engine.ValueOrDefault(charCode, -1);

		/** Key **/
		this.key = this.keyCode != 0 ? _Key2["default"].fromKeyCode(this.keyCode) : _Key2["default"].fromCharCode(this.charCode);

		/** ModifierKeys **/
		this.modifierKeys = _Engine.ValueOrDefault(modifierKeys, _ModifierKeys2["default"].None);
	}

	KeyEvent.prototype.getIsDown = function getIsDown() {
		return this.isDown;
	};

	KeyEvent.prototype.getIsUp = function getIsUp() {
		return this.isUp;
	};

	KeyEvent.prototype.getIsRepeat = function getIsRepeat() {
		return this.isRepeat;
	};

	KeyEvent.prototype.getKeyCode = function getKeyCode() {
		return this.keyCode;
	};

	KeyEvent.prototype.getCharCode = function getCharCode() {
		return this.charCode;
	};

	KeyEvent.prototype.getKey = function getKey() {
		return this.key;
	};

	KeyEvent.prototype.getModifierKeys = function getModifierKeys() {
		return this.modifierKeys;
	};

	KeyEvent.prototype.getIsAltKeyDown = function getIsAltKeyDown() {
		return this.readModifierFlag(_ModifierKeys2["default"].Alt);
	};

	KeyEvent.prototype.getIsControlKeyDown = function getIsControlKeyDown() {
		return this.readModifierFlag(_ModifierKeys2["default"].Control);
	};

	KeyEvent.prototype.getIsShiftKeyDown = function getIsShiftKeyDown() {
		return this.readModifierFlag(_ModifierKeys2["default"].Shift);
	};

	KeyEvent.prototype.getIsMetaKeyDown = function getIsMetaKeyDown() {
		return this.readModifierFlag(_ModifierKeys2["default"].Meta);
	};

	KeyEvent.prototype.readModifierFlag = function readModifierFlag(flag) {
		return (this.modifierKeys & flag) == flag;
	};

	KeyEvent.prototype.toString = function toString() {
		var keyStr = "None";

		for (var s in _Key2["default"]) {
			if (_Key2["default"][s] == this.key) {
				keyStr = s;
				break;
			}
		}

		return String.format("KeyEvent[ keyCode=#{0}, charCode=#{1}, key=#{2}, altKeyDown=#{3}, ctrlKeyDown=#{4}, shiftKeyDown=#{5}, metaKeyDown=#{6}, isDown=#{7}, isRepeat=#{8}", this.keyCode, this.charCode, keyStr, this.getIsAltKeyDown(), this.getIsControlKeyDown(), this.getIsShiftKeyDown(), this.getIsMetaKeyDown(), this.getIsDown(), this.getIsRepeat());
	};

	return KeyEvent;
})(_Event3["default"]);

_Object$assign(KeyEvent, {
	KEY_DOWN: "keyDown",
	KEY_UP: "keyUp",
	KEY_PRESS: "keyPress"
});

exports["default"] = KeyEvent;
module.exports = exports["default"];

},{"../Engine":44,"../Event":47,"./Key":101,"./ModifierKeys":103,"babel-runtime/core-js/object/assign":1,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],103:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var ModifierKeys = {
	"None": 0,
	"Alt": 1,
	"Control": 2,
	"Shift": 4,
	"Meta": 8,

	fromValues: function fromValues(alt, ctrl, shift, meta) {
		var bits = ModifierKeys.None;

		if (alt) {
			bits |= ModifierKeys.Alt;
		}

		if (ctrl) {
			bits |= ModifierKeys.Control;
		}

		if (shift) {
			bits |= ModifierKeys.Shift;
		}

		if (meta) {
			bits |= ModifierKeys.Meta;
		}

		return bits;
	}
};

exports["default"] = ModifierKeys;
module.exports = exports["default"];

},{}],104:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var MouseButton = {
	"Unknown": 0,
	"Left": 1,
	"Right": 2,
	"Middle": 3,
	"XButton1": 4,
	"XButton2": 5
};

exports["default"] = MouseButton;
module.exports = exports["default"];

},{}],105:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _MouseEvent2 = require("./MouseEvent");

var _MouseEvent3 = _interopRequireDefault(_MouseEvent2);

var _Engine = require("../Engine");

var MouseButtonEvent = (function (_MouseEvent) {
	_inherits(MouseButtonEvent, _MouseEvent);

	function MouseButtonEvent(type, button, pressed, x, y, clickCount, modifiers, bubbles, cancelable) {
		_classCallCheck(this, MouseButtonEvent);

		_MouseEvent.call(this, type, x, y, button, modifiers, bubbles, cancelable);

		this.mouseButton = button;
		this.isDown = pressed;
		this.clickCount = _Engine.ValueOrDefault(clickCount, 1);
	}

	return MouseButtonEvent;
})(_MouseEvent3["default"]);

exports["default"] = MouseButtonEvent;
module.exports = exports["default"];

},{"../Engine":44,"./MouseEvent":106,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],106:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _Object$assign = require("babel-runtime/core-js/object/assign")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Event2 = require("../Event");

var _Event3 = _interopRequireDefault(_Event2);

var _Engine = require("../Engine");

var _MouseButton = require("./MouseButton");

var _MouseButton2 = _interopRequireDefault(_MouseButton);

var _Vector2D = require("../Vector2D");

var _Vector2D2 = _interopRequireDefault(_Vector2D);

var _ModifierKeys = require("./ModifierKeys");

var _ModifierKeys2 = _interopRequireDefault(_ModifierKeys);

var MouseEvent = (function (_Event) {
	_inherits(MouseEvent, _Event);

	function MouseEvent(type, x, y, button, modifiers, bubbles, cancelable) {
		_classCallCheck(this, MouseEvent);

		_Event.call(this, type, _Engine.ValueOrDefault(bubbles, true), _Engine.ValueOrDefault(cancelable, false));

		this.modifiers = modifiers;
		this.isLeftButtonDown = button == _MouseButton2["default"].Left;
		this.isMiddleButtonDown = button == _MouseButton2["default"].Middle;
		this.isRightButtonDown = button == _MouseButton2["default"].Right;
		this.isXButton1Down = button == _MouseButton2["default"].XButton1;
		this.isXButton2Down = button == _MouseButton2["default"].XButton2;
		this.x = x;
		this.y = y;
		this.lastTarget = null;

		this.pos = new _Vector2D2["default"](this.x, this.y);
		this.localX = 0;
		this.localY = 0;
	}

	MouseEvent.prototype.getModifierFlags = function getModifierFlags() {
		return this.modifiers;
	};

	MouseEvent.prototype.getModifierState = function getModifierState(mkey) {
		return (this.modifiers & mkey) != _ModifierKeys2["default"].None;
	};

	MouseEvent.prototype.getIsAltDown = function getIsAltDown() {
		return this.getModifierState(_ModifierKeys2["default"].Alt);
	};

	MouseEvent.prototype.getIsCtrlDown = function getIsCtrlDown() {
		return this.getModifierState(_ModifierKeys2["default"].Control);
	};

	MouseEvent.prototype.getIsShiftDown = function getIsShiftDown() {
		return this.getModifierState(_ModifierKeys2["default"].Shift);
	};

	MouseEvent.prototype.getIsMetaDown = function getIsMetaDown() {
		return this.getModifierState(_ModifierKeys2["default"].Meta);
	};

	MouseEvent.prototype.getIsLeftButtonDown = function getIsLeftButtonDown() {
		return this.isLeftButtonDown;
	};

	MouseEvent.prototype.getIsRightButtonDown = function getIsRightButtonDown() {
		return this.isRightButtonDown;
	};

	MouseEvent.prototype.getIsMiddleButtonDown = function getIsMiddleButtonDown() {
		return this.isMiddleButtonDown;
	};

	MouseEvent.prototype.getIsXButton1Down = function getIsXButton1Down() {
		return this.isXButton1Down;
	};

	MouseEvent.prototype.getIsXButton2Down = function getIsXButton2Down() {
		return this.isXButton2Down;
	};

	MouseEvent.prototype.getX = function getX() {
		return this.x;
	};

	MouseEvent.prototype.getY = function getY() {
		return this.y;
	};

	MouseEvent.prototype.getLocalX = function getLocalX() {
		if (!this.recomputeLocalPosition()) {
			return this.x;
		}

		return this.localX;
	};

	MouseEvent.prototype.getLocalY = function getLocalY() {
		if (!this.recomputeLocalPosition()) {
			return this.y;
		}

		return this.localY;
	};

	MouseEvent.prototype.recomputeLocalPosition = function recomputeLocalPosition(target) {
		target = this.currentTarget || this.target;

		if (target == null) {
			this.lastTarget = null;
			return false;
		}

		if (target != this.lastTarget) {
			this.lastTarget = target;

			if (this.lastTarget.pointToLocal) {
				var pt = this.lastTarget.pointToLocal(this.pos);

				this.localX = pt.x;
				this.localY = pt.y;
			}
		}

		return true;
	};

	return MouseEvent;
})(_Event3["default"]);

_Object$assign(MouseEvent, {
	MOUSE_DOWN: "mouseDown",
	MOUSE_UP: "mouseUp",
	MOUSE_UP_OUTSIDE: "mouseUpOutside",
	MOUSE_ENTER: "mouseEnter",
	MOUSE_LEAVE: "mouseLeave",
	MOUSE_MOVE: "mouseMove",
	MOUSE_WHEEL: "mouseWheel",
	CLICK: "click",
	DOUBLE_CLICK: "doubleClick"
});

exports["default"] = MouseEvent;
module.exports = exports["default"];

},{"../Engine":44,"../Event":47,"../Vector2D":67,"./ModifierKeys":103,"./MouseButton":104,"babel-runtime/core-js/object/assign":1,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],107:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var MouseWheelDirection = {
	"Up": 0,
	"Down": 1
};

exports["default"] = MouseWheelDirection;
module.exports = exports["default"];

},{}],108:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _MouseEvent2 = require("./MouseEvent");

var _MouseEvent3 = _interopRequireDefault(_MouseEvent2);

var _MouseButton = require("./MouseButton");

var _MouseButton2 = _interopRequireDefault(_MouseButton);

var _MouseWheelDirection = require("./MouseWheelDirection");

var _MouseWheelDirection2 = _interopRequireDefault(_MouseWheelDirection);

var MouseWheelEvent = (function (_MouseEvent) {
	_inherits(MouseWheelEvent, _MouseEvent);

	function MouseWheelEvent(type, delta, x, y, modifiers, bubbles, cancelable) {
		_classCallCheck(this, MouseWheelEvent);

		_MouseEvent.call(this, type, x, y, _MouseButton2["default"].Middle, modifiers, bubbles, cancelable);

		this.delta = delta;
		this.direction = delta > 0 ? _MouseWheelDirection2["default"].Down : _MouseWheelDirection2["default"].Up;
	}

	return MouseWheelEvent;
})(_MouseEvent3["default"]);

exports["default"] = MouseWheelEvent;
module.exports = exports["default"];

},{"./MouseButton":104,"./MouseEvent":106,"./MouseWheelDirection":107,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],109:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var NavigationDirection = {
	Left: 1 << 0,
	Right: 1 << 1,
	Up: 1 << 2,
	Down: 1 << 3
};

exports["default"] = NavigationDirection;
module.exports = exports["default"];

},{}],110:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Event2 = require("../Event");

var _Event3 = _interopRequireDefault(_Event2);

var _Engine = require("../Engine");

var NavigationEvent = (function (_Event) {
	_inherits(NavigationEvent, _Event);

	function NavigationEvent(type, direction, targetFrom, targetTo, bubbles, cancelable) {
		_classCallCheck(this, NavigationEvent);

		_Event.call(this, type, bubbles, cancelable);

		this.direction = direction;
		this.targetFrom = _Engine.ValueOrDefault(targetFrom, null);
		this.targetTo = _Engine.ValueOrDefault(targetTo, null);
	}

	NavigationEvent.prototype.getDirection = function getDirection() {
		return this.direction;
	};

	NavigationEvent.prototype.getTargetFrom = function getTargetFrom() {
		return this.targetFrom;
	};

	NavigationEvent.prototype.getTargetTo = function getTargetTo() {
		return this.targetTo;
	};

	return NavigationEvent;
})(_Event3["default"]);

NavigationEvent.ENTER = "navigationEnter";
NavigationEvent.LEAVE = "navigationLeave";

exports["default"] = NavigationEvent;
module.exports = exports["default"];

},{"../Engine":44,"../Event":47,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],111:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var NavigationMode = {
	Normal: 0,
	Constrain: 1,
	Wrap: 2
};

exports["default"] = NavigationMode;
module.exports = exports["default"];

},{}],112:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _Object$assign = require("babel-runtime/core-js/object/assign")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Event2 = require("../Event");

var _Event3 = _interopRequireDefault(_Event2);

var _Engine = require("../Engine");

var TouchEvent = (function (_Event) {
	_inherits(TouchEvent, _Event);

	function TouchEvent(type, touchPoints, scale, rotation, bubbles, cancelable) {
		_classCallCheck(this, TouchEvent);

		_Event.call(this, type, _Engine.ValueOrDefault(bubbles, true), _Engine.ValueOrDefault(cancelable, true));

		this.points = touchPoints;
		this.scale = scale;
		this.rotation = rotation;
	}

	TouchEvent.prototype.getScale = function getScale() {
		return this.scale;
	};

	TouchEvent.prototype.getRotation = function getRotation() {
		return this.rotation;
	};

	TouchEvent.prototype.getAllTouches = function getAllTouches() {
		return this.points;
	};

	return TouchEvent;
})(_Event3["default"]);

_Object$assign(TouchEvent, {
	TOUCH_START: "touchStart",
	TOUCH_END: "touchEnd",
	TOUCH_MOVE: "touchMove",
	TOUCH_CANCEL: "touchCancel"
});

exports["default"] = TouchEvent;
module.exports = exports["default"];

},{"../Engine":44,"../Event":47,"babel-runtime/core-js/object/assign":1,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],113:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Equatable2 = require("../Equatable");

var _Equatable3 = _interopRequireDefault(_Equatable2);

var TouchPoint = (function (_Equatable) {
	_inherits(TouchPoint, _Equatable);

	function TouchPoint(id, sceneX, sceneY) {
		_classCallCheck(this, TouchPoint);

		_Equatable.call(this);

		this.id = id;
		this.sceneX = sceneX;
		this.sceneY = sceneY;
	}

	TouchPoint.prototype.getId = function getId() {
		return this.id;
	};

	TouchPoint.prototype.getSceneX = function getSceneX() {
		return this.sceneX;
	};

	TouchPoint.prototype.getSceneY = function getSceneY() {
		return this.sceneY;
	};

	TouchPoint.prototype.isEqualTo = function isEqualTo(other) {
		return _Equatable.prototype.isEqualTo.call(this, other) && this.id == other.id && this.sceneX == other.sceneX && this.sceneY == other.sceneY;
	};

	return TouchPoint;
})(_Equatable3["default"]);

exports["default"] = TouchPoint;
module.exports = exports["default"];

},{"../Equatable":46,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],114:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var VideoEvent = (function (_Event) {
	_inherits(VideoEvent, _Event);

	function VideoEvent(type, bubbles, cancelable) {
		_classCallCheck(this, VideoEvent);

		_Event.call(this, type, bubbles, cancelable);
	}

	return VideoEvent;
})(Event);

VideoEvent.FRAME_CHANGE = "videoFrameChange";

},{"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9}],115:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _uiImageSource = require("../ui/ImageSource");

var _uiImageSource2 = _interopRequireDefault(_uiImageSource);

var _Size = require("../Size");

var _Size2 = _interopRequireDefault(_Size);

var VideoSource = (function (_ImageSource) {
	_inherits(VideoSource, _ImageSource);

	function VideoSource(videoElement) {
		_classCallCheck(this, VideoSource);

		_ImageSource.call(this);

		this.videoElement = null;

		this.reset();
		this.setVideoElement(videoElement);
	}

	VideoSource.prototype.getVideoElement = function getVideoElement() {
		return this.videoElement;
	};

	VideoSource.prototype.setVideoElement = function setVideoElement(value) {
		if (this.videoElement != value) {
			this.reset();
			this.videoElement = value;
			this.load();
		}
	};

	VideoSource.prototype.reset = function reset() {
		this.data = null;
		this.size = _Size2["default"].Zero();
		this.isSourceReady = false;
		this.videoElement = null;
	};

	VideoSource.prototype.load = function load() {
		if (this.isSourceReady) {
			this.raiseSourceReadyEvent();
			return;
		}

		var duration = this.videoElement.duration;

		if (isNaN(duration) || duration == 0) {
			this.videoElement.addEventListener("durationchange", this.handleDurationChangeEvent.bind(this), false);
		} else {
			this.update();
		}
	};

	VideoSource.prototype.update = function update() {
		this.data = this.videoElement;
		this.size.width = this.videoElement.videoWidth;
		this.size.height = this.videoElement.videoHeight;
		this.isSourceReady = true;

		this.raiseSourceReadyEvent();
	};

	VideoSource.prototype.handleDurationChangeEvent = function handleDurationChangeEvent(e) {
		this.update();
	};

	return VideoSource;
})(_uiImageSource2["default"]);

exports["default"] = VideoSource;
module.exports = exports["default"];

},{"../Size":60,"../ui/ImageSource":149,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],116:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var CollisionCategory = {
	Ground: 1 << 0,
	A: 1 << 1,
	B: 1 << 2,
	C: 1 << 3,
	D: 1 << 4,
	E: 1 << 5,
	F: 1 << 6,
	G: 1 << 7,
	H: 1 << 8,
	I: 1 << 9,
	J: 1 << 10,
	K: 1 << 11,
	L: 1 << 12,
	M: 1 << 13,
	N: 1 << 14,
	O: 1 << 15
};

exports["default"] = CollisionCategory;
module.exports = exports["default"];

},{}],117:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Event2 = require("../Event");

var _Event3 = _interopRequireDefault(_Event2);

var _Engine = require("../Engine");

var CollisionEvent = (function (_Event) {
	_inherits(CollisionEvent, _Event);

	function CollisionEvent(type, controller, contactSource, contactTarget, contactNormal, contactPoints, linearVelocityA, linearVelocityB, touching, continuous, sensor, enabled, bubbles, cancelable) {
		_classCallCheck(this, CollisionEvent);

		_Event.call(this, type, bubbles, cancelable);

		this.controller = controller;
		this.contactSource = contactSource;
		this.contactTarget = contactTarget;
		this.contactNormal = contactNormal;
		this.contactPoints = contactPoints;
		this.linearVelocityA = linearVelocityA;
		this.linearVelocityB = linearVelocityB;
		this.isTouching = touching;
		this.isContinuous = continuous;
		this.isSensor = sensor;
		this.isEnabled = enabled;
	}

	CollisionEvent.prototype.getController = function getController() {
		return this.controller;
	};

	CollisionEvent.prototype.getContactNormal = function getContactNormal() {
		return this.contactNormal;
	};

	CollisionEvent.prototype.getContactPoints = function getContactPoints(asUnits) {
		asUnits = _Engine.ValueOrDefault(asUnits, false);

		if (asUnits) {
			return this.contactPoints;
		}

		var points = [];
		var p = null;
		var len = this.contactPoints.length;

		for (var i = 0; i < len; ++i) {
			p = this.contactPoints[i];
			points.push(this.controller.convertPoint(p, true, false));
		}

		return points;
	};

	CollisionEvent.prototype.getContactSource = function getContactSource() {
		return this.contactSource;
	};

	CollisionEvent.prototype.getContactTarget = function getContactTarget() {
		return this.contactTarget;
	};

	CollisionEvent.prototype.getLinearVelocityA = function getLinearVelocityA() {
		return this.linearVelocityA;
	};

	CollisionEvent.prototype.getLinearVelocityB = function getLinearVelocityB() {
		return this.linearVelocityB;
	};

	CollisionEvent.prototype.getApproachVelocity = function getApproachVelocity() {

		// NOTE: for some reason, we need to reverse the subtract, instead of
		//       b - a, otherwise it would return a negative velocity, but we
		//       want a positive velocity when approaching and negative when
		//       leaving...
		var delta = this.linearVelocityA.subtract(this.linearVelocityB);

		return delta.dotProduct(this.contactNormal);
	};

	CollisionEvent.prototype.getIsTouching = function getIsTouching() {
		return this.isTouching;
	};

	CollisionEvent.prototype.getIsContinuous = function getIsContinuous() {
		return this.isContinuous;
	};

	CollisionEvent.prototype.getIsSensor = function getIsSensor() {
		return this.isSensor;
	};

	CollisionEvent.prototype.getIsEnabled = function getIsEnabled() {
		return this.isEnabled;
	};

	return CollisionEvent;
})(_Event3["default"]);

CollisionEvent.START = "collisionStart";
CollisionEvent.FINISH = "collisionFinish";

exports["default"] = CollisionEvent;
module.exports = exports["default"];

},{"../Engine":44,"../Event":47,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],118:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var ContactPointState = {
	Null: 0,
	Persist: 1,
	Add: 2,
	Remove: 3
};

exports["default"] = ContactPointState;
module.exports = exports["default"];

},{}],119:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var Direction = {
	None: (1 << 0) - 1,
	North: 1 << 0,
	South: 1 << 1,
	East: 1 << 2,
	West: 1 << 3,
	NorthSouth: 3,
	EastWest: 12,
	All: 15,
	Variable: 99
};

exports["default"] = Direction;
module.exports = exports["default"];

},{}],120:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _EntityBase2 = require("./EntityBase");

var _EntityBase3 = _interopRequireDefault(_EntityBase2);

var _Vector2D = require("../Vector2D");

var _Vector2D2 = _interopRequireDefault(_Vector2D);

var _Direction = require("./Direction");

var _Direction2 = _interopRequireDefault(_Direction);

var _EntityType = require("./EntityType");

var _EntityType2 = _interopRequireDefault(_EntityType);

var _EngineMath = require("../EngineMath");

var _EngineMath2 = _interopRequireDefault(_EngineMath);

var _Engine = require("../Engine");

var _Rectangle = require("../Rectangle");

var _Rectangle2 = _interopRequireDefault(_Rectangle);

var _EntityFixture = require("./EntityFixture");

var _EntityFixture2 = _interopRequireDefault(_EntityFixture);

var _EntityJoinType = require("./EntityJoinType");

var _EntityJoinType2 = _interopRequireDefault(_EntityJoinType);

var _box2dweb = require("box2dweb");

var _box2dweb2 = _interopRequireDefault(_box2dweb);

var PXVector2D = _box2dweb2["default"].Common.Math.b2Vec2;
var PXDistanceJointDef = _box2dweb2["default"].Dynamics.Joints.b2DistanceJointDef;
var PXCircleShape = _box2dweb2["default"].Collision.Shapes.b2CircleShape;
var PXPolygonShape = _box2dweb2["default"].Collision.Shapes.b2PolygonShape;
var PXMassData = _box2dweb2["default"].Collision.Shapes.b2MassData;
var PXBodyDef = _box2dweb2["default"].Dynamics.b2BodyDef;
var PXFixtureDef = _box2dweb2["default"].Dynamics.b2FixtureDef;
var PXFrictionJointDef = _box2dweb2["default"].Dynamics.Joints.b2FrictionJointDef;
var PXGearJointDef = _box2dweb2["default"].Dynamics.Joints.b2GearJointDef;
var PXJoint = _box2dweb2["default"].Dynamics.Joints.b2Joint;
var PXLineJointDef = _box2dweb2["default"].Dynamics.Joints.b2LineJointDef;
var PXPrismaticJointDef = _box2dweb2["default"].Dynamics.Joints.b2PrismaticJointDef;
var PXPulleyJointDef = _box2dweb2["default"].Dynamics.Joints.b2PulleyJointDef;
var PXRevoluteJointDef = _box2dweb2["default"].Dynamics.Joints.b2RevoluteJointDef;
var PXWeldJointDef = _box2dweb2["default"].Dynamics.Joints.b2WeldJointDef;

var Entity = (function (_EntityBase) {
	_inherits(Entity, _EntityBase);

	function Entity(type, name, descriptor, controller) {
		_classCallCheck(this, Entity);

		_EntityBase.call(this, name, controller);

		this.type = type;
		this.gravityScale = 0;
		this.moveSpeeds = [4, 4, 4, 4];
		this.currentMoveSpeed = _Vector2D2["default"].Zero();
		this.currentMovement = _Direction2["default"].None;
		this.isMoving = false;
		this.preSolveCallback = null;
		this.postSolveCallback = null;
		this.body = this.createBody(descriptor);
		this.body.SetUserData(this);
	}

	Entity.prototype.setPreSolveCallback = function setPreSolveCallback(value) {
		this.preSolveCallback = value;
	};

	Entity.prototype.setPostSolveCallback = function setPostSolveCallback(value) {
		this.postSolveCallback = value;
	};

	Entity.prototype.getType = function getType() {
		return this.type;
	};

	Entity.prototype.getBody = function getBody() {
		return this.body;
	};

	Entity.prototype.getIsGround = function getIsGround() {
		return this.type == _EntityType2["default"].Ground;
	};

	Entity.prototype.getIsBullet = function getIsBullet() {
		return this.body.IsBullet();
	};

	Entity.prototype.setIsBullet = function setIsBullet(value) {
		this.body.SetBullet(value);
	};

	Entity.prototype.getIsAwake = function getIsAwake() {
		return this.body.IsAwake();
	};

	Entity.prototype.setIsAwake = function setIsAwake(value) {
		this.body.SetAwake(value);
	};

	Entity.prototype.getIsActive = function getIsActive() {
		return this.body.IsActive();
	};

	Entity.prototype.setIsActive = function setIsActive(value) {
		this.body.SetActive(value);
	};

	Entity.prototype.getCanSleep = function getCanSleep() {
		return this.body.IsSleepingAllowed();
	};

	Entity.prototype.setCanSleep = function setCanSleep(value) {
		this.body.SetSleepingAllowed(value);
	};

	Entity.prototype.getGravityScale = function getGravityScale() {
		return this.gravityScale;
	};

	Entity.prototype.setGravityScale = function setGravityScale(value) {
		this.gravityScale = value;
	};

	Entity.prototype.getEnableRotation = function getEnableRotation() {
		return !this.body.IsFixedRotation();
	};

	Entity.prototype.setEnableRotation = function setEnableRotation(value) {
		this.body.SetFixedRotation(!value);
	};

	Entity.prototype.getLocalCenterImpl = function getLocalCenterImpl(asUnits) {
		var center = this.body.GetLocalCenter();

		return this.convertPoint(center, true, asUnits);
	};

	Entity.prototype.getGlobalCenterImpl = function getGlobalCenterImpl(asUnits) {
		var center = this.body.GetWorldCenter();

		return this.convertPoint(center, true, asUnits);
	};

	Entity.prototype.getPositionImpl = function getPositionImpl(asUnits) {
		var pos = this.body.GetPosition();

		return this.convertPoint(pos, true, asUnits);
	};

	Entity.prototype.setPositionImpl = function setPositionImpl(value, isUnits) {
		var pos = this.body.GetPosition();

		if (isUnits) {
			pos.x = value.x;
			pos.y = value.y;
		} else {
			var arr = this.toUnits([value.x, value.y]);

			pos.x = arr[0];
			pos.y = arr[1];
		}

		this.body.SetPosition(pos);
	};

	Entity.prototype.getAngleImpl = function getAngleImpl(asRadians) {
		var angle = this.body.GetAngle();

		if (asRadians) {
			return angle;
		}

		return _EngineMath2["default"].radiansToDegrees(angle);
	};

	Entity.prototype.setAngleImpl = function setAngleImpl(value, isRadians) {
		if (!isRadians) {
			value = _EngineMath2["default"].degreesToRadians(value);
		}

		this.body.SetAngle(value);
	};

	Entity.prototype.getLinearVelocity = function getLinearVelocity() {
		var v = this.body.GetLinearVelocity();

		return new _Vector2D2["default"](v.x, v.y);
	};

	Entity.prototype.setLinearVelocity = function setLinearVelocity(value) {
		this.body.SetLinearVelocity(new PXVector2D(value.x, value.y));
	};

	Entity.prototype.getAngularVelocity = function getAngularVelocity() {
		return this.body.GetAngularVelocity();
	};

	Entity.prototype.setAngularVelocity = function setAngularVelocity(value) {
		this.body.SetAngularVelocity(value);
	};

	Entity.prototype.getMass = function getMass() {
		return this.body.GetMass();
	};

	Entity.prototype.getInertia = function getInertia() {
		return this.body.GetInertia();
	};

	Entity.prototype.getLinearDamping = function getLinearDamping() {
		return this.body.GetLinearDamping();
	};

	Entity.prototype.setLinearDamping = function setLinearDamping(value) {
		this.body.SetLinearDamping(value);
	};

	Entity.prototype.getAngularDamping = function getAngularDamping() {
		return this.body.GetAngularDamping();
	};

	Entity.prototype.setAngularDamping = function setAngularDamping(value) {
		this.body.SetAngularDamping(value);
	};

	Entity.prototype.getWorld = function getWorld() {
		return this.controller.getWorld();
	};

	Entity.prototype.getNext = function getNext() {
		var nextBody = this.body.GetNext();

		// return the entity
		if (nextBody != null) {
			return nextBody.GetUserData();
		}

		return null;
	};

	Entity.prototype.getBoundsImpl = function getBoundsImpl(asUnits, asAABB) {
		if (asAABB) {
			var bounds = _Rectangle2["default"].Zero();

			for (var fixture = this.body.GetFixtureList(); fixture; fixture = fixture.GetNext()) {
				bounds.unionWithRect(fixture.GetUserData().getBounds(asUnits, asAABB));
			}

			return bounds;
		}
	};

	Entity.prototype.getMassData = function getMassData() {
		var data = new PXMassData();

		this.body.GetMassData(data);

		return data;
	};

	Entity.prototype.setMassData = function setMassData(value) {
		this.body.SetMassData(value);
	};

	Entity.prototype.resetMassData = function resetMassData() {
		this.body.ResetMassData();
	};

	Entity.prototype.getMoveSpeed = function getMoveSpeed(direction) {
		if (direction == _Direction2["default"].EastWest || direction == _Direction2["default"].All) {
			return this.moveSpeeds[this.getMoveSpeedIndex(_Direction2["default"].East)];
		} else if (direction == _Direction2["default"].NorthSouth) {
			return this.moveSpeeds[this.getMoveSpeedIndex(_Direction2["default"].North)];
		} else {
			return this.moveSpeeds[this.getMoveSpeedIndex(direction)];
		}
	};

	Entity.prototype.setMoveSpeed = function setMoveSpeed(direction, speed) {
		if (direction == _Direction2["default"].EastWest) {
			this.moveSpeeds[this.getMoveSpeedIndex(_Direction2["default"].East)] = speed;
			this.moveSpeeds[this.getMoveSpeedIndex(_Direction2["default"].West)] = speed;
		} else if (direction == _Direction2["default"].NorthSouth) {
			this.moveSpeeds[this.getMoveSpeedIndex(_Direction2["default"].North)] = speed;
			this.moveSpeeds[this.getMoveSpeedIndex(_Direction2["default"].South)] = speed;
		} else if (direction == _Direction2["default"].All) {
			this.moveSpeeds[this.getMoveSpeedIndex(_Direction2["default"].East)] = speed;
			this.moveSpeeds[this.getMoveSpeedIndex(_Direction2["default"].West)] = speed;
			this.moveSpeeds[this.getMoveSpeedIndex(_Direction2["default"].North)] = speed;
			this.moveSpeeds[this.getMoveSpeedIndex(_Direction2["default"].South)] = speed;
		} else {
			this.moveSpeeds[this.getMoveSpeedIndex(direction)] = speed;
		}
	};

	Entity.prototype.destroy = function destroy() {
		var isDestroyed = this.isDestroyed;

		_EntityBase.prototype.destroy.call(this);

		if (!isDestroyed) {
			// just remove any entity fixtures, the internal fixture will be destroyed when
			// the body is destroyed
			for (var fixture = this.body.GetFixtureList(); fixture; fixture = fixture.GetNext()) {
				this.controller.removeEntity(fixture.GetUserData(), true);
			}
		}
	};

	Entity.prototype.applyForce = function applyForce(fx, fy) {
		this.applyForceAtImpl(fx, fy, this.body.GetWorldCenter());
	};

	Entity.prototype.applyForceAt = function applyForceAt(fx, fy, x, y, isUnits) {
		var units = _Engine.ValueOrDefault(isUnits, false) ? [x, y] : this.toUnits([x, y]);

		this.applyForceAtImpl(fx, fy, new PXVector2D(units[0], units[1]));
	};

	Entity.prototype.applyForceAtImpl = function applyForceAtImpl(fx, fy, point) {
		this.body.ApplyForce(new PXVector2D(fx, fy), point);
	};

	Entity.prototype.applyImpulse = function applyImpulse(ix, iy) {
		this.applyImpulseAtImpl(ix, iy, this.body.GetWorldCenter());
	};

	Entity.prototype.applyImpulseAt = function applyImpulseAt(ix, iy, x, y, isUnits) {
		var units = _Engine.ValueOrDefault(isUnits, false) ? [x, y] : this.toUnits([x, y]);

		this.applyImpulseAtImpl(ix, iy, new PXVector2D(units[0], units[1]));
	};

	Entity.prototype.applyImpulseAtImpl = function applyImpulseAtImpl(ix, iy, point) {
		this.body.ApplyImpulse(new PXVector2D(ix, iy), point);
	};

	Entity.prototype.applyTorque = function applyTorque(torque) {
		this.body.ApplyTorque(torque);
	};

	Entity.prototype.stop = function stop() {
		this.currentMovement = _Direction2["default"].None;
		this.currentMoveSpeed.x = 0;
		this.currentMoveSpeed.y = 0;
	};

	/*
  * - move(direction)
  * - move(xSpeed, ySpeed)
  */

	Entity.prototype.move = function move() {
		if (arguments.length == 1) {
			this.currentMovement = arguments[0];
			this.currentMoveSpeed.x = 0;
			this.currentMoveSpeed.y = 0;
		} else if (arguments.length == 2) {
			this.currentMovement = _Direction2["default"].Variable;
			this.currentMoveSpeed.x = arguments[0];
			this.currentMoveSpeed.y = arguments[1];
		}

		this.isMoving = true;
	};

	Entity.prototype.moveNow = function moveNow(rx, ry) {
		var body = this.body;
		var pos = body.GetPosition();
		var mass = body.GetMass();
		var vel = body.GetLinearVelocity();

		this.applyImpulseAt(rx == 0 ? 0 : mass * (rx - vel.x), ry == 0 ? 0 : mass * (ry - vel.y), pos.x, pos.y, true);
	};

	Entity.prototype.wakeup = function wakeup() {
		this.setIsAwake(true);
	};

	Entity.prototype.sleep = function sleep() {
		this.setIsAwake(false);
	};

	Entity.prototype.reset = function reset() {
		this.resetDrawable(this.body.GetPosition(), new PXVector2D(0, 0), this.body.GetAngle());
	};

	Entity.prototype.update = function update(ratio) {
		var body = this.body;
		var vel = body.GetLinearVelocity();

		// apply gravity scaling
		if (this.gravityScale != 0) {
			var gravity = this.controller.getWorld().GetGravity();
			var m = body.GetMass();

			this.applyForce(gravity.x * m * this.gravityScale, gravity.y * m * this.gravityScale);
		}

		// apply movements
		if (this.currentMovement != _Direction2["default"].None || this.isMoving && this.type == _EntityType2["default"].Kinematic && (vel.x != 0 || vel.y != 0)) {
			var mass = body.GetMass();
			var pos = body.GetPosition();
			var sx = 0;
			var sy = 0;
			var vx = 0;
			var vy = 0;

			if (this.currentMovement == _Direction2["default"].Variable) {
				var hDir = this.currentMoveSpeed.x > 0 ? _Direction2["default"].East : _Direction2["default"].West;
				var vDir = this.currentMoveSpeed.y > 0 ? _Direction2["default"].South : _Direction2["default"].North;

				sx = this.getMoveSpeed(hDir) * this.currentMoveSpeed.x;
				sy = this.getMoveSpeed(vDir) * this.currentMoveSpeed.y;
			} else {
				// move north
				if ((this.currentMovement & _Direction2["default"].North) != _Direction2["default"].None) {
					sy += -this.getMoveSpeed(_Direction2["default"].North);
				}

				// move south
				if ((this.currentMovement & _Direction2["default"].South) != _Direction2["default"].None) {
					sy += this.getMoveSpeed(_Direction2["default"].South);
				}

				// move east
				if ((this.currentMovement & _Direction2["default"].East) != _Direction2["default"].None) {
					sx += this.getMoveSpeed(_Direction2["default"].East);
				}

				// move west
				if ((this.currentMovement & _Direction2["default"].West) != _Direction2["default"].None) {
					sx += -this.getMoveSpeed(_Direction2["default"].West);
				}
			}

			this.wakeup();

			if (this.type == _EntityType2["default"].Kinematic) {
				sx = sx != 0 ? sx : 0;
				sy = sy != 0 ? sy : 0;

				this.isMoving = this.isMoving && sx != 0 && sy != 0;
				this.setLinearVelocity(new _Vector2D2["default"](sx, sy));
			} else {
				sx = sx != 0 ? mass * (sx - vel.x) : 0;
				sy = sy != 0 ? mass * (sy - vel.y) : 0;

				this.applyImpulseAt(sx, sy, pos.x, pos.y, true);
			}
		}

		// update drawable
		this.updateDrawable(ratio, this.body.GetPosition(), new PXVector2D(0, 0), this.body.GetAngle());
	};

	Entity.prototype.createPoly = function createPoly(name, vertices, density, friction, restitution, isSensor) {
		var def = this.createFixtureDef(density, friction, restitution, isSensor);
		var len = vertices.length;
		var v = null;

		for (var i = 0; i < len; ++i) {
			v = this.toUnits([vertices[i].x, vertices[i].y]);
			vertices[i] = new PXVector2D(v[0], v[1]);
		}

		def.shape = new PXPolygonShape();
		def.shape.SetAsVector(vertices, vertices.length);

		return new _EntityFixture2["default"](name, this.body.CreateFixture(def), this.controller);
	};

	Entity.prototype.createBorder = function createBorder(name, width, height, size, density, friction, restitution, isSensor) {
		return createBorderAt(name, 0, 0, width, height, size, density, friction, restitution, isSensor);
	};

	Entity.prototype.createBorderAt = function createBorderAt(name, x, y, width, height, size, density, friction, restitution, isSensor) {
		var hw = width * 0.5;
		var hh = height * 0.5;
		var hs = size * 0.5;
		var top = this.createBoxAt(name + "-t", x + hw, y + hs, width, size, density, friction, restitution, isSensor);
		var bottom = this.createBoxAt(name + "-b", x + hw, y + height - hs, width, size, density, friction, restitution, isSensor);
		var left = this.createBoxAt(name + "-l", x + hs, y + hh, size, height, density, friction, restitution, isSensor);
		var right = this.createBoxAt(name + "-r", x + width - hs, y + hh, size, height, density, friction, restitution, isSensor);

		return [top, left, bottom, right];
	};

	Entity.prototype.createBox = function createBox(name, width, height, density, friction, restitution, isSensor) {
		var def = this.createFixtureDef(density, friction, restitution, isSensor);
		var units = this.toUnits([width, height]);

		def.shape = new PXPolygonShape();
		def.shape.SetAsBox(units[0] * 0.5, units[1] * 0.5);

		return new _EntityFixture2["default"](name, this.body.CreateFixture(def), this.controller);
	};

	Entity.prototype.createBoxAt = function createBoxAt(name, x, y, width, height, density, friction, restitution, isSensor) {
		var hw = width * 0.5;
		var hh = height * 0.5;

		var vertices = [new PXVector2D(x + -hw, y + -hh), new PXVector2D(x + hw, y + -hh), new PXVector2D(x + hw, y + hh), new PXVector2D(x + -hw, y + hh)];

		return this.createPoly(name, vertices, density, friction, restitution, isSensor);
	};

	Entity.prototype.createEdge = function createEdge(name, x1, y1, x2, y2, density, friction, restitution, isSensor) {
		var def = this.createFixtureDef(density, friction, restitution, isSensor);
		var units = this.toUnits([x1, y1, x2, y2]);

		def.shape = new PXPolygonShape();
		def.shape.SetAsEdge(new PXVector2D(units[0], units[1]), new PXVector2D(units[2], units[3]));

		return new _EntityFixture2["default"](name, this.body.CreateFixture(def), this.controller);
	};

	Entity.prototype.createCircle = function createCircle(name, size, density, friction, restitution, isSensor) {
		return this.createCircleAt(name, 0, 0, size, density, friction, restitution, isSensor);
	};

	Entity.prototype.createCircleAt = function createCircleAt(name, x, y, size, density, friction, restitution, isSensor) {
		var def = this.createFixtureDef(density, friction, restitution, isSensor);
		var units = this.toUnits([x, y, size]);

		def.shape = new PXCircleShape(units[2] * 0.5);
		def.shape.SetLocalPosition(new PXVector2D(units[0], units[1]));

		return new _EntityFixture2["default"](name, this.body.CreateFixture(def), this.controller);
	};

	Entity.prototype.createEllipse = function createEllipse(name, width, height, quality, density, friction, restitution, isSensor) {
		return this.createEllipseAt(name, 0, 0, width, height, quality, density, friction, restitution, isSensor);
	};

	Entity.prototype.createEllipseAt = function createEllipseAt(name, x, y, width, height, quality, density, friction, restitution, isSensor) {
		var vertices = [];
		var rx = width * 0.5;
		var ry = height * 0.5;
		var cx = x + rx;
		var cy = y + ry;

		// compute an approximate number of segments based on a quality and the size
		var segs = Math.round(Entity.ELLIPSE_SEGMENTS_PER_UNIT * quality);

		// create each quadrant
		this.createCurve(vertices, segs, cx + rx, cy, cx, cy - ry, cx + rx, cy - Entity.TANGENT_LENGTH * ry, cx + Entity.TANGENT_LENGTH * rx, cy - ry);
		this.createCurve(vertices, segs, cx, cy - ry, cx - rx, cy, cx - Entity.TANGENT_LENGTH * rx, cy - ry, cx - rx, cy - Entity.TANGENT_LENGTH * ry);
		this.createCurve(vertices, segs, cx - rx, cy, cx, cy + ry, cx - rx, cy + Entity.TANGENT_LENGTH * ry, cx - Entity.TANGENT_LENGTH * rx, cy + ry);
		this.createCurve(vertices, segs, cx, cy + ry, cx + rx, cy, cx + Entity.TANGENT_LENGTH * rx, cy + ry, cx + rx, cy + Entity.TANGENT_LENGTH * ry);

		// create the elliptical polygon
		return this.createPoly(name, vertices, density, friction, restitution, isSensor);
	};

	Entity.prototype.createCurve = function createCurve(vertices, segmentCount, x1, y1, x2, y2, cpx1, cpy1, cpx2, cpy2) {
		var vx = 0;
		var vy = 0;
		var inc = 1.0 / segmentCount;
		var t = 0;

		// generate the segments to form the curve
		for (var i = 0; i < segmentCount; i++) {
			t = i * inc;

			// compute the curve vertex
			vx = Math.pow(1 - t, 3) * x1 + 3 * t * Math.pow(1 - t, 2) * cpx1 + 3 * Math.pow(t, 2) * (1 - t) * cpx2 + Math.pow(t, 3) * x2;
			vy = Math.pow(1 - t, 3) * y1 + 3 * t * Math.pow(1 - t, 2) * cpy1 + 3 * Math.pow(t, 2) * (1 - t) * cpy2 + Math.pow(t, 3) * y2;

			// need to reverse the order, box2d is CCW
			vertices.unshift(new PXVector2D(vx, vy));
		}
	};

	Entity.prototype.createFixtureDef = function createFixtureDef(density, friction, restitution, isSensor) {
		var fixtureDef = new PXFixtureDef();

		fixtureDef.density = _Engine.ValueOrDefault(density, fixtureDef.density);
		fixtureDef.friction = _Engine.ValueOrDefault(friction, fixtureDef.friction);
		fixtureDef.isSensor = _Engine.ValueOrDefault(isSensor, fixtureDef.isSensor);
		fixtureDef.restitution = _Engine.ValueOrDefault(restitution, fixtureDef.restitution);

		return fixtureDef;
	};

	Entity.prototype.createBody = function createBody(descriptor) {

		// the ground is created with the body directly
		if (this.getIsGround()) {
			return descriptor;
		}

		var world = this.getWorld();
		var def = new PXBodyDef();

		def.type = this.type;

		this.tryCopyValue(descriptor, def, "active");
		this.tryCopyValue(descriptor, def, "allowSleep");
		this.tryCopyValue(descriptor, def, "angularDamping");
		this.tryCopyValue(descriptor, def, "angularVelocity");
		this.tryCopyValue(descriptor, def, "awake");
		this.tryCopyValue(descriptor, def, "bullet");
		this.tryCopyValue(descriptor, def, "fixedRotation");
		this.tryCopyValue(descriptor, def, "inertiaScale");
		this.tryCopyValue(descriptor, def, "linearDamping");

		if (descriptor.angle != null) {
			def.angle = _EngineMath2["default"].degreesToRadians(descriptor.angle);
		}

		if (descriptor.linearVelocity != null) {
			def.linearVelocity.Set(descriptor.linearVelocity.x, descriptor.linearVelocity.y);
		}

		if (descriptor.position != null) {
			var units = this.toUnits([descriptor.position.x, descriptor.position.y]);

			def.position.Set(units[0], units[1]);
		}

		return world.CreateBody(def);
	};

	/**
  Overloads:
  - join(type)
  - join(type, options)
  - join(type, otherEntity)
  - join(type, otherEntity, options)
  **/

	Entity.prototype.join = function join(type) {
		var def = null;
		var args = Array.prototype.slice.call(arguments, 1);

		switch (type) {
			case _EntityJoinType2["default"].Distance:
				def = this.createDistanceJoint.apply(this, args);
				break;
			case _EntityJoinType2["default"].Friction:
				def = this.createFrictionJoint.apply(this, args);
				break;
			case _EntityJoinType2["default"].Gear:
				def = this.createGearJoint.apply(this, args);
				break;
			case _EntityJoinType2["default"].Line:
				def = this.createLineJoint.apply(this, args);
				break;
			case _EntityJoinType2["default"].Prismatic:
				def = this.createPrismaticJoint.apply(this, args);
				break;
			case _EntityJoinType2["default"].Pulley:
				def = this.createPulleyJoint.apply(this, args);
				break;
			case _EntityJoinType2["default"].Revolute:
				def = this.createRevoluteJoint.apply(this, args);
				break;
			case _EntityJoinType2["default"].Weld:
				def = this.createWeldJoint.apply(this, args);
				break;
		}

		if (def == null) {
			throw new Error("Unable to create join from the specified type: (" + type + ")");
		}

		return this.controller.getWorld().CreateJoint(def);
	};

	Entity.prototype.createDistanceJoint = function createDistanceJoint() {
		var other = null;
		var options = null;

		if (arguments.length > 0) {
			if (arguments[0] instanceof Entity) {
				other = arguments[0];
			}

			if (arguments.length == 2) {
				options = arguments[1];
			}
		}

		if (other == null) {
			throw new Error("Distance Joint requires another body to join to.");
		}

		if (options == null) {
			options = {};
		}

		var b1 = this.body;
		var b2 = other.body;
		var def = new PXDistanceJointDef();

		options.anchorA = _Engine.ValueOrDefault(options.anchorA, b1.GetWorldCenter());
		options.anchorB = _Engine.ValueOrDefault(options.anchorB, b2.GetWorldCenter());

		def.bodyA = b1;
		def.bodyB = b2;
		def.collideConnected = _Engine.ValueOrDefault(options.collideConnected, false);
		def.localAnchorA = _Engine.ValueOrDefault(options.localAnchorA, b1.GetLocalPoint(options.anchorA));
		def.localAnchorB = _Engine.ValueOrDefault(options.localAnchorB, b2.GetLocalPoint(options.anchorB));
		def.dampingRatio = _Engine.ValueOrDefault(options.dampingRatio, 0.0);
		def.frequencyHz = _Engine.ValueOrDefault(options.frequencyHz, 0.0);

		if (options.length == null) {
			var globalA = b1.GetWorldPoint(def.localAnchorA);
			var globalB = b2.GetWorldPoint(def.localAnchorB);
			var dx = globalB.x - globalA.x;
			var dy = globalB.y - globalA.y;

			def.length = Math.sqrt(dx * dx + dy * dy);
		} else {
			def.length = options.length;
		}

		return def;
	};

	Entity.prototype.createFrictionJoint = function createFrictionJoint() {
		var other = null;
		var options = null;

		if (arguments.length > 0) {
			if (arguments[0] instanceof Entity) {
				other = arguments[0];
			} else {
				options = arguments[0];
			}

			if (arguments.length == 2) {
				options = arguments[1];
			}
		}

		if (options == null) {
			options = {};
		}

		if (other == null) {
			other = { body: this.controller.getWorld().GetGroundBody() };
			options.collideConnected = _Engine.ValueOrDefault(options.collideConnected, true);
		}

		var b1 = this.body;
		var b2 = other.body;
		var def = new PXFrictionJointDef();

		options.anchorA = _Engine.ValueOrDefault(options.anchorA, b1.GetWorldCenter());
		options.anchorB = _Engine.ValueOrDefault(options.anchorB, b2.GetWorldCenter());

		def.bodyA = b1;
		def.bodyB = b2;
		def.collideConnected = _Engine.ValueOrDefault(options.collideConnected, false);
		def.localAnchorA = _Engine.ValueOrDefault(options.localAnchorA, b1.GetLocalPoint(options.anchorA));
		def.localAnchorB = _Engine.ValueOrDefault(options.localAnchorB, b2.GetLocalPoint(options.anchorB));
		def.maxForce = _Engine.ValueOrDefault(options.maxForce, 0.0);
		def.maxTorque = _Engine.ValueOrDefault(options.maxTorque, 0.0);

		return def;
	};

	Entity.prototype.createGearJoint = function createGearJoint() {
		var joint1 = null;
		var joint2 = null;
		var other = null;
		var options = null;

		if (arguments.length > 2) {
			if (arguments[0] instanceof Entity) {
				other = arguments[0];
			}

			joint1 = arguments[1];
			joint2 = arguments[2];

			if (arguments.length == 4) {
				options = arguments[3];
			}
		}

		if (other == null) {
			throw new Error("Gear Joint requires another body to join to.");
		}

		if (joint1 == null || joint2 == null) {
			throw new Error("Unable to create Gear Joint, both joints must not be null.");
		}

		if (joint1.GetType() != PXJoint.e_revoluteJoint && joint1.GetType() != PXJoint.e_prismaticJoint) {
			throw new Error("Unable to create Gear Joint, first joint must be either a revolute or prismatic joint.");
		}

		if (joint2.GetType() != PXJoint.e_revoluteJoint && joint2.GetType() != PXJoint.e_prismaticJoint) {
			throw new Error("Unable to create Gear Joint, second joint must be either a revolute or prismatic joint.");
		}

		if (options == null) {
			options = {};
		}

		var def = new PXGearJointDef();
		var b1 = this.body;
		var b2 = other.body;

		def.bodyA = b1;
		def.bodyB = b2;
		def.collideConnected = _Engine.ValueOrDefault(options.collideConnected, false);
		def.joint1 = joint1;
		def.joint2 = joint2;
		def.ratio = _Engine.ValueOrDefault(options.ratio, def.ratio);

		return def;
	};

	Entity.prototype.createLineJoint = function createLineJoint() {
		var other = null;
		var options = null;

		if (arguments.length > 0) {
			if (arguments[0] instanceof Entity) {
				other = arguments[0];
			} else {
				options = arguments[0];
			}

			if (arguments.length == 2) {
				options = arguments[1];
			}
		}

		if (options == null) {
			options = {};
		}

		if (other == null) {
			other = { body: this.controller.getWorld().GetGroundBody() };
			options.collideConnected = _Engine.ValueOrDefault(options.collideConnected, true);
		}

		var b1 = this.body;
		var b2 = other.body;
		var def = new PXLineJointDef();

		options.anchorA = _Engine.ValueOrDefault(options.anchorA, b1.GetWorldCenter());
		options.anchorB = _Engine.ValueOrDefault(options.anchorB, b2.GetWorldCenter());

		def.bodyA = b1;
		def.bodyB = b2;
		def.collideConnected = _Engine.ValueOrDefault(options.collideConnected, false);
		def.localAnchorA = _Engine.ValueOrDefault(options.localAnchorA, b1.GetLocalPoint(options.anchorA));
		def.localAnchorB = _Engine.ValueOrDefault(options.localAnchorB, b2.GetLocalPoint(options.anchorB));
		def.localAxisA = _Engine.ValueOrDefault(options.localAxisA, options.axis == null ? new PXVector2D(1, 0) : b1.GetLocalVector(options.axis));
		def.motorSpeed = _Engine.ValueOrDefault(options.motorSpeed, 0.0);
		def.maxMotorForce = _Engine.ValueOrDefault(options.maxMotorForce, 0.0);
		def.lowerTranslation = _Engine.ValueOrDefault(options.lowerTranslation, 0.0);
		def.upperTranslation = _Engine.ValueOrDefault(options.upperTranslation, 0.0);
		def.enableMotor = def.motorSpeed != 0 || def.maxMotorForce != 0;
		def.enableLimit = def.lowerTranslation != 0 || def.upperTranslation != 0;

		return def;
	};

	Entity.prototype.createPrismaticJoint = function createPrismaticJoint() {
		var other = null;
		var options = null;

		if (arguments.length > 0) {
			if (arguments[0] instanceof Entity) {
				other = arguments[0];
			} else {
				options = arguments[0];
			}

			if (arguments.length == 2) {
				options = arguments[1];
			}
		}

		if (options == null) {
			options = {};
		}

		if (other == null) {
			other = { body: this.controller.getWorld().GetGroundBody() };
			options.collideConnected = _Engine.ValueOrDefault(options.collideConnected, true);
		}

		var b1 = this.body;
		var b2 = other.body;
		var def = new PXPrismaticJointDef();

		options.anchorA = _Engine.ValueOrDefault(options.anchorA, b1.GetWorldCenter());
		options.anchorB = _Engine.ValueOrDefault(options.anchorB, b2.GetWorldCenter());

		def.bodyA = b1;
		def.bodyB = b2;
		def.collideConnected = _Engine.ValueOrDefault(options.collideConnected, false);
		def.localAnchorA = _Engine.ValueOrDefault(options.localAnchorA, b1.GetLocalPoint(options.anchorA));
		def.localAnchorB = _Engine.ValueOrDefault(options.localAnchorB, b2.GetLocalPoint(options.anchorB));
		def.localAxisA = _Engine.ValueOrDefault(options.localAxis, options.axis == null ? new PXVector2D(1, 0) : b1.GetLocalVector(options.axis));
		def.motorSpeed = _Engine.ValueOrDefault(options.motorSpeed, 0.0);
		def.maxMotorForce = _Engine.ValueOrDefault(options.maxMotorForce, 0.0);
		def.lowerTranslation = _Engine.ValueOrDefault(options.lowerTranslation, 0.0);
		def.upperTranslation = _Engine.ValueOrDefault(options.upperTranslation, 0.0);
		def.referenceAngle = _Engine.ValueOrDefault(options.referenceAngle, b2.GetAngle() - b1.GetAngle());
		def.enableMotor = def.motorSpeed != 0 || def.maxMotorForce != 0;
		def.enableLimit = def.lowerTranslation != 0 || def.upperTranslation != 0;

		return def;
	};

	Entity.prototype.createPulleyJoint = function createPulleyJoint() {
		var other = null;
		var options = null;

		if (arguments.length > 0) {
			if (arguments[0] instanceof Entity) {
				other = arguments[0];
			}

			if (arguments.length == 2) {
				options = arguments[1];
			}
		}

		if (other == null) {
			throw new Error("Pulley Joint requires another body to join to.");
		}

		if (options == null) {
			options = {};
		}

		var b1 = this.body;
		var b2 = other.body;
		var def = new PXPulleyJointDef();

		def.Initialize(b1, b2, _Engine.ValueOrDefault(options.groundAnchorA, new PXVector2D(-1.0, 1.0)), _Engine.ValueOrDefault(options.groundAnchorB, new PXVector2D(1.0, 1.0)), _Engine.ValueOrDefault(options.anchorA, b1.GetWorldCenter()), _Engine.ValueOrDefault(options.anchorB, b2.GetWorldCenter()), _Engine.ValueOrDefault(options.ratio, 1));

		def.collideConnected = _Engine.ValueOrDefault(options.collideConnected, false);
		def.localAnchorA = _Engine.ValueOrDefault(options.localAnchorA, def.localAnchorA);
		def.localAnchorB = _Engine.ValueOrDefault(options.localAnchorB, def.localAnchorB);
		def.lengthA = _Engine.ValueOrDefault(options.lengthA, def.lengthA);
		def.lengthB = _Engine.ValueOrDefault(options.lengthB, def.lengthB);
		def.maxLengthA = _Engine.ValueOrDefault(options.maxLengthA, def.maxLengthA);
		def.maxLengthB = _Engine.ValueOrDefault(options.maxLengthB, def.maxLengthB);
		def.ratio = _Engine.ValueOrDefault(options.ratio, def.ratio);

		return def;
	};

	Entity.prototype.createRevoluteJoint = function createRevoluteJoint() {
		var other = null;
		var options = null;

		if (arguments.length > 0) {
			if (arguments[0] instanceof Entity) {
				other = arguments[0];
			} else {
				options = arguments[0];
			}

			if (arguments.length == 2) {
				options = arguments[1];
			}
		}

		if (options == null) {
			options = {};
		}

		if (other == null) {
			other = {
				body: this.controller.getWorld().GetGroundBody()
			};
			options.collideConnected = _Engine.ValueOrDefault(options.collideConnected, true);
		}

		var b1 = this.body;
		var b2 = other.body;
		var def = new PXRevoluteJointDef();

		options.anchor = _Engine.ValueOrDefault(options.anchor, b1.GetWorldCenter());

		def.bodyA = b1;
		def.bodyB = b2;
		def.collideConnected = _Engine.ValueOrDefault(options.collideConnected, false);
		def.localAnchorA = _Engine.ValueOrDefault(options.localAnchorA, b1.GetLocalPoint(options.anchor));
		def.localAnchorB = _Engine.ValueOrDefault(options.localAnchorB, b2.GetLocalPoint(options.anchor));
		def.motorSpeed = _Engine.ValueOrDefault(options.motorSpeed, 0.0);
		def.maxMotorTorque = _Engine.ValueOrDefault(options.maxMotorTorque, 0.0);
		def.lowerAngle = _Engine.ValueOrDefault(options.lowerAngle, 0.0);
		def.upperAngle = _Engine.ValueOrDefault(options.upperAngle, 0.0);
		def.referenceAngle = _Engine.ValueOrDefault(options.referenceAngle, b2.GetAngle() - b1.GetAngle());
		def.enableMotor = def.motorSpeed != 0 || def.maxMotorTorque != 0;
		def.enableLimit = def.lowerAngle != 0 || def.upperAngle != 0;

		return def;
	};

	Entity.prototype.createWeldJoint = function createWeldJoint() {
		var other = null;
		var options = null;

		if (arguments.length > 0) {
			if (arguments[0] instanceof Entity) {
				other = arguments[0];
			}

			if (arguments.length == 2) {
				options = arguments[1];
			}
		}

		if (other == null) {
			throw new Error("Weld Joint requires another body to join to.");
		}

		if (options == null) {
			options = {};
		}

		var b1 = this.body;
		var b2 = other.body;
		var def = new PXWeldJointDef();

		options.anchor = _Engine.ValueOrDefault(options.anchor, b1.GetWorldCenter());

		def.bodyA = b1;
		def.bodyB = b2;
		def.collideConnected = _Engine.ValueOrDefault(options.collideConnected, false);
		def.localAnchorA = _Engine.ValueOrDefault(options.localAnchorA, b1.GetLocalPoint(options.anchor));
		def.localAnchorB = _Engine.ValueOrDefault(options.localAnchorB, b2.GetLocalPoint(options.anchor));
		def.referenceAngle = _Engine.ValueOrDefault(options.referenceAngle, b2.GetAngle() - b1.GetAngle());

		return def;
	};

	Entity.prototype.toGlobalPoint = function toGlobalPoint(localPoint, isUnits, asUnits) {
		isUnits = _Engine.ValueOrDefault(isUnits, false);
		asUnits = _Engine.ValueOrDefault(asUnits, false);

		return this.convertPoint(this.body.GetWorldPoint(this.convertPoint(localPoint, isUnits, true, false)), true, asUnits);
	};

	Entity.prototype.toGlobalVector = function toGlobalVector(localVector) {
		return this.convertPoint(this.body.GetWorldVector(localVector), true, true);
	};

	Entity.prototype.toLocalPoint = function toLocalPoint(globalPoint, isUnits, asUnits) {
		isUnits = _Engine.ValueOrDefault(isUnits, false);
		asUnits = _Engine.ValueOrDefault(asUnits, false);

		return this.convertPoint(this.body.GetLocalPoint(this.convertPoint(globalPoint, isUnits, true, false)), true, asUnits);
	};

	Entity.prototype.toLocalVector = function toLocalVector(globalVector) {
		return this.convertPoint(this.body.GetLocalVector(globalVector), true, true);
	};

	Entity.prototype.getLinearVelocityFromGlobalPoint = function getLinearVelocityFromGlobalPoint(globalPoint, isUnits) {
		isUnits = _Engine.ValueOrDefault(isUnits, false);

		return this.convertPoint(this.body.GetLinearVelocityFromWorldPoint(this.convertPoint(globalPoint, isUnits, true, false)), true, true);
	};

	Entity.prototype.getLinearVelocityFromLocalPoint = function getLinearVelocityFromLocalPoint(localPoint, isUnits) {
		isUnits = _Engine.ValueOrDefault(isUnits, false);

		return this.convertPoint(this.body.GetLinearVelocityFromLocalPoint(this.convertPoint(localPoint, isUnits, true, false)), true, true);
	};

	Entity.prototype.getMoveSpeedIndex = function getMoveSpeedIndex(direction) {
		switch (direction) {
			case _Direction2["default"].East:
				return 0;
			case _Direction2["default"].West:
				return 1;
			case _Direction2["default"].North:
				return 2;
			case _Direction2["default"].South:
				return 3;
		}

		return -1;
	};

	Entity.prototype.tryCopyValue = function tryCopyValue(from, to, name) {
		if (from[name] != null) {
			to[name] = from[name];
		}
	};

	Entity.createStatic = function createStatic(name, objectType, objectParams, descriptor, controller) {
		if (objectParams == null) {
			return new objectType(_EntityType2["default"].Static, name, descriptor, controller);
		}

		return new objectType(objectParams, _EntityType2["default"].Static, name, descriptor, controller);
	};

	Entity.createKinematic = function createKinematic(name, objectType, objectParams, descriptor, controller) {
		if (objectParams == null) {
			return new objectType(_EntityType2["default"].Kinematic, name, descriptor, controller);
		}

		return new objectType(objectParams, _EntityType2["default"].Kinematic, name, descriptor, controller);
	};

	Entity.prototype.createDynamic = function createDynamic(name, objectType, objectParams, descriptor, controller) {
		if (objectParams == null) {
			return new objectType(_EntityType2["default"].Dynamic, name, descriptor, controller);
		}

		return new objectType(objectParams, _EntityType2["default"].Dynamic, name, descriptor, controller);
	};

	return Entity;
})(_EntityBase3["default"]);

Entity.TANGENT_LENGTH = 0.55192;
Entity.ELLIPSE_SEGMENTS_PER_UNIT = 12;

exports["default"] = Entity;
module.exports = exports["default"];

},{"../Engine":44,"../EngineMath":45,"../Rectangle":59,"../Vector2D":67,"./Direction":119,"./EntityBase":121,"./EntityFixture":122,"./EntityJoinType":123,"./EntityType":127,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11,"box2dweb":37}],121:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _EventDispatcher2 = require("../EventDispatcher");

var _EventDispatcher3 = _interopRequireDefault(_EventDispatcher2);

var _uiPropertyOptions = require("../ui/PropertyOptions");

var _uiPropertyOptions2 = _interopRequireDefault(_uiPropertyOptions);

var _Vector2D = require("../Vector2D");

var _Vector2D2 = _interopRequireDefault(_Vector2D);

var _Engine = require("../Engine");

var _EngineMath = require("../EngineMath");

var _EngineMath2 = _interopRequireDefault(_EngineMath);

var _transformsRotateTransform = require("../transforms/RotateTransform");

var _transformsRotateTransform2 = _interopRequireDefault(_transformsRotateTransform);

var _box2dweb = require("box2dweb");

var _box2dweb2 = _interopRequireDefault(_box2dweb);

var PXVector2D = _box2dweb2["default"].Common.Math.b2Vec2;

var EntityBase = (function (_EventDispatcher) {
	_inherits(EntityBase, _EventDispatcher);

	function EntityBase(name, controller) {
		_classCallCheck(this, EntityBase);

		_EventDispatcher.call(this);

		this.name = name;
		this.controller = controller;
		this.drawable = null;
		this.drawableUpdateOptions = _uiPropertyOptions2["default"].None;
		this.autoRemoveDrawable = true;
		this.isDestroyed = false;
		this.prevPosition = new _Vector2D2["default"](0, 0);
		this.prevCenter = new _Vector2D2["default"](0, 0);
		this.prevAngle = 0;

		this.controller.addEntity(this);
	}

	EntityBase.prototype.getName = function getName() {
		return this.name;
	};

	EntityBase.prototype.getController = function getController() {
		return this.controller;
	};

	EntityBase.prototype.getDrawable = function getDrawable() {
		return this.drawable;
	};

	EntityBase.prototype.getIsDestroyed = function getIsDestroyed() {
		return this.isDestroyed;
	};

	EntityBase.prototype.getLocalCenter = function getLocalCenter(asUnits) {
		return this.getLocalCenterImpl(_Engine.ValueOrDefault(asUnits, false));
	};

	EntityBase.prototype.getLocalCenterImpl = function getLocalCenterImpl(asUnits) {
		return null;
		/** override **/
	};

	EntityBase.prototype.getGlobalCenter = function getGlobalCenter(asUnits) {
		return this.getGlobalCenterImpl(_Engine.ValueOrDefault(asUnits, false));
	};

	EntityBase.prototype.getGlobalCenterImpl = function getGlobalCenterImpl(asUnits) {
		return null;
		/** override **/
	};

	EntityBase.prototype.getPosition = function getPosition(asUnits) {
		return this.getPositionImpl(_Engine.ValueOrDefault(asUnits, false));
	};

	EntityBase.prototype.getPositionImpl = function getPositionImpl(asUnits) {
		return null;
		/** override **/
	};

	EntityBase.prototype.setPosition = function setPosition(value, isUnits) {
		this.setPositionImpl(value, _Engine.ValueOrDefault(isUnits, false));
	};

	EntityBase.prototype.setPositionImpl = function setPositionImpl(value, isUnits) {
		/** override **/
	};

	EntityBase.prototype.getAngle = function getAngle(asRadians) {
		return this.getAngleImpl(_Engine.ValueOrDefault(asRadians, false));
	};

	EntityBase.prototype.getAngleImpl = function getAngleImpl(asRadians) {
		return 0;
		/** override **/
	};

	EntityBase.prototype.setAngle = function setAngle(value, isRadians) {
		this.setAngleImpl(value, _Engine.ValueOrDefault(isRadians, false));
	};

	EntityBase.prototype.setAngleImpl = function setAngleImpl(value, isRadians) {
		/** override **/
	};

	EntityBase.prototype.getMass = function getMass() {
		/** override **/
	};

	EntityBase.prototype.getBounds = function getBounds(asUnits, asAABB) {
		asUnits = _Engine.ValueOrDefault(asUnits, false);
		asAABB = _Engine.ValueOrDefault(asAABB, true);

		return this.getBoundsImpl(asUnits, asAABB);
	};

	EntityBase.prototype.getBoundsImpl = function getBoundsImpl(asUnits, asAABB) {
		/** override **/
	};

	EntityBase.prototype.destroy = function destroy() {
		if (this.isDestroyed) {
			return;
		}

		this.unlink();
		this.controller.removeEntity(this, true);
		this.isDestroyed = true;
	};

	EntityBase.prototype.link = function link(drawable, updateOptions, autoRemove) {
		this.drawable = drawable;
		this.drawableUpdateOptions = _Engine.ValueOrDefault(updateOptions, _uiPropertyOptions2["default"].None);
		this.autoRemoveDrawable = _Engine.ValueOrDefault(autoRemove, true);
	};

	EntityBase.prototype.unlink = function unlink(removeDrawable) {
		if (this.drawable != null) {
			if (this.autoRemoveDrawable || _Engine.ValueOrDefault(removeDrawable, false)) {
				this.drawable.removeFromParent();
			}

			this.drawable = null;
			this.drawableUpdateOptions = _uiPropertyOptions2["default"].None;
			this.autoRemoveDrawable = true;
		}
	};

	EntityBase.prototype.reset = function reset() {
		/** override **/
	};

	EntityBase.prototype.update = function update(ratio) {
		/** override **/
	};

	EntityBase.prototype.resetDrawable = function resetDrawable(unitPos, unitCenter, angle) {
		if (this.drawable == null) {
			return;
		}

		this.prevPosition.x = unitPos.x;
		this.prevPosition.y = unitPos.y;
		this.prevCenter.x = unitCenter.x;
		this.prevCenter.y = unitCenter.y;
		this.prevAngle = angle;

		this.updateDrawablePosition(unitPos, unitCenter, angle);
	};

	EntityBase.prototype.updateDrawable = function updateDrawable(ratio, unitPos, unitCenter, angle) {
		if (this.drawable == null) {
			return;
		}

		var oneMinusRatio = 1.0 - ratio;
		var newPos = new PXVector2D(0, 0);
		var newCenter = new PXVector2D(0, 0);
		var newAngle = 0;

		newPos.x = ratio * unitPos.x + oneMinusRatio * this.prevPosition.x;
		newPos.y = ratio * unitPos.y + oneMinusRatio * this.prevPosition.y;
		newCenter.x = ratio * unitCenter.x + oneMinusRatio * this.prevCenter.x;
		newCenter.y = ratio * unitCenter.y + oneMinusRatio * this.prevCenter.y;
		newAngle = angle * ratio + oneMinusRatio * this.prevAngle;

		this.updateDrawablePosition(newPos, newCenter, newAngle);
	};

	EntityBase.prototype.updateDrawablePosition = function updateDrawablePosition(unitPos, unitCenter, angle) {
		var unitScale = this.controller.getScaleUnit();
		var px = unitPos.x * unitScale;
		var py = unitPos.y * unitScale;
		var cx = unitCenter.x * unitScale;
		var cy = unitCenter.y * unitScale;
		var ox = this.drawable.getWidth() * 0.5 - cx;
		var oy = this.drawable.getHeight() * 0.5 - cy;
		var xform = this.drawable.getRenderTransform();

		angle = _EngineMath2["default"].normalizeAngle(_EngineMath2["default"].radiansToDegrees(angle));

		// FIXME : need to allow for a user specified transform as well, if a user
		//         set's their own render transform we will end up overriding it,
		//         the only current workaround is to embed drawable within another
		//         and set their transform on the inner drawable while linking to
		//         the outer drawable.

		if (xform == null || !(xform instanceof _transformsRotateTransform2["default"])) {
			xform = new _transformsRotateTransform2["default"](angle, ox, oy);
			this.drawable.setRenderTransform(xform);
		}

		xform.setCenterX(Math.round(ox));
		xform.setCenterY(Math.round(oy));
		xform.setAngle(Math.round(angle));

		this.drawable.setX(_EngineMath2["default"].toInt(px) - _EngineMath2["default"].toInt(ox));
		this.drawable.setY(_EngineMath2["default"].toInt(py) - _EngineMath2["default"].toInt(oy));

		// no update options specified so we can just finish
		if (this.drawableUpdateOptions == _uiPropertyOptions2["default"].None) {
			return;
		}

		// apply any update options specified by the user when the
		// drawable was linked, this allows for drawables to automatically
		// update there layout's as the entity is simulated
		var parent = this.drawable.getParent();

		if ((this.drawableUpdateOptions & _uiPropertyOptions2["default"].AffectsMeasure) != _uiPropertyOptions2["default"].None) {
			this.drawable.requestMeasure();
		}

		if ((this.drawableUpdateOptions & _uiPropertyOptions2["default"].AffectsLayout) != _uiPropertyOptions2["default"].None) {
			this.drawable.requestLayout();
		}

		if (parent != null) {
			if ((this.drawableUpdateOptions & _uiPropertyOptions2["default"].AffectsParentMeasure) != _uiPropertyOptions2["default"].None) {
				parent.requestMeasure();
			}

			if ((this.drawableUpdateOptions & _uiPropertyOptions2["default"].AffectsParentLayout) != _uiPropertyOptions2["default"].None) {
				parent.requestLayout();
			}
		}
	};

	EntityBase.prototype.convertPoint = function convertPoint(pt, isUnits, asUnits, asVector) {
		return this.controller.convertPoint(pt, isUnits, asUnits, asVector);
	};

	EntityBase.prototype.toPixels = function toPixels(units) {
		return this.controller.toPixels(units);
	};

	EntityBase.prototype.toUnits = function toUnits(pixels) {
		return this.controller.toUnits(pixels);
	};

	return EntityBase;
})(_EventDispatcher3["default"]);

exports["default"] = EntityBase;
module.exports = exports["default"];

},{"../Engine":44,"../EngineMath":45,"../EventDispatcher":48,"../Vector2D":67,"../transforms/RotateTransform":134,"../ui/PropertyOptions":156,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11,"box2dweb":37}],122:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _EntityBase2 = require("./EntityBase");

var _EntityBase3 = _interopRequireDefault(_EntityBase2);

var _CollisionCategory = require("./CollisionCategory");

var _CollisionCategory2 = _interopRequireDefault(_CollisionCategory);

var _Matrix2D = require("../Matrix2D");

var _Matrix2D2 = _interopRequireDefault(_Matrix2D);

var _Rectangle = require("../Rectangle");

var _Rectangle2 = _interopRequireDefault(_Rectangle);

var _box2dweb = require("box2dweb");

var _box2dweb2 = _interopRequireDefault(_box2dweb);

var PXVector2D = _box2dweb2["default"].Common.Math.b2Vec2;
var PXShape = _box2dweb2["default"].Collision.Shapes.b2Shape;
var PXMassData = _box2dweb2["default"].Collision.Shapes.b2MassData;

var EntityFixture = (function (_EntityBase) {
	_inherits(EntityFixture, _EntityBase);

	function EntityFixture(name, fixture, controller) {
		_classCallCheck(this, EntityFixture);

		_EntityBase.call(this, name, controller);

		this.fixture = fixture;
		this.fixture.SetUserData(this);

		if (this.getEntity().getIsGround()) {
			this.addCategory(_CollisionCategory2["default"].Ground);
		}
	}

	EntityFixture.prototype.getEntity = function getEntity() {
		return this.fixture.GetBody().GetUserData();
	};

	EntityFixture.prototype.getFixture = function getFixture() {
		return this.fixture;
	};

	EntityFixture.prototype.getShapeType = function getShapeType() {
		return this.fixture.GetType();
	};

	EntityFixture.prototype.getShape = function getShape() {
		return this.fixture.GetShape();
	};

	EntityFixture.prototype.getIsSensor = function getIsSensor() {
		return this.fixture.IsSensor();
	};

	EntityFixture.prototype.setIsSensor = function setIsSensor(value) {
		this.fixture.SetSensor(value);
	};

	EntityFixture.prototype.getMassData = function getMassData() {
		var data = new PXMassData();

		return this.fixture.GetMassData(data);
	};

	EntityFixture.prototype.getDensity = function getDensity() {
		return this.fixture.GetDensity();
	};

	EntityFixture.prototype.setDensity = function setDensity(value) {
		this.fixture.SetDensity(value);
	};

	EntityFixture.prototype.getFriction = function getFriction() {
		return this.fixture.GetFriction();
	};

	EntityFixture.prototype.setFriction = function setFriction(value) {
		this.fixture.SetFriction(value);
	};

	EntityFixture.prototype.getRestitution = function getRestitution() {
		return this.fixture.GetRestitution();
	};

	EntityFixture.prototype.setRestitution = function setRestitution(value) {
		this.fixture.SetRestitution(value);
	};

	EntityFixture.prototype.getLocalCenterImpl = function getLocalCenterImpl(asUnits) {
		var aabb = this.fixture.GetAABB();
		var center = aabb.GetCenter();
		var entity = this.getEntity();

		return entity.toLocalPoint(center, true, asUnits);
	};

	EntityFixture.prototype.getGlobalCenterImpl = function getGlobalCenterImpl(asUnits) {
		var aabb = this.fixture.GetAABB();
		var center = aabb.GetCenter();

		return this.convertPoint(center, true, asUnits);
	};

	EntityFixture.prototype.getPositionImpl = function getPositionImpl(asUnits) {
		var pos = null;
		var type = this.getShapeType();

		switch (type) {
			case PXShape.e_circleShape:
				pos = this.getShape().GetLocalPosition();
				break;
			case PXShape.e_polygonShape:
				pos = this.getShape().m_centroid;
				break;
		}

		if (pos) {
			return this.getEntity().toGlobalPoint(pos, true, asUnits);
		}

		return this.getGlobalCenter(asUnits);
	};

	EntityFixture.prototype.setPositionImpl = function setPositionImpl(value, isUnits) {
		var pos = isUnits ? value : this.convertPoint(value, false, true);
		var shape = this.getShape();
		var type = this.getShapeType();

		if (type == PXShape.e_circleShape) {
			shape.SetLocalPosition(pos);
		} else if (type == PXShape.e_polygonShape) {
			// update the poly's vertices, really the user
			// shouldn't being do this but I guess it could
			// be helpful in certain cases
			var verts = shape.GetVertices();
			var count = verts.length;
			var mx = new _Matrix2D2["default"]();

			mx.translate(pos.x, pos.y);
			mx.transformPoints(verts);

			for (var i = 0; i < count; ++i) {
				verts[i] = new PXVector2D(verts[i].x, verts[i].y);
			}

			shape.SetAsVector(verts, count);
		}
	};

	EntityFixture.prototype.getAngleImpl = function getAngleImpl(asRadians) {
		throw new Error("Not Supported");
	};

	EntityFixture.prototype.setAngleImpl = function setAngleImpl(value, isRadians) {
		throw new Error("Not Supported");
	};

	EntityFixture.prototype.getMass = function getMass() {
		var massData = new PXMassData();
		var shape = this.getShape();

		shape.ComputeMass(massData, this.getDensity());

		return massData.mass;
	};

	EntityFixture.prototype.getBoundsImpl = function getBoundsImpl(asUnits, asAABB) {
		if (asAABB) {
			var aabb = this.fixture.GetAABB();

			return _Rectangle2["default"].fromPoints(this.convertPoint(aabb.lowerBound, true, asUnits), this.convertPoint(aabb.upperBound, true, asUnits));
		}
	};

	EntityFixture.prototype.getNext = function getNext() {
		var nextFixture = this.fixture.GetNext();

		// return entity link
		if (nextFixture != null) {
			return nextFixture.GetUserData();
		}

		return null;
	};

	EntityFixture.prototype.getGroup = function getGroup() {
		var group = this.fixture.GetFilterData().groupIndex;

		if (group < 0) {
			return -group;
		}

		return 0;
	};

	EntityFixture.prototype.setGroup = function setGroup(group) {
		if (group < 0) {
			throw new Error("group must be a positive integer or zero");
		}

		var filterData = this.fixture.GetFilterData();

		filterData.groupIndex = -group;

		this.fixture.SetFilterData(filterData);
	};

	EntityFixture.prototype.getCollisionGroup = function getCollisionGroup() {
		var group = this.fixture.GetFilterData().groupIndex;

		if (group > 0) {
			return group;
		}

		return 0;
	};

	EntityFixture.prototype.setCollisionGroup = function setCollisionGroup(group) {
		if (group < 0) {
			throw new Error("group must be a positive integer or zero");
		}

		var filterData = this.fixture.GetFilterData();

		filterData.groupIndex = group;

		this.fixture.SetFilterData(filterData);
	};

	EntityFixture.prototype.getCategories = function getCategories() {
		return this.fixture.GetFilterData().categoryBits;
	};

	EntityFixture.prototype.addCategory = function addCategory(value) {
		var filterData = this.fixture.GetFilterData();

		if (filterData.categoryBits == 0x0001) {
			filterData.categoryBits = 0;
		}

		filterData.categoryBits |= value;

		this.fixture.SetFilterData(filterData);
	};

	EntityFixture.prototype.removeCategory = function removeCategory(value) {
		var filterData = this.fixture.GetFilterData();

		filterData.categoryBits &= ~value;

		this.fixture.SetFilterData(filterData);
	};

	EntityFixture.prototype.clearCategories = function clearCategories() {
		var filterData = this.fixture.GetFilterData();

		filterData.categoryBits = 0x0001;

		this.fixture.SetFilterData(filterData);
	};

	EntityFixture.prototype.getCollisionCategories = function getCollisionCategories() {
		return this.fixture.GetFilterData().maskBits;
	};

	EntityFixture.prototype.addCollisionCategory = function addCollisionCategory(value) {
		var filterData = this.fixture.GetFilterData();

		if (filterData.maskBits == 0xFFFF) {
			filterData.maskBits = 0x0001;
		}

		filterData.maskBits |= value;

		this.fixture.SetFilterData(filterData);
	};

	EntityFixture.prototype.removeCollisionCategory = function removeCollisionCategory(value) {
		var filterData = this.fixture.GetFilterData();

		filterData.maskBits &= ~value;

		this.fixture.SetFilterData(filterData);
	};

	EntityFixture.prototype.clearCollisionCategories = function clearCollisionCategories() {
		var filterData = this.fixture.GetFilterData();

		filterData.maskBits = 0xFFFF;

		this.fixture.SetFilterData(filterData);
	};

	EntityFixture.prototype.reset = function reset() {
		var params = this.getParams();

		this.resetDrawable(params[0], params[1], params[2]);
	};

	EntityFixture.prototype.update = function update(ratio) {
		var params = this.getParams();

		this.updateDrawable(ratio, params[0], params[1], params[2]);
	};

	EntityFixture.prototype.getParams = function getParams() {
		var body = this.fixture.GetBody();
		var shape = this.fixture.GetShape();
		var type = shape.GetType();
		var position = body.GetPosition();
		var center = new PXVector2D();

		switch (type) {
			case PXShape.e_circleShape:
				center = shape.GetLocalPosition();
				break;
			case PXShape.e_polygonShape:
				center = shape.m_centroid;
				break;
			case PXShape.e_edgeShape:
				// TODO : the box2dweb-2.1.a.3.js includes this but is not 100% implemented yet
				throw new Error("The b2EdgeShape is not yet supported. Use b2PolygonShape.SetAsEdge instead.");
		}

		return [position, center, body.GetAngle()];
	};

	return EntityFixture;
})(_EntityBase3["default"]);

exports["default"] = EntityFixture;
module.exports = exports["default"];

},{"../Matrix2D":54,"../Rectangle":59,"./CollisionCategory":116,"./EntityBase":121,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11,"box2dweb":37}],123:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var EntityJoinType = {
	Distance: 1,
	Friction: 2,
	Gear: 3,
	Line: 4,
	Mouse: 5,
	Prismatic: 6,
	Pulley: 7,
	Revolute: 8,
	Weld: 9
};

exports["default"] = EntityJoinType;
module.exports = exports["default"];

},{}],124:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

var _Event2 = require("../Event");

var _Event3 = _interopRequireDefault(_Event2);

var _Rectangle = require("../Rectangle");

var _Rectangle2 = _interopRequireDefault(_Rectangle);

var EntityQueryEvent = (function (_Event) {
	_inherits(EntityQueryEvent, _Event);

	function EntityQueryEvent(type, entityFixture, bubbles, cancelable) {
		_classCallCheck(this, EntityQueryEvent);

		_Event.call(this, type, bubbles, cancelable);

		this.entityFixture = entityFixture;
		this.queryRect = _Rectangle2["default"].Empty();
	}

	EntityQueryEvent.prototype.getQueryRect = function getQueryRect() {
		return this.queryRect;
	};

	EntityQueryEvent.prototype.getEntity = function getEntity() {
		return this.entityFixture.getEntity();
	};

	EntityQueryEvent.prototype.getEntityFixture = function getEntityFixture() {
		return this.entityFixture;
	};

	return EntityQueryEvent;
})(_Event3["default"]);

EntityQueryEvent.REPORT = "report";

},{"../Event":47,"../Rectangle":59,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],125:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

var _Event2 = require("../Event");

var _Event3 = _interopRequireDefault(_Event2);

var _Vector2D = require("../Vector2D");

var _Vector2D2 = _interopRequireDefault(_Vector2D);

var EntityRayCastEvent = (function (_Event) {
	_inherits(EntityRayCastEvent, _Event);

	function EntityRayCastEvent(type, bubbles, cancelable) {
		_classCallCheck(this, EntityRayCastEvent);

		_Event.call(this, type, bubbles, cancelable);

		this.startPoint = _Vector2D2["default"].Zero();
		this.endPoint = _Vector2D2["default"].Zero();
		this.entityFixture = null;
		this.point = null;
		this.normal = null;
		this.distance = 0;
		this.result = 1;
	}

	EntityRayCastEvent.prototype.getStartPoint = function getStartPoint() {
		return this.startPoint;
	};

	EntityRayCastEvent.prototype.getEndPoint = function getEndPoint() {
		return this.endPoint;
	};

	EntityRayCastEvent.prototype.getEntity = function getEntity() {
		return this.entityFixture.getEntity();
	};

	EntityRayCastEvent.prototype.getEntityFixture = function getEntityFixture() {
		return this.entityFixture;
	};

	EntityRayCastEvent.prototype.getPoint = function getPoint() {
		return this.point;
	};

	EntityRayCastEvent.prototype.getNormal = function getNormal() {
		return this.normal;
	};

	EntityRayCastEvent.prototype.getDistance = function getDistance() {
		return this.distance;
	};

	EntityRayCastEvent.prototype.setResult = function setResult(value) {
		this.result = value;
	};

	return EntityRayCastEvent;
})(_Event3["default"]);

EntityRayCastEvent.REPORT = "reportRayCast";

},{"../Event":47,"../Vector2D":67,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],126:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var EntityRayCastType = {
	Any: 0,
	One: 1
};

exports["default"] = EntityRayCastType;
module.exports = exports["default"];

},{}],127:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var EntityType = {
	Static: 0,
	Kinematic: 1,
	Dynamic: 2,
	Ground: 3
};

exports["default"] = EntityType;
module.exports = exports["default"];

},{}],128:[function(require,module,exports){
"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Vector2D = require("../Vector2D");

var _Vector2D2 = _interopRequireDefault(_Vector2D);

var _ContactPointState = require("./ContactPointState");

var _ContactPointState2 = _interopRequireDefault(_ContactPointState);

var _CollisionEvent = require("./CollisionEvent");

var _CollisionEvent2 = _interopRequireDefault(_CollisionEvent);

var _box2dweb = require("box2dweb");

var _box2dweb2 = _interopRequireDefault(_box2dweb);

var PXVector2D = _box2dweb2["default"].Common.Math.b2Vec2;
var PXSettings = _box2dweb2["default"].Common.b2Settings;
var PXWorldManifold = _box2dweb2["default"].Collision.b2WorldManifold;

var PhysicsContactListener = (function () {
	function PhysicsContactListener(controller) {
		_classCallCheck(this, PhysicsContactListener);

		this.controller = controller;
		this.beginContacts = [];
		this.endContacts = [];
		this.debugContactPoints = [];
		this.debugContactPointCount = 0;

		this.tmpWorldManifold = new PXWorldManifold();
	}

	PhysicsContactListener.prototype.initializeDebugContactPoints = function initializeDebugContactPoints() {
		this.debugContactPoints = new Array(PhysicsContactListener.MaxDebugContactPoints);

		for (var i = 0; i < PhysicsContactListener.MaxDebugContactPoints; ++i) {
			this.debugContactPoints[i] = {
				fixtureA: null, fixtureB: null,
				normal: new PXVector2D(), position: new PXVector2D(),
				state: _ContactPointState2["default"].Null
			};
		}
	};

	PhysicsContactListener.prototype.resetDebugContactPoints = function resetDebugContactPoints() {
		this.debugContactPointCount = 0;
	};

	PhysicsContactListener.prototype.clear = function clear() {
		this.beginContacts = [];
		this.endContacts = [];
	};

	PhysicsContactListener.prototype.process = function process() {
		var c = null;

		// dispatch begin events
		var len = this.beginContacts.length;
		var i;

		for (i = 0; i < len; ++i) {
			c = this.beginContacts[i];

			this.dispatchCollisionEvent(_CollisionEvent2["default"].START, c.entityA, c, false);
			this.dispatchCollisionEvent(_CollisionEvent2["default"].START, c.entityB, c, false);
		}

		// dispatch end events
		len = this.endContacts.length;

		for (i = 0; i < len; ++i) {
			c = this.endContacts[i];

			this.dispatchCollisionEvent(_CollisionEvent2["default"].FINISH, c.entityA, c, false);
			this.dispatchCollisionEvent(_CollisionEvent2["default"].FINISH, c.entityB, c, false);
		}

		// reset for next time step
		this.clear();
	};

	PhysicsContactListener.prototype.dispatchCollisionEvent = function dispatchCollisionEvent(type, target, contact, always) {
		if (target == null) {
			return;
		}

		if (always || !always && target.hasEventHandler(type)) {
			target.dispatchEvent(new _CollisionEvent2["default"](type, this.controller, contact.source, contact.target, contact.normal, contact.points, contact.linearVelocityA, contact.linearVelocityB, contact.touching, contact.continuous, contact.sensor, contact.enabled, false, false));
		}
	};

	PhysicsContactListener.prototype.addContactForProcessing = function addContactForProcessing(contactArray, contact) {
		var fixtureA = contact.GetFixtureA();
		var fixtureB = contact.GetFixtureB();
		var bodyA = fixtureA.GetBody();
		var bodyB = fixtureB.GetBody();
		var entityLinkA = fixtureA.GetUserData();
		var entityLinkB = fixtureB.GetUserData();
		var entityA = bodyA.GetUserData();
		var entityB = bodyB.GetUserData();
		var p = null;
		var velA = new _Vector2D2["default"](0, 0);
		var velB = new _Vector2D2["default"](0, 0);
		var points = [];

		// just use the world manifold point
		contact.GetWorldManifold(this.tmpWorldManifold);

		// compute the linear velocities
		var pointCount = this.tmpWorldManifold.m_points.length;

		var velocities = this.getVelocities(bodyA, bodyB, this.tmpWorldManifold);

		if (velocities) {
			velA.x = velocities[0].x;
			velA.y = velocities[0].y;
			velB.x = velocities[1].x;
			velB.y = velocities[1].y;
		}

		// convert the points to a Vector2D
		for (var i = 0; i < pointCount; ++i) {
			p = this.tmpWorldManifold.m_points[i];
			points.push(new _Vector2D2["default"](p.x, p.y));
		}

		// store our contact for processing
		contactArray.push({
			entityA: entityA,
			entityB: entityB,
			source: entityLinkA,
			target: entityLinkB,
			linearVelocityA: velA,
			linearVelocityB: velB,
			normal: new _Vector2D2["default"](this.tmpWorldManifold.m_normal.x, this.tmpWorldManifold.m_normal.y),
			points: points,
			touching: contact.IsTouching(),
			continuous: contact.IsContinuous(),
			sensor: contact.IsSensor(),
			enabled: contact.IsEnabled()
		});
	};

	PhysicsContactListener.prototype.getVelocities = function getVelocities(bodyA, bodyB, worldManifold) {
		var pointCount = worldManifold.m_points.length;

		if (pointCount > 0) {
			var p = worldManifold.m_points[0];
			var v1 = bodyA.GetLinearVelocityFromWorldPoint(p);
			var v2 = bodyB.GetLinearVelocityFromWorldPoint(p);

			return [v1, v2];
		}

		return null;
	};

	PhysicsContactListener.prototype.getPointStates = function getPointStates(state1, state2, manifold1, manifold2) {
		var i, j, id;
		for (i = 0; i < PXSettings.b2_maxManifoldPoints; ++i) {
			state1[i] = state2[i] = _ContactPointState2["default"].Null;
		}

		for (i = 0; i < manifold1.m_pointCount; ++i) {
			id = manifold1.m_points[i].m_id;

			state1[i] = _ContactPointState2["default"].Remove;

			for (j = 0; j < manifold2.m_pointCount; ++j) {
				if (manifold2.m_points[j].m_id._key == id._key) {
					state1[i] = _ContactPointState2["default"].Persist;
					break;
				}
			}
		}

		for (i = 0; i < manifold2.m_pointCount; ++i) {
			id = manifold2.m_points[i].m_id;

			state2[i] = _ContactPointState2["default"].Add;

			for (j = 0; j < manifold1.m_pointCount; ++j) {
				if (manifold1.m_points[j].m_id._key == id._key) {
					state2[i] = _ContactPointState2["default"].Persist;
					break;
				}
			}
		}
	};

	PhysicsContactListener.prototype.addDebugContactPoint = function addDebugContactPoint(fixtureA, fixtureB, position, normal, state) {
		var cp = this.debugContactPoints[this.debugContactPointCount];
		cp.fixtureA = fixtureA;
		cp.fixtureB = fixtureB;
		cp.position = new PXVector2D(position.x, position.y);
		cp.normal = new PXVector2D(normal.x, normal.y);
		cp.state = state;

		++this.debugContactPointCount;
	};

	PhysicsContactListener.prototype.BeginContact = function BeginContact(contact) {
		this.addContactForProcessing(this.beginContacts, contact);
	};

	PhysicsContactListener.prototype.EndContact = function EndContact(contact) {
		this.addContactForProcessing(this.endContacts, contact);
	};

	PhysicsContactListener.prototype.PreSolve = function PreSolve(contact, oldManifold) {
		var entityA = contact.GetFixtureA().GetBody().GetUserData();
		var entityB = contact.GetFixtureB().GetBody().GetUserData();
		var manifold = contact.GetManifold();
		var result = true;

		// add contacts for visual debugging
		if (this.controller.getContactPointDebuggingEnabled() && manifold.m_pointCount > 0) {
			contact.GetWorldManifold(this.tmpWorldManifold);

			// get the point states and add the contact points, this was taken from the
			// official C++ version of Box2D, which seems to have not been included in
			// the port... not sure why?
			var state1 = new Array(PXSettings.b2_maxManifoldPoints);
			var state2 = new Array(PXSettings.b2_maxManifoldPoints);

			this.getPointStates(state1, state2, oldManifold, manifold);

			for (var i = 0; i < manifold.m_pointCount && this.debugContactPointCount < PhysicsContactListener.MaxDebugContactPoints; ++i) {
				this.addDebugContactPoint(contact.GetFixtureA(), contact.GetFixtureB(), this.tmpWorldManifold.m_points[i], this.tmpWorldManifold.m_normal, state2[i]);
			}
		}

		// handle the usual callbacks
		if (entityA != null && entityA.preSolveCallback != null) {
			result = entityA.preSolveCallback(contact, oldManifold);
		}

		// cancel the next callback if user returned
		// false from the first
		if (!result) {
			return;
		}

		if (entityB != null && entityB.preSolveCallback != null) {
			entityB.preSolveCallback(contact, oldManifold);
		}
	};

	PhysicsContactListener.prototype.PostSolve = function PostSolve(contact, impulse) {
		var entityA = contact.GetFixtureA().GetBody().GetUserData();
		var entityB = contact.GetFixtureB().GetBody().GetUserData();
		var result = true;

		if (entityA != null && entityA.postSolveCallback != null) {
			result = entityA.postSolveCallback(contact, impulse);
		}

		// cancel the next callback if user returned
		// false from the first
		if (!result) {
			return;
		}

		if (entityB != null && entityB.postSolveCallback != null) {
			entityB.postSolveCallback(contact, impulse);
		}
	};

	return PhysicsContactListener;
})();

PhysicsContactListener.MaxDebugContactPoints = 2048;

exports["default"] = PhysicsContactListener;
module.exports = exports["default"];

},{"../Vector2D":67,"./CollisionEvent":117,"./ContactPointState":118,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/interop-require-default":11,"box2dweb":37}],129:[function(require,module,exports){
"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _PhysicsContactListener = require("./PhysicsContactListener");

var _PhysicsContactListener2 = _interopRequireDefault(_PhysicsContactListener);

var _Engine = require("../Engine");

var _EntityFixture = require("./EntityFixture");

var _EntityFixture2 = _interopRequireDefault(_EntityFixture);

var _inputMouseEvent = require("../input/MouseEvent");

var _inputMouseEvent2 = _interopRequireDefault(_inputMouseEvent);

var _ContactPointState = require("./ContactPointState");

var _ContactPointState2 = _interopRequireDefault(_ContactPointState);

var _Vector2D = require("../Vector2D");

var _Vector2D2 = _interopRequireDefault(_Vector2D);

var _box2dweb = require("box2dweb");

var _box2dweb2 = _interopRequireDefault(_box2dweb);

var PXVector2D = _box2dweb2["default"].Common.Math.b2Vec2;
var PXColor = _box2dweb2["default"].Common.b2Color;
var PXAABB = _box2dweb2["default"].Collision.b2AABB;
var PXBody = _box2dweb2["default"].Dynamics.b2Body;
var PXDebugDraw = _box2dweb2["default"].Dynamics.b2DebugDraw;
var PXMouseJointDef = _box2dweb2["default"].Dynamics.Joints.b2MouseJointDef;

var PhysicsController = (function () {
	function PhysicsController(surface) {
		_classCallCheck(this, PhysicsController);

		this.surface = surface;
		this.contactListener = new _PhysicsContactListener2["default"](this);
		this.isInteractionEnabled = false;
		this.isDebugDrawingEnabled = false;
		this.mousePosition = new PXVector2D(0, 0);
		this.mouseJoint = null;
		this.mouseDown = false;
		this.selectedBody = null;
		this.debugDraw = null;
		this.debugDrawContactPoints = false;
		this.debugCanvas = null;
		this.defaultUnit = 1.0;
		this.scalePixel = 1.0;
		this.scaleUnit = 1.0;
		this.entities = [];
		this.entitiesDestroyed = [];

		this.setup();
	}

	PhysicsController.prototype.getContactPointDebuggingEnabled = function getContactPointDebuggingEnabled() {
		return this.isDebugDrawingEnabled && this.debugDrawContactPoints;
	};

	PhysicsController.prototype.getDefaultUnit = function getDefaultUnit() {
		return this.defaultUnit;
	};

	PhysicsController.prototype.setDefaultUnit = function setDefaultUnit(value) {
		this.defaultUnit = value;
	};

	PhysicsController.prototype.getScaleUnit = function getScaleUnit() {
		return this.scaleUnit;
	};

	PhysicsController.prototype.getScalePixel = function getScalePixel() {
		return this.scalePixel;
	};

	PhysicsController.prototype.getGravity = function getGravity() {
		return this.getWorld().GetGravity();
	};

	PhysicsController.prototype.setGravity = function setGravity(value) {
		this.getWorld().SetGravity(value);
	};

	PhysicsController.prototype.getIsInteractionEnabled = function getIsInteractionEnabled() {
		return this.isInteractionEnabled;
	};

	PhysicsController.prototype.setIsInteractionEnabled = function setIsInteractionEnabled(value) {
		this.isInteractionEnabled = value;
	};

	PhysicsController.prototype.getIsDebugDrawingEnabled = function getIsDebugDrawingEnabled() {
		return this.isDebugDrawingEnabled;
	};

	PhysicsController.prototype.setIsDebugDrawingEnabled = function setIsDebugDrawingEnabled(value) {
		this.isDebugDrawingEnabled = value;
	};

	PhysicsController.prototype.getWorld = function getWorld() {
		return this.surface.getPhysicsWorld();
	};

	PhysicsController.prototype.getDebugCanvas = function getDebugCanvas() {
		return this.debugCanvas;
	};

	PhysicsController.prototype.addEntity = function addEntity(entity) {
		if (!this.entities.contains(entity)) {
			this.entities.push(entity);
		}
	};

	PhysicsController.prototype.removeEntity = function removeEntity(entity, autoDestroy) {
		autoDestroy = _Engine.ValueOrDefault(autoDestroy, false);

		if (entity == null) {
			return;
		}

		var idx = this.entities.indexOf(entity);

		if (idx != -1) {
			this.entities.removeAt(idx);
		}

		if (autoDestroy) {
			if (!this.entitiesDestroyed.contains(entity)) {
				this.entitiesDestroyed.push(entity);
			}
		}
	};

	PhysicsController.prototype.destroyEntities = function destroyEntities() {
		var len = this.entities.length;

		for (var i = len - 1; i >= 0; i--) {
			// force unlinking
			this.entities[i].unlink(true);

			// perform any other teardown
			this.entities[i].destroy();
		}

		this.entities = [];
	};

	PhysicsController.prototype.resetEntities = function resetEntities() {
		var len = this.entities.length;

		for (var i = 0; i < len; ++i) {
			this.entities[i].reset();
		}
	};

	PhysicsController.prototype.updateEntities = function updateEntities(ratio) {
		// process contact events, this occurs after the physics timestep
		// this way, we dont have to worry about things reactions affecting
		// the current timestep and event callbacks can modify the world as
		// needed
		this.contactListener.process();

		var len = this.entities.length;

		for (var i = 0; i < len; ++i) {
			this.entities[i].update(ratio);
		}
	};

	PhysicsController.prototype.destroyEntityObjects = function destroyEntityObjects() {
		var len = this.entitiesDestroyed.length;
		var entity = null;

		for (var i = 0; i < len; ++i) {
			entity = this.entitiesDestroyed[i];

			if (entity instanceof _EntityFixture2["default"]) {
				entity.fixture.SetUserData(null);
				entity.fixture.GetBody().DestroyFixture(entity.fixture);
				entity.fixture = null;
			} else {
				entity.body.SetUserData(null);
				this.getWorld().DestroyBody(entity.body);
				entity.body = null;
			}
		}

		this.entitiesDestroyed = [];
	};

	PhysicsController.prototype.setup = function setup() {
		this.getWorld().SetContactListener(this.contactListener);

		this.surface.addEventHandler(_inputMouseEvent2["default"].MOUSE_DOWN, this.handleMouseDown.asDelegate(this));
		this.surface.addEventHandler(_inputMouseEvent2["default"].MOUSE_UP, this.handleMouseUp.asDelegate(this));
		this.surface.addEventHandler(_inputMouseEvent2["default"].MOUSE_UP_OUTSIDE, this.handleMouseUp.asDelegate(this));
		this.surface.addEventHandler(_inputMouseEvent2["default"].MOUSE_MOVE, this.handleMouseMove.asDelegate(this));
	};

	PhysicsController.prototype.reset = function reset() {
		this.contactListener.resetDebugContactPoints();
	};

	PhysicsController.prototype.toggleDebugDrawing = function toggleDebugDrawing(key, value) {
		if (this.debugDraw == null) {
			return;
		}

		var flags = -1;

		switch (key) {
			case "shape":
				flags = PXDebugDraw.e_shapeBit;
				break;
			case "joint":
				flags = PXDebugDraw.e_jointBit;
				break;
			case "aabb":
				flags = PXDebugDraw.e_aabbBit;
				break;
			case "pair":
				flags = PXDebugDraw.e_pairBit;
				break;
			case "mass":
				flags = PXDebugDraw.e_centerOfMassBit;
				break;
			case "contacts":
				this.debugDrawContactPoints = value;
				return;
		}

		this.debugDraw[value ? "AppendFlags" : "ClearFlags"](flags);
	};

	PhysicsController.prototype.updateSettings = function updateSettings() {
		var nativeCanvas = this.surface.getNativeCanvas();

		if (nativeCanvas == null) {
			return;
		}

		var world = this.getWorld();

		this.scalePixel = this.defaultUnit;
		this.scaleUnit = 1 / this.defaultUnit;

		if (this.isDebugDrawingEnabled) {
			// create the initial contact array
			this.contactListener.initializeDebugContactPoints();

			// create a canvas exactly the same size, so we can overlay it on top
			this.debugCanvas = document.createElement("canvas");
			this.debugCanvas.width = nativeCanvas.width;
			this.debugCanvas.height = nativeCanvas.height;

			// update the debug draw
			if (this.debugDraw == null) {
				this.debugDraw = new PXDebugDraw();
				this.debugDraw.SetSprite(this.debugCanvas.getContext("2d"));
				this.debugDraw.SetFillAlpha(0.5);
				this.debugDraw.SetLineThickness(1);
				this.debugDraw.SetFlags(PXDebugDraw.e_shapeBit | PXDebugDraw.e_jointBit);

				world.SetDebugDraw(this.debugDraw);
			}

			this.debugDraw.SetDrawScale(this.scaleUnit);
			this.debugDraw.SetSprite(this.debugCanvas.getContext("2d"));
		}
	};

	PhysicsController.prototype.update = function update(ratio) {
		// draw any extra debugging info (i.e. contact points)
		this.drawDebugExtras();

		// update our entities
		this.updateEntities(ratio);

		// finally, destroy any entities that were flagged
		// in the previous timestep
		this.destroyEntityObjects();
	};

	PhysicsController.prototype.step = function step(t) {
		var world = this.surface.getPhysicsWorld();

		if (!this.isInteractionEnabled) {
			return;
		}

		if (this.mouseDown && this.mouseJoint == null) {
			var body = this.getBodyAtMouse();

			if (body != null) {
				var md = new PXMouseJointDef();
				md.bodyA = world.GetGroundBody();
				md.bodyB = body;
				md.target.Set(this.mousePosition.x, this.mousePosition.y);
				md.collideConnected = true;
				md.maxForce = 300.0 * body.GetMass();

				this.mouseJoint = world.CreateJoint(md);
				body.SetAwake(true);
			}
		}

		if (this.mouseJoint != null) {
			if (this.mouseDown) {
				this.mouseJoint.SetTarget(this.mousePosition);
			} else {
				world.DestroyJoint(this.mouseJoint);
				this.mouseJoint = null;
			}
		}
	};

	PhysicsController.prototype.drawDebugExtras = function drawDebugExtras() {
		if (!this.isDebugDrawingEnabled || !this.debugDrawContactPoints) {
			return;
		}

		var len = this.contactListener.debugContactPointCount;
		var cp = null;

		for (var i = 0; i < len; ++i) {
			cp = this.contactListener.debugContactPoints[i];

			if (cp.state == _ContactPointState2["default"].Add) {
				this.debugDraw.DrawSolidCircle(cp.position, 0.04, new PXVector2D(0, 0), new PXColor(0.3, 0.95, 0.3));
			} else if (cp.state == _ContactPointState2["default"].Persist) {
				this.debugDraw.DrawSolidCircle(cp.position, 0.04, new PXVector2D(0, 0), new PXColor(0.3, 0.3, 0.95));
			}

			var p1 = cp.position;
			var p2 = new PXVector2D(p1.x + 0.1 * cp.normal.x, p1.y + 0.1 * cp.normal.y);

			this.debugDraw.DrawSegment(p1, p2, new PXColor(0.9, 0.9, 0.9));
		}
	};

	PhysicsController.prototype.renderDebugData = function renderDebugData(gfx) {
		if (this.debugCanvas == null || !this.isDebugDrawingEnabled) {
			return;
		}

		gfx.drawImage(this.debugCanvas, 0, 0);
	};

	PhysicsController.prototype.convertPoint = function convertPoint(pt, isUnits, asUnits, asVector) {
		var vectorType = _Engine.ValueOrDefault(asVector, true) ? _Vector2D2["default"] : PXVector2D;
		var arr;

		if (isUnits && !asUnits) {
			arr = this.toPixels([pt.x, pt.y]);
			return this.getVectorTypeAs(vectorType, new _Vector2D2["default"](arr[0], arr[1]));
		}

		if (asUnits && !isUnits) {
			arr = this.toUnits([pt.x, pt.y]);
			return this.getVectorTypeAs(vectorType, new _Vector2D2["default"](arr[0], arr[1]));
		}

		return this.getVectorTypeAs(vectorType, pt);
	};

	PhysicsController.prototype.getVectorTypeAs = function getVectorTypeAs(type, value) {
		if (value instanceof type) {
			return value;
		}

		return new type(value.x, value.y);
	};

	PhysicsController.prototype.toPixels = function toPixels(units) {
		var unitScale = this.getScaleUnit();

		if (!(units instanceof Array)) {
			return units * unitScale;
		}

		var len = units.length;
		var pixels = new Array(len);

		for (var i = 0; i < len; ++i) {
			pixels[i] = units[i] * unitScale;
		}

		return pixels;
	};

	PhysicsController.prototype.toUnits = function toUnits(pixels) {
		var pixelScale = this.getScalePixel();

		if (!(pixels instanceof Array)) {
			return pixels * pixelScale;
		}

		var len = pixels.length;
		var units = new Array(len);

		for (var i = 0; i < len; ++i) {
			units[i] = pixels[i] * pixelScale;
		}

		return units;
	};

	PhysicsController.prototype.getBodyAtMouse = function getBodyAtMouse() {
		var aabb = new PXAABB();
		var world = this.surface.getPhysicsWorld();

		aabb.lowerBound.Set(this.mousePosition.x - 0.001, this.mousePosition.y - 0.001);
		aabb.upperBound.Set(this.mousePosition.x + 0.001, this.mousePosition.y + 0.001);

		this.selectedBody = null;
		world.QueryAABB(this.getBody.bind(this), aabb);

		return this.selectedBody;
	};

	PhysicsController.prototype.getBody = function getBody(fixture) {
		if (fixture.GetBody().GetType() != PXBody.b2_staticBody) {
			if (fixture.GetShape().TestPoint(fixture.GetBody().GetTransform(), this.mousePosition)) {
				this.selectedBody = fixture.GetBody();
				return false;
			}
		}

		return true;
	};

	PhysicsController.prototype.handleMouseDown = function handleMouseDown(event) {
		this.mouseDown = true;
		this.handleMouseMove(event);
	};

	PhysicsController.prototype.handleMouseUp = function handleMouseUp(event) {
		this.mouseDown = false;
	};

	PhysicsController.prototype.handleMouseMove = function handleMouseMove(event) {
		var units = this.toUnits([event.x, event.y]);

		this.mousePosition.x = units[0];
		this.mousePosition.y = units[1];
	};

	return PhysicsController;
})();

exports["default"] = PhysicsController;
module.exports = exports["default"];

},{"../Engine":44,"../Vector2D":67,"../input/MouseEvent":106,"./ContactPointState":118,"./EntityFixture":122,"./PhysicsContactListener":128,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/interop-require-default":11,"box2dweb":37}],130:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _UnicodeCategoryData = require("./UnicodeCategoryData");

var _UnicodeCategoryData2 = _interopRequireDefault(_UnicodeCategoryData);

var _UnicodeCategory = require("./UnicodeCategory");

var _UnicodeCategory2 = _interopRequireDefault(_UnicodeCategory);

var Char = {
	getUnicodeCategory: function getUnicodeCategory(ch) {
		return _UnicodeCategoryData2["default"].CategoryData[ch.charCodeAt(0)];
	},

	getNumericValue: function getNumericValue(ch) {
		if (ch > 0x3289) {
			if (ch >= 0xff10 && ch <= 0xff19) {
				return ch - 0xff10;
			}

			return -1;
		}

		return _UnicodeCategoryData2["default"].NumericDataValues[_UnicodeCategoryData2["default"].NumericData[ch.charCodeAt(0)]];
	},

	isLetter: function isLetter(ch) {
		return this.getUnicodeCategory(ch) <= _UnicodeCategory2["default"].OtherLetter;
	},

	isLetterOrDigit: function isLetterOrDigit(ch) {
		return this.isLetter(ch) || this.isDigit(ch);
	},

	isDigit: function isDigit(ch) {
		return this.getUnicodeCategory(ch) == _UnicodeCategory2["default"].DecimalDigitNumber;
	},

	isNumber: function isNumber(ch) {
		var category = this.getUnicodeCategory(ch);

		return category >= _UnicodeCategory2["default"].DecimalDigitNumber && category <= _UnicodeCategory2["default"].OtherNumber;
	},

	isControl: function isControl(ch) {
		return this.getUnicodeCategory(ch) == _UnicodeCategory2["default"].Control;
	},

	isWhiteSpace: function isWhiteSpace(ch) {
		var category = this.getUnicodeCategory(ch);

		if (category <= _UnicodeCategory2["default"].OtherNumber) {
			return false;
		}

		if (category <= _UnicodeCategory2["default"].ParagraphSeparator) {
			return true;
		}

		return ch >= 0x09 && ch <= 0x0d || ch == 0x85 || ch == 0x205f;
	},

	isPunctuation: function isPunctuation(ch) {
		var category = this.getUnicodeCategory(ch);

		return category >= _UnicodeCategory2["default"].ConnectorPunctuation && category <= _UnicodeCategory2["default"].OtherPunctuation;
	},

	isSymbol: function isSymbol(ch) {
		var category = this.getUnicodeCategory(ch);

		return category >= _UnicodeCategory2["default"].MathSymbol && category <= _UnicodeCategory2["default"].OtherSymbol;
	},

	isSeparator: function isSeparator(ch) {
		var category = this.getUnicodeCategory(ch);

		return category >= _UnicodeCategory2["default"].SpaceSeparator && category <= _UnicodeCategory2["default"].ParagraphSeparator;
	},

	isLower: function isLower(ch) {
		return this.getUnicodeCategory(ch) == _UnicodeCategory2["default"].LowercaseLetter;
	},

	isUpper: function isUpper(ch) {
		return this.getUnicodeCategory(ch) == _UnicodeCategory2["default"].UppercaseLetter;
	},

	isSurrogate: function isSurrogate(ch) {
		return this.getUnicodeCategory(ch) == _UnicodeCategory2["default"].Surrogate;
	},

	isSurrogatePair: function isSurrogatePair(lowSurrogate, highSurrogate) {
		return "�" <= highSurrogate && highSurrogate <= "�" && "�" <= lowSurrogate && lowSurrogate <= "�";
	},

	isLowSurrogate: function isLowSurrogate(ch) {
		return ch >= "�" && ch <= "�";
	},

	isHighSurrogate: function isHighSurrogate(ch) {
		return ch >= "�" && ch <= "�";
	}
};

exports["default"] = Char;
module.exports = exports["default"];

},{"./UnicodeCategory":132,"./UnicodeCategoryData":133,"babel-runtime/helpers/interop-require-default":11}],131:[function(require,module,exports){
"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Engine = require("../Engine");

var _Char = require("./Char");

var _Char2 = _interopRequireDefault(_Char);

var StringTokenizer = (function () {
	function StringTokenizer(str, quote, separator) {
		_classCallCheck(this, StringTokenizer);

		this.chQuote = _Engine.ValueOrDefault(quote, "'");
		this.chSeparator = _Engine.ValueOrDefault(separator, ",");
		this.chIndex = 0;
		this.str = str;
		this.strLen = str == null ? 0 : str.length;
		this.tokenIndex = -1;
		this.tokenLength = 0;
		this.hasSeparator = false;

		while (this.chIndex < this.strLen && _Char2["default"].isWhiteSpace(this.str.charAt(this.chIndex))) {
			++this.chIndex;
		}
	}

	StringTokenizer.prototype.isComplete = function isComplete() {
		return this.chIndex == this.strLen;
	};

	StringTokenizer.prototype.getCurrent = function getCurrent() {
		if (this.tokenIndex < 0) {
			return null;
		}

		return this.str.substr(this.tokenIndex, this.tokenLength);
	};

	StringTokenizer.prototype.next = function next(isQuotedTokenAllowed) {
		this.moveNext(_Engine.ValueOrDefault(isQuotedTokenAllowed, false));

		return this.getCurrent();
	};

	StringTokenizer.prototype.moveNext = function moveNext(isQuotedTokenAllowed) {
		this.resetToken();

		if (!this.canMoveForward()) {
			return false;
		}

		var ch = this.str.charAt(this.chIndex);
		var noMatchingQuote = false;

		if (isQuotedTokenAllowed && ch == this.chQuote) {
			noMatchingQuote = true;
			++this.chIndex;
		}

		var idx = this.chIndex;
		var len = 0;

		while (this.canMoveForward()) {
			ch = this.str.charAt(this.chIndex);

			if (noMatchingQuote) {
				if (ch == this.chQuote) {
					noMatchingQuote = false;
					++this.chIndex;
					break;
				}
			} else if (_Char2["default"].isWhiteSpace(ch) || ch == this.chSeparator) {
				if (ch == this.chSeparator) {
					this.hasSeparator = true;
					break;
				}

				break;
			}

			++this.chIndex;
			++len;
		}

		if (noMatchingQuote) {
			throw new Error("Unable to move to next token, missing ending quote.");
		}

		this.skipToNext();
		this.tokenIndex = idx;
		this.tokenLength = len;

		if (this.tokenLength > 0) {
			return true;
		}

		throw new Error("Unable to move to next token, token is empty.");
	};

	StringTokenizer.prototype.skipToNext = function skipToNext() {

		if (!this.canMoveForward()) {
			return;
		}

		var ch = this.str.charAt(this.chIndex);

		if (ch != this.chSeparator && !_Char2["default"].isWhiteSpace(ch)) {
			throw new Error("Unable to move to next token, invalid data found.");
		}

		var tokCount = 0;

		while (this.canMoveForward()) {
			ch = this.str.charAt(this.chIndex);

			if (ch == this.chSeparator) {
				this.hasSeparator = true;
				++tokCount;
				++this.chIndex;

				if (tokCount > 1) {
					break;
				}

				continue;
			} else if (_Char2["default"].isWhiteSpace(ch)) {
				++this.chIndex;
				continue;
			}

			break;
		}

		if (tokCount <= 0 || this.canMoveForward()) {
			return;
		}

		throw new Error("Unable to move to next token, token is empty");
	};

	StringTokenizer.prototype.canMoveForward = function canMoveForward() {
		return this.chIndex < this.strLen;
	};

	StringTokenizer.prototype.resetToken = function resetToken() {
		this.hasSeparator = false;
		this.tokenIndex = -1;
	};

	return StringTokenizer;
})();

exports["default"] = StringTokenizer;
module.exports = exports["default"];

},{"../Engine":44,"./Char":130,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/interop-require-default":11}],132:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var UnicodeCategory = {
	"UppercaseLetter": 0,
	"LowercaseLetter": 1,
	"TitlecaseLetter": 2,
	"ModifierLetter": 3,
	"OtherLetter": 4,
	"NonSpacingMark": 5,
	"SpacingCombiningMark": 6,
	"EnclosingMark": 7,
	"DecimalDigitNumber": 8,
	"LetterNumber": 9,
	"OtherNumber": 10,
	"SpaceSeparator": 11,
	"LineSeparator": 12,
	"ParagraphSeparator": 13,
	"Control": 14,
	"Format": 15,
	"Surrogate": 16,
	"PrivateUse": 17,
	"ConnectorPunctuation": 18,
	"DashPunctuation": 19,
	"OpenPunctuation": 20,
	"ClosePunctuation": 21,
	"InitialQuotePunctuation": 22,
	"FinalQuotePunctuation": 23,
	"OtherPunctuation": 24,
	"MathSymbol": 25,
	"CurrencySymbol": 26,
	"ModifierSymbol": 27,
	"OtherSymbol": 28,
	"OtherNotAssigned": 29
};

exports["default"] = UnicodeCategory;
module.exports = exports["default"];

},{}],133:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var UnicodeCategoryData = {

       CategoryData: [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 11, 24, 24, 24, 26, 24, 24, 24, 20, 21, 24, 25, 24, 19, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 24, 24, 25, 25, 25, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 24, 21, 27, 18, 27, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 25, 21, 25, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 11, 24, 26, 26, 26, 26, 28, 28, 27, 28, 1, 22, 25, 19, 28, 27, 28, 25, 10, 10, 27, 1, 28, 24, 27, 10, 1, 23, 10, 10, 10, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 25, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 4, 0, 1, 1, 1, 4, 4, 4, 4, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 29, 29, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 27, 27, 3, 3, 3, 3, 3, 3, 3, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 3, 3, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 3, 3, 3, 3, 3, 27, 27, 27, 27, 27, 27, 27, 27, 27, 3, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 5, 5, 5, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 27, 27, 29, 29, 29, 29, 3, 29, 29, 29, 24, 29, 29, 29, 29, 29, 27, 27, 0, 24, 0, 0, 0, 29, 0, 29, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 29, 1, 1, 0, 0, 0, 1, 1, 1, 29, 29, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 28, 5, 5, 5, 5, 29, 7, 7, 29, 29, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 29, 29, 0, 1, 29, 29, 0, 1, 29, 29, 29, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 29, 29, 0, 1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 29, 3, 24, 24, 24, 24, 24, 24, 29, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 29, 24, 19, 29, 29, 29, 29, 29, 29, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 29, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 29, 5, 5, 5, 24, 5, 24, 5, 5, 24, 5, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 29, 29, 29, 4, 4, 4, 24, 24, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 24, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 24, 29, 29, 29, 24, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 29, 29, 29, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 24, 24, 24, 24, 29, 29, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 24, 4, 5, 5, 5, 5, 5, 5, 5, 7, 7, 5, 5, 5, 5, 5, 5, 3, 3, 5, 5, 28, 5, 5, 5, 5, 29, 29, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 28, 28, 29, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 29, 15, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 29, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 5, 5, 6, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 5, 4, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 5, 29, 29, 4, 5, 5, 5, 5, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 24, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 5, 6, 6, 29, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 4, 4, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 4, 4, 4, 4, 29, 4, 29, 29, 29, 4, 4, 4, 4, 29, 29, 5, 29, 6, 6, 6, 5, 5, 5, 5, 29, 29, 6, 6, 29, 29, 6, 6, 5, 29, 29, 29, 29, 29, 29, 29, 29, 29, 6, 29, 29, 29, 29, 4, 4, 29, 4, 4, 4, 5, 5, 29, 29, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 26, 26, 10, 10, 10, 10, 10, 10, 28, 29, 29, 29, 29, 29, 29, 29, 5, 29, 29, 4, 4, 4, 4, 4, 4, 29, 29, 29, 29, 4, 4, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 29, 4, 4, 29, 4, 4, 29, 29, 5, 29, 6, 6, 6, 5, 5, 29, 29, 29, 29, 5, 5, 29, 29, 5, 5, 5, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 4, 4, 4, 4, 29, 4, 29, 29, 29, 29, 29, 29, 29, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 4, 4, 4, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 5, 5, 6, 29, 4, 4, 4, 4, 4, 4, 4, 29, 4, 29, 4, 4, 4, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 29, 4, 4, 4, 4, 4, 29, 29, 5, 4, 6, 6, 6, 5, 5, 5, 5, 5, 29, 5, 5, 6, 29, 6, 6, 5, 29, 29, 4, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 4, 29, 29, 29, 29, 29, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 5, 6, 6, 29, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 4, 4, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 29, 29, 4, 4, 4, 4, 29, 29, 5, 4, 6, 5, 6, 5, 5, 5, 29, 29, 29, 6, 6, 29, 29, 6, 6, 5, 29, 29, 29, 29, 29, 29, 29, 29, 5, 6, 29, 29, 29, 29, 4, 4, 29, 4, 4, 4, 29, 29, 29, 29, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 5, 6, 29, 4, 4, 4, 4, 4, 4, 29, 29, 29, 4, 4, 4, 29, 4, 4, 4, 4, 29, 29, 29, 4, 4, 29, 4, 29, 4, 4, 29, 29, 29, 4, 4, 29, 29, 29, 4, 4, 4, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 29, 29, 29, 29, 6, 6, 5, 6, 6, 29, 29, 29, 6, 6, 6, 29, 6, 6, 6, 5, 29, 29, 29, 29, 29, 29, 29, 29, 29, 6, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 6, 6, 6, 29, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 4, 4, 29, 29, 29, 29, 5, 5, 5, 6, 6, 6, 6, 29, 5, 5, 5, 29, 5, 5, 5, 5, 29, 29, 29, 29, 29, 29, 29, 5, 5, 29, 29, 29, 29, 29, 29, 29, 29, 29, 4, 4, 29, 29, 29, 29, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 6, 6, 29, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 4, 4, 29, 29, 29, 29, 6, 5, 6, 6, 6, 6, 6, 29, 5, 6, 6, 29, 6, 6, 5, 5, 29, 29, 29, 29, 29, 29, 29, 6, 6, 29, 29, 29, 29, 29, 29, 29, 4, 29, 4, 4, 29, 29, 29, 29, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 6, 6, 29, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 29, 29, 6, 6, 6, 5, 5, 5, 29, 29, 6, 6, 6, 29, 6, 6, 6, 5, 29, 29, 29, 29, 29, 29, 29, 29, 29, 6, 29, 29, 29, 29, 29, 29, 29, 29, 4, 4, 29, 29, 29, 29, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 6, 6, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 29, 29, 4, 4, 4, 4, 4, 4, 4, 29, 29, 29, 5, 29, 29, 29, 29, 6, 6, 6, 5, 5, 5, 29, 5, 29, 6, 6, 6, 6, 6, 6, 6, 6, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 6, 6, 24, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 5, 5, 5, 5, 5, 5, 29, 29, 29, 29, 26, 4, 4, 4, 4, 4, 4, 3, 5, 5, 5, 5, 5, 5, 5, 5, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 24, 24, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 4, 4, 29, 4, 29, 29, 4, 4, 29, 4, 29, 29, 4, 29, 29, 29, 29, 29, 29, 4, 4, 4, 4, 29, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 29, 4, 29, 4, 29, 29, 4, 4, 29, 4, 4, 4, 4, 5, 4, 4, 5, 5, 5, 5, 5, 5, 29, 5, 5, 4, 29, 29, 4, 4, 4, 4, 4, 29, 3, 29, 5, 5, 5, 5, 5, 5, 29, 29, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 29, 29, 4, 4, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 4, 28, 28, 28, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 28, 28, 28, 28, 28, 5, 5, 28, 28, 28, 28, 28, 28, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 28, 5, 28, 5, 28, 5, 20, 21, 20, 21, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 29, 29, 29, 29, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 24, 5, 5, 4, 4, 4, 4, 29, 29, 29, 29, 5, 5, 5, 5, 5, 5, 5, 5, 29, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 29, 28, 28, 28, 28, 28, 28, 28, 28, 5, 28, 28, 28, 28, 28, 28, 29, 29, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 4, 4, 29, 4, 4, 29, 6, 5, 5, 5, 5, 6, 5, 29, 29, 29, 5, 5, 6, 5, 29, 29, 29, 29, 29, 29, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 24, 24, 24, 24, 24, 24, 4, 4, 4, 4, 4, 4, 6, 6, 5, 5, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 29, 29, 24, 29, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 29, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 29, 4, 4, 4, 4, 29, 29, 4, 4, 4, 4, 4, 4, 4, 29, 4, 29, 4, 4, 4, 4, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 29, 4, 4, 4, 4, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 29, 4, 4, 4, 4, 29, 29, 4, 4, 4, 4, 4, 4, 4, 29, 4, 29, 4, 4, 4, 4, 29, 29, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 29, 4, 4, 4, 4, 29, 29, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 29, 29, 29, 29, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 24, 24, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 29, 29, 29, 29, 29, 29, 29, 11, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 20, 21, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 24, 24, 24, 10, 10, 10, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 24, 24, 24, 24, 24, 24, 24, 26, 24, 29, 29, 29, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 24, 24, 24, 24, 24, 24, 19, 24, 24, 24, 24, 15, 15, 15, 15, 29, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 29, 29, 29, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29, 29, 29, 29, 29, 29, 29, 29, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 29, 29, 29, 29, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 29, 29, 29, 29, 29, 29, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 29, 29, 0, 0, 0, 0, 0, 0, 29, 29, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 29, 29, 0, 0, 0, 0, 0, 0, 29, 29, 1, 1, 1, 1, 1, 1, 1, 1, 29, 0, 29, 0, 29, 0, 29, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 29, 29, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 29, 1, 1, 0, 0, 0, 0, 2, 27, 1, 27, 27, 27, 1, 1, 1, 29, 1, 1, 0, 0, 0, 0, 2, 27, 27, 27, 1, 1, 1, 1, 29, 29, 1, 1, 0, 0, 0, 0, 29, 27, 27, 27, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 27, 27, 27, 29, 29, 1, 1, 1, 29, 1, 1, 0, 0, 0, 0, 2, 27, 27, 29, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 15, 15, 15, 15, 19, 19, 19, 19, 19, 19, 24, 24, 22, 23, 20, 22, 22, 23, 20, 22, 24, 24, 24, 24, 24, 24, 24, 24, 12, 13, 15, 15, 15, 15, 15, 11, 24, 24, 24, 24, 24, 24, 24, 24, 24, 22, 23, 24, 24, 24, 24, 18, 18, 24, 24, 24, 25, 20, 21, 29, 24, 24, 24, 24, 24, 24, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 15, 15, 15, 15, 15, 15, 10, 29, 29, 29, 10, 10, 10, 10, 10, 10, 25, 25, 25, 20, 21, 1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 25, 25, 25, 20, 21, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 5, 7, 7, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 28, 28, 0, 28, 28, 28, 28, 0, 28, 28, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 28, 0, 28, 28, 28, 0, 0, 0, 0, 0, 28, 28, 28, 28, 28, 28, 0, 28, 0, 28, 0, 28, 0, 0, 0, 0, 28, 1, 0, 0, 28, 0, 1, 4, 4, 4, 4, 1, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 25, 25, 25, 25, 25, 28, 28, 28, 28, 28, 25, 25, 28, 28, 28, 28, 25, 28, 28, 25, 28, 28, 25, 28, 28, 28, 28, 28, 28, 28, 25, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 25, 25, 28, 28, 25, 28, 25, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 28, 28, 28, 28, 28, 28, 28, 28, 25, 25, 25, 25, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 25, 25, 28, 28, 28, 28, 28, 28, 28, 20, 21, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 10, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 25, 28, 28, 28, 28, 28, 28, 28, 28, 28, 25, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 25, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 28, 28, 28, 28, 29, 28, 28, 28, 28, 29, 29, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 28, 29, 28, 28, 28, 28, 29, 29, 29, 28, 29, 28, 28, 28, 28, 28, 28, 28, 29, 29, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 28, 29, 29, 29, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 2957, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 0, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 1, 2, 3, 4, 5, 6, 7, 8, 9, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 10, 20, 21, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 1, 2, 3, 4, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],

       NumericDataValues: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 30, 40, 50, 60, 70, 80, 90, 100, 500, 1000, 5000, 10000, 1 / 2, 3 / 2, 5 / 2, 7 / 2, 9 / 2, 11 / 2, 13 / 2, 15 / 2, 17 / 2, 1 / 3, 2 / 3, 1 / 4, 3 / 4, 1 / 5, 2 / 5, 3 / 5, 4 / 5, 1 / 6, 5 / 6, 1 / 8, 3 / 8, 5 / 8, 7 / 8, -1 / 2, -1]
};

exports["default"] = UnicodeCategoryData;
module.exports = exports["default"];

},{}],134:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Transform2 = require("./Transform");

var _Transform3 = _interopRequireDefault(_Transform2);

var _Engine = require("../Engine");

var _uiPropertyOptions = require("../ui/PropertyOptions");

var _uiPropertyOptions2 = _interopRequireDefault(_uiPropertyOptions);

var _Matrix2D = require("../Matrix2D");

var _Matrix2D2 = _interopRequireDefault(_Matrix2D);

var RotateTransform = (function (_Transform) {
	_inherits(RotateTransform, _Transform);

	function RotateTransform(angle, centerX, centerY) {
		_classCallCheck(this, RotateTransform);

		_Transform.call(this);

		this.setAngle(_Engine.ValueOrDefault(angle, 0));
		this.setCenterX(_Engine.ValueOrDefault(centerX, 0));
		this.setCenterY(_Engine.ValueOrDefault(centerY, 0));
	}

	RotateTransform.prototype.initializeAnimatablePropertiesCore = function initializeAnimatablePropertiesCore() {
		_Transform.prototype.initializeAnimatablePropertiesCore.call(this);

		this.enableAnimatableProperty("angle", this.getAngle, this.setAngle, _uiPropertyOptions2["default"].AffectsLayout | _uiPropertyOptions2["default"].AffectsMeasure);
		this.enableAnimatableProperty("centerX", this.getCenterX, this.setCenterX, _uiPropertyOptions2["default"].AffectsLayout | _uiPropertyOptions2["default"].AffectsMeasure);
		this.enableAnimatableProperty("centerY", this.getCenterY, this.setCenterY, _uiPropertyOptions2["default"].AffectsLayout | _uiPropertyOptions2["default"].AffectsMeasure);
	};

	RotateTransform.prototype.getValue = function getValue() {
		var mx = _Matrix2D2["default"].createIdentity();
		mx.rotateAt(this.getAngle(), this.getCenterX(), this.getCenterY());

		return mx;
	};

	RotateTransform.prototype.getAngle = function getAngle() {
		return this.getPropertyValue("angle");
	};

	RotateTransform.prototype.setAngle = function setAngle(value) {
		this.setPropertyValue("angle", value);
	};

	RotateTransform.prototype.getCenterX = function getCenterX() {
		return this.getPropertyValue("centerX");
	};

	RotateTransform.prototype.setCenterX = function setCenterX(value) {
		this.setPropertyValue("centerX", value);
	};

	RotateTransform.prototype.getCenterY = function getCenterY() {
		return this.getPropertyValue("centerY");
	};

	RotateTransform.prototype.setCenterY = function setCenterY(value) {
		this.setPropertyValue("centerY", value);
	};

	RotateTransform.prototype.isEqualTo = function isEqualTo(other) {
		return this.getAngle() == other.getAngle() && this.getCenterX() == other.getCenterX() && this.getCenterY() == other.getCenterY();
	};

	return RotateTransform;
})(_Transform3["default"]);

exports["default"] = RotateTransform;
module.exports = exports["default"];

},{"../Engine":44,"../Matrix2D":54,"../ui/PropertyOptions":156,"./Transform":136,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],135:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Transform2 = require("./Transform");

var _Transform3 = _interopRequireDefault(_Transform2);

var _uiPropertyOptions = require("../ui/PropertyOptions");

var _uiPropertyOptions2 = _interopRequireDefault(_uiPropertyOptions);

var _Engine = require("../Engine");

var _Matrix2D = require("../Matrix2D");

var _Matrix2D2 = _interopRequireDefault(_Matrix2D);

var ScaleTransform = (function (_Transform) {
	_inherits(ScaleTransform, _Transform);

	function ScaleTransform(scaleX, scaleY, centerX, centerY) {
		_classCallCheck(this, ScaleTransform);

		_Transform.call(this);

		this.setScaleX(_Engine.ValueOrDefault(scaleX, 1));
		this.setScaleY(_Engine.ValueOrDefault(scaleY, 1));
		this.setCenterX(_Engine.ValueOrDefault(centerX, 0));
		this.setCenterY(_Engine.ValueOrDefault(centerY, 0));
	}

	ScaleTransform.prototype.initializeAnimatablePropertiesCore = function initializeAnimatablePropertiesCore() {
		_Transform.prototype.initializeAnimatablePropertiesCore.call(this);

		this.enableAnimatableProperty("scaleX", this.getScaleX, this.setScaleX, _uiPropertyOptions2["default"].AffectsMeasure | _uiPropertyOptions2["default"].AffectsLayout);
		this.enableAnimatableProperty("scaleY", this.getScaleY, this.setScaleY, _uiPropertyOptions2["default"].AffectsMeasure | _uiPropertyOptions2["default"].AffectsLayout);
		this.enableAnimatableProperty("centerX", this.getCenterX, this.setCenterX, _uiPropertyOptions2["default"].AffectsMeasure | _uiPropertyOptions2["default"].AffectsLayout);
		this.enableAnimatableProperty("centerY", this.getCenterY, this.setCenterY, _uiPropertyOptions2["default"].AffectsMeasure | _uiPropertyOptions2["default"].AffectsLayout);
	};

	ScaleTransform.prototype.getValue = function getValue() {
		var mx = _Matrix2D2["default"].createIdentity();
		mx.scaleAt(this.getScaleX(), this.getScaleY(), this.getCenterX(), this.getCenterY());

		return mx;
	};

	ScaleTransform.prototype.transformRect = function transformRect(rect) {
		if (!rect.isEmpty()) {
			var hasCenterPoint = this.getCenterX() != 0 || this.getCenterY() != 0;

			if (hasCenterPoint) {
				rect.x -= this.getCenterX();
				rect.y -= this.getCenterY();
			}

			rect.scale(this.getScaleX(), this.getScaleY());

			if (hasCenterPoint) {
				rect.x += this.getCenterX();
				rect.y += this.getCenterY();
			}
		}

		return rect;
	};

	ScaleTransform.prototype.getScaleX = function getScaleX() {
		return this.getPropertyValue("scaleX");
	};

	ScaleTransform.prototype.setScaleX = function setScaleX(value) {
		this.setPropertyValue("scaleX", value);
	};

	ScaleTransform.prototype.getScaleY = function getScaleY() {
		return this.getPropertyValue("scaleY");
	};

	ScaleTransform.prototype.setScaleY = function setScaleY(value) {
		this.setPropertyValue("scaleY", value);
	};

	ScaleTransform.prototype.getCenterX = function getCenterX() {
		return this.getPropertyValue("centerX");
	};

	ScaleTransform.prototype.setCenterX = function setCenterX(value) {
		this.setPropertyValue("centerX", value);
	};

	ScaleTransform.prototype.getCenterY = function getCenterY() {
		return this.getPropertyValue("centerY");
	};

	ScaleTransform.prototype.setCenterY = function setCenterY(value) {
		this.setPropertyValue("centerY", value);
	};

	ScaleTransform.prototype.isEqualTo = function isEqualTo(other) {
		return this.getCenterX() == other.getCenterX() && this.getCenterY() == other.getCenterY() && this.getScaleX() == other.getScaleX() && this.getScaleY() == other.getScaleY();
	};

	return ScaleTransform;
})(_Transform3["default"]);

exports["default"] = ScaleTransform;
module.exports = exports["default"];

},{"../Engine":44,"../Matrix2D":54,"../ui/PropertyOptions":156,"./Transform":136,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],136:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _EventDispatcher = require("../EventDispatcher");

var _EventDispatcher2 = _interopRequireDefault(_EventDispatcher);

var _Matrix2D = require("../Matrix2D");

var _Matrix2D2 = _interopRequireDefault(_Matrix2D);

var _animationAnimatable = require("../animation/Animatable");

var _animationAnimatable2 = _interopRequireDefault(_animationAnimatable);

var _Engine = require("../Engine");

var Mixed = _Engine.Mixin(_EventDispatcher2["default"], _animationAnimatable2["default"]);

var Transform = (function (_Mixed) {
	_inherits(Transform, _Mixed);

	function Transform() {
		_classCallCheck(this, Transform);

		_Mixed.call(this);

		/** Matrix2D **/
		this.identity = _Matrix2D2["default"].createIdentity();

		this.initializeAnimatableProperties();
	}

	Transform.prototype.getValue = function getValue() {
		/** override **/
		return this.identity;
	};

	Transform.prototype.transformPoint = function transformPoint(point) {
		return this.getValue().transformPoint(point);
	};

	Transform.prototype.transformRect = function transformRect(rect) {
		return this.getValue().transformRect(rect);
	};

	return Transform;
})(Mixed);

exports["default"] = Transform;
module.exports = exports["default"];

},{"../Engine":44,"../EventDispatcher":48,"../Matrix2D":54,"../animation/Animatable":70,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],137:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Transform2 = require("./Transform");

var _Transform3 = _interopRequireDefault(_Transform2);

var _Engine = require("../Engine");

var _uiPropertyOptions = require("../ui/PropertyOptions");

var _uiPropertyOptions2 = _interopRequireDefault(_uiPropertyOptions);

var _Matrix2D = require("../Matrix2D");

var _Matrix2D2 = _interopRequireDefault(_Matrix2D);

var TranslateTransform = (function (_Transform) {
	_inherits(TranslateTransform, _Transform);

	function TranslateTransform(x, y) {
		_classCallCheck(this, TranslateTransform);

		_Transform.call(this);

		this.setX(_Engine.ValueOrDefault(x, 0));
		this.setY(_Engine.ValueOrDefault(y, 0));
	}

	TranslateTransform.prototype.initializeAnimatablePropertiesCore = function initializeAnimatablePropertiesCore() {
		_Transform.prototype.initializeAnimatablePropertiesCore.call(this);

		this.enableAnimatableProperty("x", this.getX, this.setX, _uiPropertyOptions2["default"].AffectsLayout | _uiPropertyOptions2["default"].AffectsMeasure);
		this.enableAnimatableProperty("y", this.getY, this.setY, _uiPropertyOptions2["default"].AffectsLayout | _uiPropertyOptions2["default"].AffectsMeasure);
	};

	TranslateTransform.prototype.getValue = function getValue() {
		var mx = _Matrix2D2["default"].createIdentity();
		mx.translate(this.getX(), this.getY());

		return mx;
	};

	TranslateTransform.prototype.transformRect = function transformRect(rect) {
		if (!rect.isEmpty()) {
			rect.offset(this.getX(), this.getY());
		}

		return rect;
	};

	TranslateTransform.prototype.getX = function getX() {
		return this.getPropertyValue("x");
	};

	TranslateTransform.prototype.setX = function setX(value) {
		this.setPropertyValue("x", value);
	};

	TranslateTransform.prototype.getY = function getY() {
		return this.getPropertyValue("y");
	};

	TranslateTransform.prototype.setY = function setY(value) {
		this.setPropertyValue("y", value);
	};

	TranslateTransform.prototype.isEqualTo = function isEqualTo(other) {
		return this.getX() == other.getX() && this.getY() == other.getY();
	};

	return TranslateTransform;
})(_Transform3["default"]);

exports["default"] = TranslateTransform;
module.exports = exports["default"];

},{"../Engine":44,"../Matrix2D":54,"../ui/PropertyOptions":156,"./Transform":136,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],138:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Equatable2 = require("../Equatable");

var _Equatable3 = _interopRequireDefault(_Equatable2);

var _Engine = require("../Engine");

var BorderMetrics = (function (_Equatable) {
	_inherits(BorderMetrics, _Equatable);

	function BorderMetrics(left, top, right, bottom) {
		_classCallCheck(this, BorderMetrics);

		_Equatable.call(this);
		this.left = _Engine.ValueOrDefault(left, 0);
		this.top = _Engine.ValueOrDefault(top, 0);
		this.right = _Engine.ValueOrDefault(right, 0);
		this.bottom = _Engine.ValueOrDefault(bottom, 0);
	}

	BorderMetrics.prototype.getLeft = function getLeft() {
		return this.left;
	};

	BorderMetrics.prototype.setLeft = function setLeft(value) {
		this.left = value;
	};

	BorderMetrics.prototype.getTop = function getTop() {
		return this.top;
	};

	BorderMetrics.prototype.setTop = function setTop(value) {
		this.top = value;
	};

	BorderMetrics.prototype.getRight = function getRight() {
		return this.right;
	};

	BorderMetrics.prototype.setRight = function setRight(value) {
		this.right = value;
	};

	BorderMetrics.prototype.getBottom = function getBottom() {
		return this.bottom;
	};

	BorderMetrics.prototype.setBottom = function setBottom(value) {
		this.bottom = value;
	};

	BorderMetrics.prototype.getSizeX = function getSizeX() {
		return this.left + this.right;
	};

	BorderMetrics.prototype.getSizeY = function getSizeY() {
		return this.top + this.bottom;
	};

	BorderMetrics.prototype.isZero = function isZero() {
		return this.left == 0 && this.top == 0 && this.right == 0 && this.bottom == 0;
	};

	BorderMetrics.prototype.isEqualTo = function isEqualTo(obj) {
		return this.left == obj.left && this.top == obj.top && this.right == obj.right && this.bottom == obj.bottom;
	};

	BorderMetrics.prototype.toString = function toString() {
		return "left:" + this.left + ", top:" + this.top + ", right:" + this.right + ", bottom:" + this.bottom;
	};

	BorderMetrics.Zero = function Zero() {
		return new this(0, 0, 0, 0);
	};

	BorderMetrics.fromUniform = function fromUniform(value) {
		return new BorderMetrics(value, value, value, value);
	};

	return BorderMetrics;
})(_Equatable3["default"]);

exports["default"] = BorderMetrics;
module.exports = exports["default"];

},{"../Engine":44,"../Equatable":46,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],139:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Panel2 = require("./Panel");

var _Panel3 = _interopRequireDefault(_Panel2);

var Canvas = (function (_Panel) {
	_inherits(Canvas, _Panel);

	function Canvas(name) {
		_classCallCheck(this, Canvas);

		_Panel.call(this, name);
	}

	Canvas.prototype.measure = function measure() {
		_Panel.prototype.measure.call(this);

		var len = this.getCount();
		var child = null;
		var maxWidth = 0;
		var maxHeight = 0;

		for (var i = 0; i < len; ++i) {
			child = this.getAt(i);

			if (!child.getIsLayoutVisible()) {
				continue;
			}

			maxWidth = Math.max(maxWidth, child.getX() + child.getExactOrMeasuredWidth());
			maxHeight = Math.max(maxHeight, child.getY() + child.getExactOrMeasuredHeight());
		}

		this.setMeasuredWidth(maxWidth);
		this.setMeasuredHeight(maxHeight);
	};

	Canvas.prototype.layout = function layout(unscaledWidth, unscaledHeight) {
		_Panel.prototype.layout.call(this, unscaledWidth, unscaledHeight);

		var len = this.getCount();
		var child = null;
		var childX = 0;
		var childY = 0;
		var childWidth = 0;
		var childHeight = 0;
		var needsWidthValidation = false;
		var needsHeightValidation = false;

		for (var i = 0; i < len; ++i) {
			child = this.getAt(i);

			if (!child.getIsLayoutVisible()) {
				continue;
			}

			childX = child.getX();
			childY = child.getY();
			childWidth = child.getExactOrMeasuredWidth();
			childHeight = child.getExactOrMeasuredHeight();

			needsWidthValidation = false;
			needsHeightValidation = false;

			// first, see if we need to calculate the size from
			// a percentage value, this becomes our used value, which
			// will need to be checked once we have the computed value
			if (!isNaN(child.getPercentWidth())) {
				childWidth = unscaledWidth * (child.getPercentWidth() / 100);
				needsWidthValidation = true;
			}

			if (!isNaN(child.getPercentHeight())) {
				childHeight = unscaledHeight * (child.getPercentHeight() / 100);
				needsHeightValidation = true;
			}

			// finally, since we have the final position and size, it needs to
			// be validated against the available size
			if (needsWidthValidation && childX + childWidth > unscaledWidth) {
				childWidth = unscaledWidth - childX;
			}

			if (needsHeightValidation && childY + childHeight > unscaledHeight) {
				childHeight = unscaledHeight - childY;
			}

			// update the child
			child.setLayoutPosition(childX, childY);
			child.setActualSize(childWidth, childHeight);
		}
	};

	return Canvas;
})(_Panel3["default"]);

exports["default"] = Canvas;
module.exports = exports["default"];

},{"./Panel":151,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],140:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Control2 = require("./Control");

var _Control3 = _interopRequireDefault(_Control2);

var ContentControl = (function (_Control) {
	_inherits(ContentControl, _Control);

	function ContentControl(name) {
		_classCallCheck(this, ContentControl);

		_Control.call(this, name);
	}

	ContentControl.prototype.getChild = function getChild() {
		if (this.getCount() > 0) {
			return this.getAt(0);
		}

		return null;
	};

	ContentControl.prototype.setChild = function setChild(value) {
		this.clear();
		this.add(value);

		this.requestMeasure();
		this.requestParentMeasureAndLayout();
		this.invalidateProperties();
	};

	ContentControl.prototype.getHasChild = function getHasChild() {
		return this.getCount() > 0;
	};

	ContentControl.prototype.measure = function measure() {
		_Control.prototype.measure.call(this);

		var thickness = this.getBorderThickness() * 2;
		var child = this.getChild();

		if (child != null && child.getIsLayoutVisible()) {
			var childMargin = child.getMargin();

			this.setMeasuredWidth(child.getExactOrMeasuredWidth() + childMargin.getLeft() + childMargin.getRight() + thickness);
			this.setMeasuredHeight(child.getExactOrMeasuredHeight() + childMargin.getTop() + childMargin.getBottom() + thickness);
		} else {
			this.setMeasuredWidth(thickness);
			this.setMeasuredHeight(thickness);
		}
	};

	ContentControl.prototype.layout = function layout(unscaledWidth, unscaledHeight) {
		var child = this.getChild();

		if (child != null && child.getIsLayoutVisible()) {
			_Control.prototype.layout.call(this, unscaledWidth, unscaledHeight);

			// contract the total size down to fit the border
			unscaledWidth -= this.getBorderThickness() * 2;
			unscaledHeight -= this.getBorderThickness() * 2;

			// compute initial child extents
			var childMargin = child.getMargin();
			var childX = child.getX() + childMargin.getLeft();
			var childY = child.getY() + childMargin.getTop();
			var childWidth = child.getExactOrMeasuredWidth();
			var childHeight = child.getExactOrMeasuredHeight();
			var childRightEdge = 0;
			var childBottomEdge = 0;

			// if child is using percentage based sizing, then compute
			// the actual size based on our actual size
			if (!isNaN(child.getPercentWidth())) {
				childWidth = unscaledWidth * (child.getPercentWidth() / 100);
				childRightEdge = childX + childWidth + childMargin.getRight();

				// if the position of the child plus the width extends
				// beyond the right edge, then we shrink it so it fits
				// up against the right edge.
				if (childRightEdge > unscaledWidth) {
					childWidth = unscaledWidth - (childX + childMargin.getRight());
				}
			}

			if (!isNaN(child.getPercentHeight())) {
				childHeight = unscaledHeight * (child.getPercentHeight() / 100);
				childBottomEdge = childY + childHeight + childMargin.getBottom();

				// if the position of the child plus the height extends
				// beyond the bottom edge, then we shrink it so it fits
				// up against the bottom edge.				
				if (childBottomEdge > unscaledHeight) {
					childHeight = unscaledHeight - (childY + childMargin.getBottom());
				}
			}

			// recompute the far right and bottom edges incase our original sizes
			// have changed from calculating the percentages
			childRightEdge = childX + childWidth + childMargin.getRight();
			childBottomEdge = childY + childHeight + childMargin.getBottom();

			// align the child according to it's alignment rules and adjust for
			// our border thickness
			childX += (unscaledWidth - childRightEdge) * child.getHorizontalAlignment() + this.getBorderThickness();
			childY += (unscaledHeight - childBottomEdge) * child.getVerticalAlignment() + this.getBorderThickness();

			// finalize the layout and size of our child
			child.setLayoutPosition(childX, childY);
			child.setActualSize(Math.max(0, childWidth), Math.max(0, childHeight));
		}
	};

	return ContentControl;
})(_Control3["default"]);

exports["default"] = ContentControl;
module.exports = exports["default"];

},{"./Control":141,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],141:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Drawable2 = require("./Drawable");

var _Drawable3 = _interopRequireDefault(_Drawable2);

var _Pen = require("./Pen");

var _Pen2 = _interopRequireDefault(_Pen);

var _Engine = require("../Engine");

var Control = (function (_Drawable) {
	_inherits(Control, _Drawable);

	function Control(name) {
		_classCallCheck(this, Control);

		_Drawable.call(this, name);

		this.background = null;
		this.foreground = null;
		this.borderBrush = null;
		this.borderThickness = 0;
		this.pen = null; // cached pen for strokes
	}

	Control.prototype.getBackground = function getBackground() {
		return this.background;
	};

	Control.prototype.setBackground = function setBackground(value) {
		if (_Engine.AreNotEqual(this.background, value)) {
			this.background = value;
			this.requestLayout();
		}
	};

	Control.prototype.getForeground = function getForeground() {
		return this.foreground;
	};

	Control.prototype.setForeground = function setForeground(value) {
		if (_Engine.AreNotEqual(this.foreground, value)) {
			this.foreground = value;
			this.requestLayout();
		}
	};

	Control.prototype.getBorderBrush = function getBorderBrush() {
		return this.borderBrush;
	};

	Control.prototype.setBorderBrush = function setBorderBrush(value) {
		if (_Engine.AreNotEqual(this.borderBrush, value)) {
			this.borderBrush = value;

			this.invalidateProperties();
			this.requestLayout();
		}
	};

	Control.prototype.getBorderThickness = function getBorderThickness() {
		return this.borderThickness;
	};

	Control.prototype.setBorderThickness = function setBorderThickness(value) {
		if (this.borderThickness != value) {
			this.borderThickness = value;

			this.invalidateProperties();
			this.requestMeasure();
			this.requestLayout();
		}
	};

	Control.prototype.commitProperties = function commitProperties() {
		_Drawable.prototype.commitProperties.call(this);

		if (this.borderBrush != null && this.borderThickness > 0) {
			if (this.pen == null) {
				this.pen = new _Pen2["default"](this.borderBrush, this.borderThickness);
			} else {
				this.pen.setBrush(this.borderBrush);
				this.pen.setThickness(this.borderThickness);
			}
		} else {
			this.pen = null;
		}
	};

	Control.prototype.layout = function layout(unscaledWidth, unscaledHeight) {
		_Drawable.prototype.layout.call(this, unscaledWidth, unscaledHeight);

		this.graphics.clear();

		if (this.background != null || this.borderBrush != null && this.borderThickness > 0) {
			var thickness = this.getBorderThickness();
			var inset = thickness * 0.5;

			this.graphics.drawRect(inset, inset, Math.max(0, unscaledWidth - thickness), Math.max(0, unscaledHeight - thickness));
			this.drawBackground();
			this.drawBorder();
		}
	};

	Control.prototype.drawBackground = function drawBackground() {
		if (this.background != null) {
			this.graphics.fill(this.background);
		}
	};

	Control.prototype.drawBorder = function drawBorder() {
		if (this.pen != null) {
			this.graphics.stroke(this.pen);
		}
	};

	return Control;
})(_Drawable3["default"]);

exports["default"] = Control;
module.exports = exports["default"];

},{"../Engine":44,"./Drawable":147,"./Pen":152,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],142:[function(require,module,exports){
"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

exports.__esModule = true;

var _Engine = require("../Engine");

var DashStyle = (function () {
	function DashStyle(dashes, offset) {
		_classCallCheck(this, DashStyle);

		/** Number[] **/
		this.dashes = _Engine.ValueOrDefault(dashes, []);

		/** Number **/
		this.offset = _Engine.ValueOrDefault(offset, 0);
	}

	// ----

	DashStyle.prototype.getDashes = function getDashes() {
		return this.dashes;
	};

	DashStyle.prototype.setDashes = function setDashes(value) {
		this.dashes = value;
	};

	DashStyle.prototype.getOffset = function getOffset() {
		return this.offset;
	};

	DashStyle.prototype.setOffset = function setOffset(value) {
		this.offset = value;
	};

	return DashStyle;
})();

DashStyle.Solid = new DashStyle();

// * * * *
DashStyle.Dot = new DashStyle([1, 2], 0);

// - - - -
DashStyle.Dash = new DashStyle([2, 2], 2);

// - * - * - * -
DashStyle.DashDot = new DashStyle([2, 2, 1, 2], 1);

// - * * - * * -
DashStyle.DashDotDot = new DashStyle([2, 2, 1, 2, 1, 2, 1], 1);

exports["default"] = DashStyle;
module.exports = exports["default"];

},{"../Engine":44,"babel-runtime/helpers/class-call-check":7}],143:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Equatable2 = require("../Equatable");

var _Equatable3 = _interopRequireDefault(_Equatable2);

var _EngineMath = require("../EngineMath");

var _Rectangle = require("../Rectangle");

var _Rectangle2 = _interopRequireDefault(_Rectangle);

var _DirtyRegionTracker = require("./DirtyRegionTracker");

var _DirtyRegionTracker2 = _interopRequireDefault(_DirtyRegionTracker);

var DirtyRegion = (function (_Equatable) {
	_inherits(DirtyRegion, _Equatable);

	function DirtyRegion() {
		_classCallCheck(this, DirtyRegion);

		_Equatable.call(this);
		this.x1 = _EngineMath.MaxInt;
		this.y1 = _EngineMath.MaxInt;
		this.x2 = _EngineMath.MinInt;
		this.y2 = _EngineMath.MinInt;
	}

	DirtyRegion.prototype.clear = function clear() {
		this.x1 = _EngineMath.MaxInt;
		this.y1 = _EngineMath.MaxInt;
		this.x2 = _EngineMath.MinInt;
		this.y2 = _EngineMath.MinInt;
	};

	DirtyRegion.prototype.isEmpty = function isEmpty() {
		return this.x1 == _EngineMath.MaxInt; // only need to check one
	};

	DirtyRegion.prototype.getRect = function getRect() {
		return new _Rectangle2["default"](this.x1, this.y1, this.getWidth(), this.getHeight());
	};

	DirtyRegion.prototype.getWidth = function getWidth() {
		return this.x2 - this.x1;
	};

	DirtyRegion.prototype.getHeight = function getHeight() {
		return this.y2 - this.y1;
	};

	DirtyRegion.prototype.grow = function grow(x1, y1, x2, y2) {
		this.x1 = Math.min(x1, this.x1);
		this.y1 = Math.min(y1, this.y1);
		this.x2 = Math.max(x2, this.x2);
		this.y2 = Math.max(y2, this.y2);

		_DirtyRegionTracker2["default"].current().add(this);
	};

	DirtyRegion.prototype.inflate = function inflate(amount) {
		this.x1 -= amount;
		this.y1 -= amount;
		this.x2 += amount;
		this.y2 += amount;
	};

	DirtyRegion.prototype.combine = function combine(other) {
		this.grow(other.x1, other.y1, other.x2, other.y2);
	};

	DirtyRegion.prototype.combineRect = function combineRect(rect) {
		this.grow(rect.x, rect.y, rect.x + rect.width, rect.y + rect.height);
	};

	DirtyRegion.prototype.translate = function translate(x, y) {
		if (this.x1 != _EngineMath.MaxInt) {
			this.x1 += x;
			this.x2 += x;

			this.y1 += y;
			this.y2 += y;
		}
	};

	DirtyRegion.prototype.toString = function toString() {
		return "DirtyRegion(x1: " + this.x1 + ", y1: " + this.y1 + ", x2: " + this.x2 + ", y2: " + this.y2 + ")";
	};

	return DirtyRegion;
})(_Equatable3["default"]);

exports["default"] = DirtyRegion;
module.exports = exports["default"];

},{"../EngineMath":45,"../Equatable":46,"../Rectangle":59,"./DirtyRegionTracker":144,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],144:[function(require,module,exports){
"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

exports.__esModule = true;

var DirtyRegionTracker = (function () {
	function DirtyRegionTracker() {
		_classCallCheck(this, DirtyRegionTracker);

		this.regionCache = [];
	}

	DirtyRegionTracker.prototype.clear = function clear() {
		this.regionCache = [];
	};

	DirtyRegionTracker.prototype.isEmpty = function isEmpty() {
		return this.regionCache.length == 0;
	};

	DirtyRegionTracker.prototype.getRects = function getRects() {
		return this.regionCache;
	};

	DirtyRegionTracker.prototype.add = function add(dirtyRegion) {
		if (dirtyRegion == null || dirtyRegion.isEmpty()) {
			return;
		}

		var regions = [];
		var rect = dirtyRegion.getRect().round().inflate(4, 4);

		for (var i = this.regionCache.length - 1; i >= 0; --i) {
			var region = this.regionCache[i];

			if (rect.intersects(region)) {
				this.regionCache[i] = rect.unionWithRect(region);
			} else {
				regions.push(region);
			}
		}

		regions.push(rect);

		this.regionCache = regions;
	};

	DirtyRegionTracker.current = function current() {
		if (DirtyRegionTracker.Instance == null) {
			DirtyRegionTracker.Instance = new DirtyRegionTracker();
		}

		return DirtyRegionTracker.Instance;
	};

	return DirtyRegionTracker;
})();

exports["default"] = DirtyRegionTracker;
module.exports = exports["default"];

},{"babel-runtime/helpers/class-call-check":7}],145:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _ContentControl2 = require("./ContentControl");

var _ContentControl3 = _interopRequireDefault(_ContentControl2);

var _inputInputManager = require("../input/InputManager");

var _inputInputManager2 = _interopRequireDefault(_inputInputManager);

var _Vector2D = require("../Vector2D");

var _Vector2D2 = _interopRequireDefault(_Vector2D);

var _DirtyRegion = require("./DirtyRegion");

var _DirtyRegion2 = _interopRequireDefault(_DirtyRegion);

var _DirtyRegionTracker = require("./DirtyRegionTracker");

var _DirtyRegionTracker2 = _interopRequireDefault(_DirtyRegionTracker);

var _FPSGraph = require("../FPSGraph");

var _FPSGraph2 = _interopRequireDefault(_FPSGraph);

var _physicsEntity = require("../physics/Entity");

var _physicsEntity2 = _interopRequireDefault(_physicsEntity);

var _physicsEntityType = require("../physics/EntityType");

var _physicsEntityType2 = _interopRequireDefault(_physicsEntityType);

var _animationIK = require("../animation/IK");

var _animationIK2 = _interopRequireDefault(_animationIK);

var _aiAIEntityJs = require("../ai/AIEntity.js");

var _aiAIEntityJs2 = _interopRequireDefault(_aiAIEntityJs);

var _Engine = require("../Engine");

var _physicsEntityQueryEvent = require("../physics/EntityQueryEvent");

var _physicsEntityQueryEvent2 = _interopRequireDefault(_physicsEntityQueryEvent);

var _physicsEntityRayCastType = require("../physics/EntityRayCastType");

var _physicsEntityRayCastType2 = _interopRequireDefault(_physicsEntityRayCastType);

var _physicsEntityRayCastEvent = require("../physics/EntityRayCastEvent");

var _physicsEntityRayCastEvent2 = _interopRequireDefault(_physicsEntityRayCastEvent);

var _physicsPhysicsController = require("../physics/PhysicsController");

var _physicsPhysicsController2 = _interopRequireDefault(_physicsPhysicsController);

var _Event = require("../Event");

var _Event2 = _interopRequireDefault(_Event);

var _Application = require("../Application");

var _Application2 = _interopRequireDefault(_Application);

var _LayoutManager = require("./LayoutManager");

var _LayoutManager2 = _interopRequireDefault(_LayoutManager);

var _box2dweb = require("box2dweb");

var _box2dweb2 = _interopRequireDefault(_box2dweb);

var PXVector2D = _box2dweb2["default"].Common.Math.b2Vec2;
var PXAABB = _box2dweb2["default"].Collision.b2AABB;
var PXWorld = _box2dweb2["default"].Dynamics.b2World;

var DisplaySurface = (function (_ContentControl) {
	_inherits(DisplaySurface, _ContentControl);

	function DisplaySurface(name, canvas) {
		_classCallCheck(this, DisplaySurface);

		_ContentControl.call(this, name);

		this.nativeCanvas = canvas;
		this.isRunning = true;
		this.scene = this;
		this.resizeHandlerRegistered = false;
		this.resizeWidth = true;
		this.resizeHeight = true;
		this.resizeLive = true;
		this.isPhysicsEnabled = false;
		this.physicsController = null;
		this.frameRate = 24;
		this.percentBoundsChanged = false;
		this.updatingBounds = false;
		this.inputManager = new _inputInputManager2["default"](this);
		this.absoluteSourcePosition = _Vector2D2["default"].Zero();
		this.physicsWorld = null;
		this.groundEntity = null;
		this.renderTimes = [];
		this.aiEntities = [];
		this.armatures = [];
		this.originalWidth = canvas.width;
		this.originalHeight = canvas.height;
		this.fps = new _FPSGraph2["default"]();
		this.fpsDirtyRegion = new _DirtyRegion2["default"]();
		this.times = [];
		this.lastAvg = 0;

		this.fixedTimeAccum = 0;
		this.fixedTimeAccumRatio = 0;

		var width = canvas.width;
		var height = canvas.height;

		this.invalidatePositionOnScreen();
		this.setIsRoot(true);
		this.changeParentAndScene(null, this);
		this.setDepth(1);
		this.setActualSize(width, height);
		this.setPercentWidth(100);
		this.setPercentHeight(100);
		this.initializeSelf();
	}

	DisplaySurface.prototype.getFocusedDrawable = function getFocusedDrawable() {
		return this.inputManager.getFocusTarget();
	};

	DisplaySurface.prototype.getIsPhysicsEnabled = function getIsPhysicsEnabled() {
		return this.isPhysicsEnabled;
	};

	DisplaySurface.prototype.setIsPhysicsEnabled = function setIsPhysicsEnabled(value) {
		if (this.isPhysicsEnabled != value) {
			this.isPhysicsEnabled = value;

			if (this.isPhysicsEnabled) {
				this.setupPhysicsWorld();
			} else {
				this.teardownPhysicsWorld();
			}
		}
	};

	DisplaySurface.prototype.getPhysicsWorld = function getPhysicsWorld() {
		return this.physicsWorld;
	};

	DisplaySurface.prototype.getGroundEntity = function getGroundEntity() {
		this.needPhysics("get ground entity");

		if (this.groundEntity == null) {
			this.groundEntity = new _physicsEntity2["default"](_physicsEntityType2["default"].Ground, "ground", this.physicsWorld.GetGroundBody(), this.physicsController);
		}

		return this.groundEntity;
	};

	DisplaySurface.prototype.togglePhysicsDebugDraw = function togglePhysicsDebugDraw(key, value) {
		this.needPhysics("update debug drawing");
		this.physicsController.toggleDebugDrawing(key, value);
	};

	DisplaySurface.prototype.setX = function setX(value) {
		/** no-op **/
		/** cannot change x-position on the scene **/
	};

	DisplaySurface.prototype.setY = function setY(value) {
		/** no-op **/
		/** cannot change y-position on the scene **/
	};

	DisplaySurface.prototype.createArmature = function createArmature(name, x, y) {
		return this.addArmature(new _animationIK2["default"](name, x, y));
	};

	DisplaySurface.prototype.addArmature = function addArmature(armature) {
		this.armatures.push(armature);

		return armature;
	};

	DisplaySurface.prototype.removeArmature = function removeArmature(armature) {
		this.armatures.remove(armature);

		return armature;
	};

	DisplaySurface.prototype.createAIEntity = function createAIEntity(name, objectType) {
		var entity = _aiAIEntityJs2["default"].create(name, _Engine.ValueOrDefault(objectType, _aiAIEntityJs2["default"]));

		this.addAIEntity(entity);

		return entity;
	};

	DisplaySurface.prototype.addAIEntity = function addAIEntity(entity) {
		this.aiEntities.push(entity);
	};

	DisplaySurface.prototype.destroyJointEntity = function destroyJointEntity(joint) {
		this.needPhysics("destroy joint");
		this.physicsWorld.DestroyJoint(joint);
	};

	DisplaySurface.prototype.createDynamicEntity = function createDynamicEntity(name, descriptor, objectType, objectParams) {
		this.needPhysics("create dynamic entity");

		return _physicsEntity2["default"].createDynamic(name, _Engine.ValueOrDefault(objectType, _physicsEntity2["default"]), objectParams, descriptor, this.physicsController);
	};

	DisplaySurface.prototype.createStaticEntity = function createStaticEntity(name, descriptor, objectType, objectParams) {
		this.needPhysics("create static entity");

		return _physicsEntity2["default"].createStatic(name, _Engine.ValueOrDefault(objectType, _physicsEntity2["default"]), objectParams, descriptor, this.physicsController);
	};

	DisplaySurface.prototype.createKinematicEntity = function createKinematicEntity(name, descriptor, objectType, objectParams) {
		this.needPhysics("create kinematic entity");

		return _physicsEntity2["default"].createKinematic(name, _Engine.ValueOrDefault(objectType, _physicsEntity2["default"]), objectParams, descriptor, this.physicsController);
	};

	DisplaySurface.prototype.queryEntities = function queryEntities(rect) {
		this.needPhysics("query entities");

		var aabb = new PXAABB();
		var evt = new _physicsEntityQueryEvent2["default"](_physicsEntityQueryEvent2["default"].REPORT, null, true, true);
		evt.queryRect.x = rect.x;
		evt.queryRect.y = rect.y;
		evt.queryRect.width = rect.width;
		evt.queryRect.height = rect.height;

		aabb.lowerBound = this.physicsController.convertPoint(new PXVector2D(rect.x, rect.y), false, true, false);
		aabb.upperBound = this.physicsController.convertPoint(new PXVector2D(rect.right(), rect.bottom()), false, true, false);

		this.physicsWorld.QueryAABB((function (fixture) {
			evt.entityFixture = fixture.GetUserData();
			this.dispatchEvent(evt);

			return !evt.getIsDefaultPrevented();
		}).bind(this), aabb);
	};

	DisplaySurface.prototype.rayCastEntities = function rayCastEntities(startPoint, endPoint, type) {
		this.needPhysics("raycast entities");

		type = _Engine.ValueOrDefault(type, _physicsEntityRayCastType2["default"].Any);

		var p1 = this.physicsController.convertPoint(startPoint, false, true, false);
		var p2 = this.physicsController.convertPoint(endPoint, false, true, false);
		var evt = new _physicsEntityRayCastEvent2["default"](_physicsEntityRayCastEvent2["default"].REPORT, true, true);
		var closestMatch = null;

		evt.startPoint.x = startPoint.x;
		evt.startPoint.y = startPoint.y;
		evt.endPoint.x = endPoint.x;
		evt.endPoint.y = endPoint.y;

		this.physicsWorld.RayCast((function (fixture, point, normal, fraction) {

			if (type == _physicsEntityRayCastType2["default"].Any || type == _physicsEntityRayCastType2["default"].One && (closestMatch == null || fraction < closestMatch)) {
				closestMatch = fraction;
				evt.entityFixture = fixture.GetUserData();
				evt.point = this.physicsController.convertPoint(point, true, false, true);
				evt.normal = new _Vector2D2["default"](normal.x, normal.y);
				evt.distance = fraction;
			}

			if (type == _physicsEntityRayCastType2["default"].Any) {
				evt.result = fraction === undefined ? 0 : 1;

				// dispatch event to handlers
				this.dispatchEvent(evt);

				// if user cancelled event, then stop reporting fixtures
				if (evt.getIsDefaultPrevented()) {
					return 0;
				}
			} else {
				evt.result = fraction === undefined ? 0 : fraction;
			}

			return evt.result;
		}).bind(this), p1, p2);

		// just send the single event with the closest match found
		if (type == _physicsEntityRayCastType2["default"].One && closestMatch != null) {
			this.dispatchEvent(evt);
		}
	};

	DisplaySurface.prototype.needPhysics = function needPhysics(msg) {
		if (!this.getIsPhysicsEnabled()) {
			throw new Error("Unable to " + _Engine.ValueOrDefault(msg, "perform action") + ", this surface does not have physics enabled.");
		}
	};

	DisplaySurface.prototype.updateAI = function updateAI(t) {
		var len = this.aiEntities.length;
		var entity = null;

		for (var i = 0; i < len; ++i) {
			entity = this.aiEntities[i];
			entity.update(t);
		}
	};

	DisplaySurface.prototype.updatePhysics = function updatePhysics(t) {
		if (!this.isPhysicsEnabled) {
			return;
		}

		var ts = 1 / 60;
		var steps = 0;

		this.physicsController.reset();
		this.fixedTimeAccum += t / 1000;

		steps = Math.floor(this.fixedTimeAccum / ts);

		if (steps > 0) {
			this.fixedTimeAccum -= steps * ts;
		}

		this.fixedTimeAccumRatio = this.fixedTimeAccum / ts;

		steps = Math.min(steps, 5);

		for (var i = 0; i < steps; ++i) {
			this.physicsController.step(ts);
			this.physicsController.resetEntities();

			this.physicsWorld.Step(ts, 8, 1);
		}

		this.physicsWorld.ClearForces();
		this.physicsWorld.DrawDebugData();
		this.physicsController.update(this.fixedTimeAccumRatio);
	};

	DisplaySurface.prototype.updateOther = function updateOther(t) {
		var len = this.armatures.length;

		for (var i = 0; i < len; ++i) {
			this.armatures[i].update();
		}
	};

	DisplaySurface.prototype.setPercentWidth = function setPercentWidth(value) {
		if (this.getPercentWidth() != value) {
			_ContentControl.prototype.setPercentWidth.call(this, value);

			if (!this.updatingBounds) {
				this.percentBoundsChanged = true;
				this.invalidateProperties();
			}
		}
	};

	DisplaySurface.prototype.setPercentHeight = function setPercentHeight(value) {
		if (this.getPercentHeight() != value) {
			_ContentControl.prototype.setPercentHeight.call(this, value);

			if (!this.updatingBounds) {
				this.percentBoundsChanged = true;
				this.invalidateProperties();
			}
		}
	};

	DisplaySurface.prototype.setUnscaledWidth = function setUnscaledWidth(value) {
		this.invalidateProperties();

		_ContentControl.prototype.setUnscaledWidth.call(this, value);
	};

	DisplaySurface.prototype.setUnscaledHeight = function setUnscaledHeight(value) {
		this.invalidateProperties();

		_ContentControl.prototype.setUnscaledHeight.call(this, value);
	};

	DisplaySurface.prototype.getNativeCanvas = function getNativeCanvas() {
		return this.nativeCanvas;
	};

	DisplaySurface.prototype.setNativeCanvas = function setNativeCanvas(value) {
		// unregister any existing native event handlers
		this.inputManager.unregisterEvents();

		// now update the canvas and invalidate our properties
		this.nativeCanvas = value;
		this.originalWidth = this.nativeCanvas.width;
		this.originalHeight = this.nativeCanvas.height;
		this.invalidateProperties();
		this.invalidatePositionOnScreen();

		// update the physics debug draw
		if (this.isPhysicsEnabled) {
			this.physicsController.updateSettings();
		}

		// need to register the input manager to get native events
		this.inputManager.registerEvents();
	};

	DisplaySurface.prototype.getNativeGraphicsContext = function getNativeGraphicsContext() {
		return this.nativeCanvas.getContext("2d");
	};

	DisplaySurface.prototype.getIsRunning = function getIsRunning() {
		return this.isRunning;
	};

	DisplaySurface.prototype.setIsRunning = function setIsRunning(value) {
		this.isRunning = value;
	};

	DisplaySurface.prototype.setupPhysicsWorld = function setupPhysicsWorld() {
		this.physicsWorld = new PXWorld(new PXVector2D(0, 0), true);
		this.physicsWorld.SetContinuousPhysics(true);
		this.physicsWorld.SetWarmStarting(true);
		this.physicsController = new _physicsPhysicsController2["default"](this);
	};

	DisplaySurface.prototype.teardownPhysicsWorld = function teardownPhysicsWorld() {
		this.physicsController.destroyEntities();

		if (this.groundEntity != null) {
			this.groundEntity.body = null;
			this.groundEntity.controller = null;
		}

		this.groundEntity = null;
		this.physicsWorld = null;
		this.physicsController = null;
		this.invalidate();
	};

	DisplaySurface.prototype.enablePhysics = function enablePhysics(enable, defaultUnit, gravity, enableDebugDraw, enableDebugInteraction) {
		this.setIsPhysicsEnabled(enable);

		if (enable) {
			this.physicsController.setIsDebugDrawingEnabled(enableDebugDraw);
			this.physicsController.setIsInteractionEnabled(enableDebugInteraction);
			this.physicsController.setGravity(new PXVector2D(gravity.x, gravity.y));
			this.physicsController.setDefaultUnit(defaultUnit);
			this.physicsController.updateSettings();
		}
	};

	DisplaySurface.prototype.move = function move(x, y) {
		/** no-op **/
	};

	DisplaySurface.prototype.commitProperties = function commitProperties() {
		_ContentControl.prototype.commitProperties.call(this);

		this.resizeWidth = isNaN(this.getExactWidth());
		this.resizeHeight = isNaN(this.getExactHeight());

		if (this.resizeWidth || this.resizeHeight) {
			this.handleResizeEvent(new _Event2["default"](_Event2["default"].RESIZED));

			if (!this.resizeHandlerRegistered) {
				_Application2["default"].getInstance().addEventHandler(_Event2["default"].RESIZED, this.handleResizeEvent.asDelegate(this));
				this.resizeHandlerRegistered = true;
			}
		} else {
			if (this.resizeHandlerRegistered) {
				_Application2["default"].getInstance().removeEventHandler(_Event2["default"].RESIZED, this.handleResizeEvent.asDelegate(this));
				this.resizeHandlerRegistered = false;
			}
		}

		if (this.percentBoundsChanged) {
			this.updateBounds();
			this.percentBoundsChanged = false;
		}
	};

	DisplaySurface.prototype.handleResizeEvent = function handleResizeEvent(event) {

		if (!this.percentBoundsChanged) {
			this.updateBounds();

			if (this.resizeLive) {
				_LayoutManager2["default"].getInstance().validateNow();
			}
		}

		this.invalidatePositionOnScreen();
	};

	DisplaySurface.prototype.updateBounds = function updateBounds() {

		var w = 0;
		var h = 0;

		this.updatingBounds = true;

		if (this.resizeWidth) {
			if (isNaN(this.getPercentWidth())) {
				w = this.nativeCanvas.width;
			} else {
				this.setPercentWidth(Math.max(Math.min(this.getPercentWidth(), 100), 0));

				w = this.getPercentWidth() * (this.nativeCanvas.width / 100);
			}
		} else {
			w = this.getWidth();
		}

		if (this.resizeHeight) {
			if (isNaN(this.getPercentHeight())) {
				h = this.nativeCanvas.height;
			} else {
				this.setPercentHeight(Math.max(Math.min(this.getPercentHeight(), 100), 0));

				h = this.getPercentHeight() * (this.nativeCanvas.height / 100);
			}
		} else {
			h = this.getHeight();
		}

		this.updatingBounds = false;

		if (w != this.getWidth() || h != this.getHeight()) {
			this.invalidateProperties();
			this.requestMeasure();
		}

		this.setActualSize(w, h);
		this.requestLayout();

		if (this.physicsController != null) {
			this.physicsController.updateSettings();
		}
	};

	DisplaySurface.prototype.getAbsoluteSourcePosition = function getAbsoluteSourcePosition() {
		return this.absoluteSourcePosition;
	};

	DisplaySurface.prototype.invalidatePositionOnScreen = function invalidatePositionOnScreen() {
		var source = this.getNativeCanvas();
		var pos = _Vector2D2["default"].Zero();

		if (!window.isNativeHost) {
			while (source != null) {
				pos.x += source.offsetLeft;
				pos.y += source.offsetTop;

				source = source.offsetParent;
			}
		}

		this.absoluteSourcePosition = pos;
	};

	DisplaySurface.prototype.performRender = function performRender() {
		this.performRenderImpl();
	};

	DisplaySurface.prototype.performRenderImpl = function performRenderImpl() {
		var app = _Application2["default"].getInstance();
		var fpsX = 10;
		var fpsY = this.getHeight() - this.fps.height - 10;
		var dirtyRectTracker = _DirtyRegionTracker2["default"].current();

		// TODO : need to fix this so it's a bit smarter, computing the dirty
		//        regions directly before rendering sucks but it's a quick fix
		//        for now...
		//this.updateDirtyRegions();

		if (app.getEnableStatsGraph()) {
			this.fpsDirtyRegion.grow(fpsX, fpsY, fpsX + this.fps.width, fpsY + this.fps.height);
		}

		var gfx = this.nativeCanvas.getContext("2d");
		var dirtyRegions = dirtyRectTracker.getRects();
		//var len = dirtyRegions.length;
		var dirtyRect = null;
		var showDirtyRegions = _Application2["default"].getInstance().getEnableDebugVisuals();

		//console.log("DIRTY REGION COUNT: " + dirtyRegions.length);

		//dirtyRectTracker.clear();
		//console.log("-----------------------");

		gfx.save();

		if (showDirtyRegions || this.getIsPhysicsEnabled() && this.physicsController.getIsDebugDrawingEnabled()) {
			gfx.clearRect(0, 0, this.nativeCanvas.width, this.nativeCanvas.height);
		} else {
			for (var i = 0, len = dirtyRegions.length; i < len; ++i) {
				dirtyRect = dirtyRegions[i];
				dirtyRect.clamp(0, 0, this.getWidth(), this.getHeight());

				gfx.clearRect(dirtyRect.x, dirtyRect.y, dirtyRect.width, dirtyRect.height);
			}
		}

		dirtyRectTracker.clear();

		//PerfMark("RENDER");

		// now recursively render all of our content
		this.renderRecursive(gfx);

		//PerfUnmark();

		if (this.isPhysicsEnabled) {
			this.physicsController.renderDebugData(gfx);
		}

		gfx.restore();

		// render the fps stats, only if enabled
		if (app.getEnableStatsGraph()) {
			this.fps.render(gfx, fpsX, fpsY);
		}

		// draw the dirty regions into the debug visualizer
		if (showDirtyRegions) {
			this.drawDirtyRegions(gfx, dirtyRegions);
		}
	};

	DisplaySurface.prototype.drawDirtyRegions = function drawDirtyRegions(gfx, regions) {
		if (regions == null || regions.length == 0) {
			return;
		}

		var r = null;

		gfx.save();
		gfx.beginPath();

		for (var i = 0; i < regions.length; ++i) {
			r = regions[i];

			gfx.rect(r.x, r.y, r.width, r.height);
		}

		gfx.fillStyle = "rgba(255, 0, 255, 0.25)";
		gfx.strokeStyle = "rgba(255, 0, 255, 0.85)";
		gfx.fill();
		gfx.stroke();
		gfx.restore();
	};

	DisplaySurface.prototype.checkTimes = function checkTimes(newTime) {
		var avg = 0;
		var len = this.times.length;

		if (len > 0) {
			for (var i = 0; i < len; ++i) {
				avg += this.times[i];
			}

			avg = avg / len;
		}

		if (this.times.length >= 10) {
			this.times.shift();
		}

		this.times.push(newTime);

		if (this.lastAvg != avg) {
			this.lastAvg = avg;
		}
	};

	DisplaySurface.fromCanvas = function fromCanvas(canvas) {
		if (canvas == null) {
			return;
		}

		return new DisplaySurface(canvas.id, canvas);
	};

	return DisplaySurface;
})(_ContentControl3["default"]);

exports["default"] = DisplaySurface;
module.exports = exports["default"];

},{"../Application":38,"../Engine":44,"../Event":47,"../FPSGraph":50,"../Vector2D":67,"../ai/AIEntity.js":68,"../animation/IK":71,"../input/InputManager":100,"../physics/Entity":120,"../physics/EntityQueryEvent":124,"../physics/EntityRayCastEvent":125,"../physics/EntityRayCastType":126,"../physics/EntityType":127,"../physics/PhysicsController":129,"./ContentControl":140,"./DirtyRegion":143,"./DirtyRegionTracker":144,"./LayoutManager":150,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11,"box2dweb":37}],146:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var Dock = {
	None: 0,
	Top: 1,
	Right: 2,
	Bottom: 3,
	Left: 4
};

exports["default"] = Dock;
module.exports = exports["default"];

},{}],147:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _NamedObjectCollection = require("../NamedObjectCollection");

var _NamedObjectCollection2 = _interopRequireDefault(_NamedObjectCollection);

var _Rectangle = require("../Rectangle");

var _Rectangle2 = _interopRequireDefault(_Rectangle);

var _HorizontalAlignment = require("./HorizontalAlignment");

var _HorizontalAlignment2 = _interopRequireDefault(_HorizontalAlignment);

var _VerticalAlignment = require("./VerticalAlignment");

var _VerticalAlignment2 = _interopRequireDefault(_VerticalAlignment);

var _Dock = require("./Dock");

var _Dock2 = _interopRequireDefault(_Dock);

var _graphicsGraphics = require("../graphics/Graphics");

var _graphicsGraphics2 = _interopRequireDefault(_graphicsGraphics);

var _Matrix2D = require("../Matrix2D");

var _Matrix2D2 = _interopRequireDefault(_Matrix2D);

var _LayoutManager = require("./LayoutManager");

var _LayoutManager2 = _interopRequireDefault(_LayoutManager);

var _DirtyRegion = require("./DirtyRegion");

var _DirtyRegion2 = _interopRequireDefault(_DirtyRegion);

var _DirtyRegionTracker = require("./DirtyRegionTracker");

var _DirtyRegionTracker2 = _interopRequireDefault(_DirtyRegionTracker);

var _Vector2D = require("../Vector2D");

var _Vector2D2 = _interopRequireDefault(_Vector2D);

var _Engine = require("../Engine");

var _inputNavigationMode = require("../input/NavigationMode");

var _inputNavigationMode2 = _interopRequireDefault(_inputNavigationMode);

var _Event = require("../Event");

var _Event2 = _interopRequireDefault(_Event);

var _BorderMetrics = require("./BorderMetrics");

var _BorderMetrics2 = _interopRequireDefault(_BorderMetrics);

var _Application = require("../Application");

var _Application2 = _interopRequireDefault(_Application);

var _inputMouseEvent = require("../input/MouseEvent");

var _inputMouseEvent2 = _interopRequireDefault(_inputMouseEvent);

var _PropertyOptions = require("./PropertyOptions");

var _PropertyOptions2 = _interopRequireDefault(_PropertyOptions);

var _Size = require("../Size");

var _Size2 = _interopRequireDefault(_Size);

var _animationAnimatable = require("../animation/Animatable");

var _animationAnimatable2 = _interopRequireDefault(_animationAnimatable);

var DrawableFlags = {
	"None": 0,
	"InvalidProperties": 1,
	"IsPendingMeasure": 2,
	"IsPendingLayout": 4,
	"IsRoot": 8,
	"Initialized": 16,
	"IsLayoutVisible": 32,
	"Enabled": 64,
	"InvalidMatrix": 128,
	"UseBitmapCaching": 256
};

var Mixed = _Engine.Mixin(_NamedObjectCollection2["default"], _animationAnimatable2["default"]);

var Drawable = (function (_Mixed) {
	_inherits(Drawable, _Mixed);

	function Drawable(name) {
		_classCallCheck(this, Drawable);

		_Mixed.call(this, name);

		this.isPendingUpdate = false;
		this.isPendingSceneAddEvent = false;
		this.isPendingFocus = false;
		this.visible = true;
		this.parent = null;
		this.scene = null;
		this.flags = DrawableFlags.None;
		this.lastX = 0;
		this.lastY = 0;
		this.lastWidth = 0;
		this.lastHeight = 0;
		this.lastExactWidth = 0;
		this.lastExactHeight = 0;
		this.lastUnscaledWidth = 0;
		this.lastUnscaledHeight = 0;
		this.lastComputedBounds = _Rectangle2["default"].Empty();
		this.lastUseBitmapCachingValue = false;
		this.lastScene = null;
		this.isDoubleClickEnabled = true;
		this.isMouseFocusEnabled = true;
		this.isNavigationFocusEnabled = false;
		this.isNavigationZone = false;
		this.isHitTestVisible = true;
		this.isHitTestChildrenEnabled = true;
		this.isFocused = false;
		this.navigationMode = null;
		this.alwaysMeasure = false;
		this.alwaysDirty = false;
		this.horizontalAlignment = _HorizontalAlignment2["default"].Left;
		this.verticalAlignment = _VerticalAlignment2["default"].Top;
		this.layoutX = 0;
		this.layoutY = 0;
		this.alphaMask = null;
		this.alphaAffectsVisibility = false;
		this.depth = 0;
		this.dock = _Dock2["default"].None;
		this.graphics = new _graphicsGraphics2["default"](this);
		this.bitmapCache = null;
		this.bitmapEffectCache = null;
		this.renderTransform = null;
		this.renderEffects = null;
		this.userDirtyRegions = [];
		this.layoutMatrix = new _Matrix2D2["default"]();
		this.globalLayoutMatrix = null;
		this.layoutManager = _LayoutManager2["default"].getInstance();
		this.graphicsObjectRefs = [];
		this.dirtyRegion = new _DirtyRegion2["default"]();
		this.lastDirtyRegion = null;
		this.selfDirty = false;
		this.touches = [];
		this.localBounds = new _Rectangle2["default"](0, 0, 0, 0);
		this.globalBounds = new _Rectangle2["default"](0, 0, 0, 0);
		this.clipChildren = false;

		this.setMarginUniform(0);
		this.setX(0);
		this.setY(0);
		this.setWidth(0);
		this.setHeight(0);
		this.setExactWidth(NaN);
		this.setExactHeight(NaN);
		this.setPercentWidth(NaN);
		this.setPercentHeight(NaN);
		this.setMeasuredWidth(0);
		this.setMeasuredHeight(0);
		this.setScaleX(1);
		this.setScaleY(1);
		this.setSkewX(0);
		this.setSkewY(0);
		this.setRotation(0);
		this.setTransformOrigin(_Vector2D2["default"].Zero());
		this.setAlpha(1);
		this.setIsLayoutVisible(true);
		this.setEnabled(true);
		this.setUseBitmapCaching(false);
		this.setClip(null);

		this.initializeAnimatableProperties();
	}

	Drawable.prototype.initializeAnimatablePropertiesCore = function initializeAnimatablePropertiesCore() {
		this.enableAnimatableProperty("marginLeft", this.getMarginLeft, this.setMarginLeft);
		this.enableAnimatableProperty("marginRight", this.getMarginRight, this.setMarginRight);
		this.enableAnimatableProperty("marginTop", this.getMarginTop, this.setMarginTop);
		this.enableAnimatableProperty("marginBottom", this.getMarginBottom, this.setMarginBottom);
		this.enableAnimatableProperty("x", this.getX, this.setX);
		this.enableAnimatableProperty("y", this.getY, this.setY);
		this.enableAnimatableProperty("exactWidth", this.getExactWidth, this.setExactWidth);
		this.enableAnimatableProperty("exactHeight", this.getExactHeight, this.setExactHeight);
		this.enableAnimatableProperty("percentWidth", this.getPercentWidth, this.setPercentWidth);
		this.enableAnimatableProperty("percentHeight", this.getPercentHeight, this.setPercentHeight);
		this.enableAnimatableProperty("measuredWidth", this.getMeasuredWidth, this.setMeasuredWidth);
		this.enableAnimatableProperty("measuredHeight", this.getMeasuredHeight, this.setMeasuredHeight);
		this.enableAnimatableProperty("unscaledWidth", this.getUnscaledWidth, this.setUnscaledWidth);
		this.enableAnimatableProperty("unscaledHeight", this.getUnscaledHeight, this.setUnscaledHeight);
		this.enableAnimatableProperty("width", this.getWidth, this.setWidth);
		this.enableAnimatableProperty("height", this.getHeight, this.setHeight);
		this.enableAnimatableProperty("scaleX", this.getScaleX, this.setScaleX);
		this.enableAnimatableProperty("scaleY", this.getScaleY, this.setScaleY);
		this.enableAnimatableProperty("transformOrigin", this.getTransformOrigin, this.setTransformOrigin);
		this.enableAnimatableProperty("skewX", this.getSkewX, this.setSkewX);
		this.enableAnimatableProperty("skewY", this.getSkewY, this.setSkewY);
		this.enableAnimatableProperty("rotation", this.getRotation, this.setRotation);
		this.enableAnimatableProperty("alpha", this.getAlpha, this.setAlpha);
		this.enableAnimatableProperty("clip", this.getClip, this.setClip);
	};

	Drawable.prototype.readFlag = function readFlag(flag) {
		return (this.flags & flag) != DrawableFlags.None;
	};

	Drawable.prototype.writeFlag = function writeFlag(flag, value) {
		this.flags = value ? this.flags | flag : this.flags & ~flag;
	};

	Drawable.prototype.getHasInvalidMatrix = function getHasInvalidMatrix() {
		return this.readFlag(DrawableFlags.InvalidMatrix);
	};

	Drawable.prototype.setHasInvalidMatrix = function setHasInvalidMatrix(value) {
		this.writeFlag(DrawableFlags.InvalidMatrix, value);
	};

	Drawable.prototype.getHasInvalidProperties = function getHasInvalidProperties() {
		return this.readFlag(DrawableFlags.InvalidProperties);
	};

	Drawable.prototype.setHasInvalidProperties = function setHasInvalidProperties(value) {
		this.writeFlag(DrawableFlags.InvalidProperties, value);
	};

	Drawable.prototype.getIsPendingMeasure = function getIsPendingMeasure() {
		return this.readFlag(DrawableFlags.IsPendingMeasure);
	};

	Drawable.prototype.setIsPendingMeasure = function setIsPendingMeasure(value) {
		this.writeFlag(DrawableFlags.IsPendingMeasure, value);
	};

	Drawable.prototype.getIsPendingLayout = function getIsPendingLayout() {
		return this.readFlag(DrawableFlags.IsPendingLayout);
	};

	Drawable.prototype.setIsPendingLayout = function setIsPendingLayout(value) {
		this.writeFlag(DrawableFlags.IsPendingLayout, value);
	};

	Drawable.prototype.getIsRoot = function getIsRoot() {
		return this.readFlag(DrawableFlags.IsRoot);
	};

	Drawable.prototype.setIsRoot = function setIsRoot(value) {
		this.writeFlag(DrawableFlags.IsRoot, value);
	};

	Drawable.prototype.getUseBitmapCaching = function getUseBitmapCaching() {
		return this.readFlag(DrawableFlags.UseBitmapCaching);
	};

	Drawable.prototype.setUseBitmapCaching = function setUseBitmapCaching(value) {
		if (this.getUseBitmapCaching() != value) {
			// bitmap caching must be enabled to use effects, if
			// the value is false just exit
			if ((this.renderEffects != null || this.alphaMask != null) && !value) {
				return;
			}

			this.writeFlag(DrawableFlags.UseBitmapCaching, value);

			this.invalidateProperties();
			this.requestMeasure();
			this.requestParentMeasureAndLayout();
		}
	};

	Drawable.prototype.getScene = function getScene() {
		return this.scene;
	};

	Drawable.prototype.setScene = function setScene(value) {
		if (this.scene != value) {
			this.scene = value;

			var len = this.getCount();
			var child = null;

			for (var i = 0; i < len; ++i) {
				child = this.getAt(i);

				if (child != null) {
					child.setScene(this.scene);
				}
			}

			if (this.scene != null && this.isPendingFocus) {
				this.focus();
			}
		}
	};

	Drawable.prototype.getParent = function getParent() {
		return this.parent;
	};

	Drawable.prototype.getGraphics = function getGraphics() {
		return this.graphics;
	};

	Drawable.prototype.getAlphaMask = function getAlphaMask() {
		return this.alphaMask;
	};

	Drawable.prototype.setAlphaMask = function setAlphaMask(value) {
		if (this.alphaMask != value) {
			this.alphaMask = value;

			if (this.alphaMask == null) {
				if (this.renderEffects == null) {
					this.setUseBitmapCaching(this.lastUseBitmapCachingValue);
				}
			} else {
				if (this.renderEffects == null) {
					this.lastUseBitmapCachingValue = this.getUseBitmapCaching();
				}

				this.setUseBitmapCaching(true);
			}

			this.requestMeasure();
			this.requestParentMeasureAndLayout();
		}
	};

	Drawable.prototype.getRenderEffects = function getRenderEffects() {
		return this.renderEffects;
	};

	Drawable.prototype.setRenderEffects = function setRenderEffects(value) {
		var i;

		// unregister current effects
		if (this.renderEffects != null) {
			for (i = 0; i < this.renderEffects.length; ++i) {
				this.unregisterDependantObject(this.renderEffects[i]);
			}
		}

		this.renderEffects = value;

		if (this.renderEffects == null) {
			this.bitmapEffectCache = null;

			// reset the bitmap cache back to the previous value
			if (this.alphaMask == null) {
				this.setUseBitmapCaching(this.lastUseBitmapCachingValue);
			}
		} else {
			// register all the render effects as dependant objects so if there
			// properties change we can invalidate the current state and reprocess
			for (i = 0; i < this.renderEffects.length; ++i) {
				this.registerDependantObject(this.renderEffects[i]);
			}

			// bitmap caching must be enabled to use the effects, so we
			// save a copy of the existing value then turn it on, it will
			// be reset if the effects are removed
			if (this.alphaMask == null) {
				this.lastUseBitmapCachingValue = this.getUseBitmapCaching();
			}

			this.setUseBitmapCaching(true);
		}

		// invalidate the bitmap cache so it will
		// be recreated during the next render
		if (this.bitmapCache != null) {
			this.bitmapCache.width = 0;
			this.bitmapCache.height = 0;
		}

		this.requestMeasure();
		this.requestParentMeasureAndLayout();
	};

	Drawable.prototype.getNavigationMode = function getNavigationMode(selfOnly) {
		selfOnly = _Engine.ValueOrDefault(selfOnly, false);

		// we already have one
		if (this.navigationMode != null) {
			return this.navigationMode;
		}

		// none on ourself, so go up the parent chain
		// until we find one
		if (!selfOnly) {
			var next = this.getParent();

			while (next != null) {
				if (next.navigationMode != null) {
					return next.navigationMode;
				}

				next = next.getParent();
			}
		}

		// still none found so assume normal mode
		return _inputNavigationMode2["default"].Normal;
	};

	Drawable.prototype.setNavigationMode = function setNavigationMode(value) {
		this.navigationMode = value;
	};

	Drawable.prototype.getIsInitialized = function getIsInitialized() {
		return this.readFlag(DrawableFlags.Initialized);
	};

	Drawable.prototype.setIsInitialized = function setIsInitialized(value) {
		this.writeFlag(DrawableFlags.Initialized, value);

		if (value) {
			// ensure that we are visible, but don't raise any
			// events here
			this.setVisible(this.visible, true);

			// notify that we are now officially created
			this.dispatchEvent(new _Event2["default"](_Event2["default"].CREATED));
		}
	};

	Drawable.prototype.getIsLayoutVisible = function getIsLayoutVisible() {
		return this.readFlag(DrawableFlags.IsLayoutVisible);
	};

	Drawable.prototype.setIsLayoutVisible = function setIsLayoutVisible(value) {
		if (this.getIsLayoutVisible() != value) {
			this.writeFlag(DrawableFlags.IsLayoutVisible, value);

			var p = this.getParent();

			if (p != null) {
				p.requestMeasure();
				p.requestLayout();
			}
		}
	};

	Drawable.prototype.getEnabled = function getEnabled() {
		return this.readFlag(DrawableFlags.Enabled);
	};

	Drawable.prototype.setEnabled = function setEnabled(value) {
		this.writeFlag(DrawableFlags.Enabled, value);
		this.requestLayout();
	};

	Drawable.prototype.getVisible = function getVisible() {
		return this.visible;
	};

	Drawable.prototype.setVisible = function setVisible(value, disableRaiseEvent) {
		disableRaiseEvent = _Engine.ValueOrDefault(disableRaiseEvent, false);

		// value is the same, nothing to do
		if (this.visible == value) {
			return;
		}

		this.visible = value;
		this.requestLayout();

		// since we aren't even initialized yet, we don't want
		// to raise any events
		if (!this.getIsInitialized()) {
			return;
		}

		if (!disableRaiseEvent) {
			this.dispatchEvent(new _Event2["default"](value ? _Event2["default"].SHOW : _Event2["default"].HIDE));
		}
	};

	Drawable.prototype.getIsFocused = function getIsFocused() {
		return this.isFocused;
	};

	Drawable.prototype.setIsFocused = function setIsFocused(value) {
		if (this.isFocused != value) {
			this.isFocused = value;

			this.invalidateProperties();
			this.requestLayout();
		}
	};

	Drawable.prototype.getIsDoubleClickEnabled = function getIsDoubleClickEnabled() {
		return this.isDoubleClickEnabled;
	};

	Drawable.prototype.setIsDoubleClickEnabled = function setIsDoubleClickEnabled(value) {
		this.isDoubleClickEnabled = value;
	};

	Drawable.prototype.getIsNavigationZone = function getIsNavigationZone() {
		return this.isNavigationZone;
	};

	Drawable.prototype.setIsNavigationZone = function setIsNavigationZone(value) {
		this.isNavigationZone = value;
	};

	Drawable.prototype.getIsNavigationFocusEnabled = function getIsNavigationFocusEnabled() {
		return this.isNavigationFocusEnabled;
	};

	Drawable.prototype.setIsNavigationFocusEnabled = function setIsNavigationFocusEnabled(value) {
		this.isNavigationFocusEnabled = value;
	};

	Drawable.prototype.getIsMouseFocusEnabled = function getIsMouseFocusEnabled() {
		return this.isMouseFocusEnabled;
	};

	Drawable.prototype.setIsMouseFocusEnabled = function setIsMouseFocusEnabled(value) {
		this.isMouseFocusEnabled = value;
	};

	Drawable.prototype.getIsHitTestVisible = function getIsHitTestVisible() {
		return this.isHitTestVisible;
	};

	Drawable.prototype.setIsHitTestVisible = function setIsHitTestVisible(value) {
		this.isHitTestVisible = value;
	};

	Drawable.prototype.getIsHitTestChildrenEnabled = function getIsHitTestChildrenEnabled() {
		return this.isHitTestChildrenEnabled;
	};

	Drawable.prototype.setIsHitTestChildrenEnabled = function setIsHitTestChildrenEnabled(value) {
		this.isHitTestChildrenEnabled = value;
	};

	Drawable.prototype.getRenderTransform = function getRenderTransform() {
		return this.renderTransform;
	};

	Drawable.prototype.setRenderTransform = function setRenderTransform(value) {
		if (this.renderTransform != null) {
			this.unregisterDependantObject(this.renderTransform);
		}

		if (this.renderTransform != value) {
			this.renderTransform = value;

			this.registerDependantObject(this.renderTransform);
			this.requestLayout();
		}
	};

	Drawable.prototype.getLayoutMatrix = function getLayoutMatrix() {
		return this.layoutMatrix;
	};

	Drawable.prototype.getConcatenatedMatrix = function getConcatenatedMatrix() {
		if (this.globalLayoutMatrix != null) {
			return this.globalLayoutMatrix;
		}

		var mx = new _Matrix2D2["default"]();
		var p = this;

		while (p != null) {
			mx.append(p.getLayoutMatrix());

			if (p != this && p.renderTransform) {
				mx.append(p.renderTransform.getValue());
			}

			p = p.getParent();
		}

		this.globalLayoutMatrix = mx;

		return mx;
	};

	Drawable.prototype.getDock = function getDock() {
		return this.dock;
	};

	Drawable.prototype.setDock = function setDock(value) {
		if (this.dock != value) {
			this.dock = value;
			this.requestParentMeasureAndLayout();
		}
	};

	Drawable.prototype.getHorizontalAlignment = function getHorizontalAlignment() {
		return this.horizontalAlignment;
	};

	Drawable.prototype.setHorizontalAlignment = function setHorizontalAlignment(value) {
		if (this.horizontalAlignment != value) {
			this.horizontalAlignment = value;
			this.invalidateMatrix();
		}
	};

	Drawable.prototype.getVerticalAlignment = function getVerticalAlignment() {
		return this.verticalAlignment;
	};

	Drawable.prototype.setVerticalAlignment = function setVerticalAlignment(value) {
		if (this.verticalAlignment != value) {
			this.verticalAlignment = value;
			this.invalidateMatrix();
		}
	};

	Drawable.prototype.getClip = function getClip() {
		return this.getPropertyValue("clip");
	};

	Drawable.prototype.setClip = function setClip(value) {
		this.setPropertyValue("clip", value);
	};

	Drawable.prototype.getClipChildren = function getClipChildren() {
		return this.clipChildren;
	};

	Drawable.prototype.setClipChildren = function setClipChildren(value) {
		this.clipChildren = value;
	};

	Drawable.prototype.getMargin = function getMargin() {
		return new _BorderMetrics2["default"](this.getMarginLeft(), this.getMarginTop(), this.getMarginRight(), this.getMarginBottom());
	};

	Drawable.prototype.getMarginLeft = function getMarginLeft() {
		return this.getPropertyValue("marginLeft");
	};

	Drawable.prototype.getMarginTop = function getMarginTop() {
		return this.getPropertyValue("marginTop");
	};

	Drawable.prototype.getMarginRight = function getMarginRight() {
		return this.getPropertyValue("marginRight");
	};

	Drawable.prototype.getMarginBottom = function getMarginBottom() {
		return this.getPropertyValue("marginBottom");
	};

	Drawable.prototype.setMargin = function setMargin() {
		switch (arguments.length) {
			case 1:
				this.setMarginUniform(arguments[0]);
				break;
			case 2:
				this.setMarginTop(arguments[0]);
				this.setMarginBottom(arguments[0]);
				this.setMarginLeft(arguments[1]);
				this.setMarginRight(arguments[1]);
				break;
			case 3:
				this.setMarginTop(arguments[0]);
				this.setMarginLeft(arguments[1]);
				this.setMarginRight(arguments[1]);
				this.setMarginBottom(arguments[2]);
				break;
			case 4:
				this.setMarginTop(arguments[0]);
				this.setMarginRight(arguments[1]);
				this.setMarginBottom(arguments[2]);
				this.setMarginLeft(arguments[3]);
				break;
			default:
				this.setMarginUniform(0);
				break;
		}
	};

	Drawable.prototype.setMarginUniform = function setMarginUniform(value) {
		this.setMargin(value, value, value, value);
	};

	Drawable.prototype.setMarginLeft = function setMarginLeft(value) {
		if (this.setPropertyValue("marginLeft", value)) {
			this.invalidateMatrix();
		}
	};

	Drawable.prototype.setMarginTop = function setMarginTop(value) {
		if (this.setPropertyValue("marginTop", value)) {
			this.invalidateMatrix();
		}
	};

	Drawable.prototype.setMarginRight = function setMarginRight(value) {
		if (this.setPropertyValue("marginRight", value)) {
			this.invalidateMatrix();
		}
	};

	Drawable.prototype.setMarginBottom = function setMarginBottom(value) {
		if (this.setPropertyValue("marginBottom", value)) {
			this.invalidateMatrix();
		}
	};

	Drawable.prototype.getX = function getX() {
		return this.getPropertyValue("x");
	};

	Drawable.prototype.setX = function setX(value) {
		if (this.setPropertyValue("x", value)) {
			this.layoutX = value;

			this.invalidateMatrix();
			this.invalidateProperties();
		}
	};

	Drawable.prototype.getY = function getY() {
		return this.getPropertyValue("y");
	};

	Drawable.prototype.setY = function setY(value) {
		if (this.setPropertyValue("y", value)) {
			this.layoutY = value;

			this.invalidateMatrix();
			this.invalidateProperties();
		}
	};

	Drawable.prototype.hasExactSize = function hasExactSize() {
		return !isNaN(this.getExactWidth()) && !isNaN(this.getExactHeight());
	};

	Drawable.prototype.getExactWidth = function getExactWidth() {
		return this.getPropertyValue("exactWidth");
	};

	Drawable.prototype.setExactWidth = function setExactWidth(value) {
		if (this.setPropertyValue("exactWidth", value)) {
			if (!isNaN(value)) {
				this.setPercentWidth(NaN);
			}

			this.requestMeasure();
			this.requestParentMeasureAndLayout();
		}
	};

	Drawable.prototype.getExactHeight = function getExactHeight() {
		return this.getPropertyValue("exactHeight");
	};

	Drawable.prototype.setExactHeight = function setExactHeight(value) {
		if (this.setPropertyValue("exactHeight", value)) {
			if (!isNaN(value)) {
				this.setPercentHeight(NaN);
			}

			this.requestMeasure();
			this.requestParentMeasureAndLayout();
		}
	};

	Drawable.prototype.hasPercentSize = function hasPercentSize() {
		return !isNaN(this.getPercentWidth()) && !isNaN(this.getPercentHeight());
	};

	Drawable.prototype.getPercentWidth = function getPercentWidth() {
		return this.getPropertyValue("percentWidth");
	};

	Drawable.prototype.setPercentWidth = function setPercentWidth(value) {
		if (this.setPropertyValue("percentWidth", value)) {
			if (!isNaN(value)) {
				this.setExactWidth(NaN);
			}

			this.requestParentMeasureAndLayout();
		}
	};

	Drawable.prototype.getPercentHeight = function getPercentHeight() {
		return this.getPropertyValue("percentHeight");
	};

	Drawable.prototype.setPercentHeight = function setPercentHeight(value) {
		if (this.setPropertyValue("percentHeight", value)) {
			if (!isNaN(value)) {
				this.setExactHeight(NaN);
			}

			this.requestParentMeasureAndLayout();
		}
	};

	Drawable.prototype.getMeasuredWidth = function getMeasuredWidth() {
		return this.getPropertyValue("measuredWidth");
	};

	Drawable.prototype.setMeasuredWidth = function setMeasuredWidth(value) {
		this.setPropertyValue("measuredWidth", value);
	};

	Drawable.prototype.getMeasuredHeight = function getMeasuredHeight() {
		return this.getPropertyValue("measuredHeight");
	};

	Drawable.prototype.setMeasuredHeight = function setMeasuredHeight(value) {
		this.setPropertyValue("measuredHeight", value);
	};

	Drawable.prototype.getExactOrMeasuredWidth = function getExactOrMeasuredWidth() {
		return !isNaN(this.getExactWidth()) ? this.getExactWidth() : this.getMeasuredWidth();
	};

	Drawable.prototype.getExactOrMeasuredHeight = function getExactOrMeasuredHeight() {
		return !isNaN(this.getExactHeight()) ? this.getExactHeight() : this.getMeasuredHeight();
	};

	Drawable.prototype.getUnscaledWidth = function getUnscaledWidth() {
		return this.getWidth();
	};

	Drawable.prototype.setUnscaledWidth = function setUnscaledWidth(value) {
		if (this.getExactWidth() == value) {
			return;
		}

		if (!isNaN(value)) {
			this.setPercentWidth(NaN);
		}

		this.setExactWidth(value);

		this.requestMeasure();
		this.requestParentMeasureAndLayout();
	};

	Drawable.prototype.getUnscaledHeight = function getUnscaledHeight() {
		return this.getHeight();
	};

	Drawable.prototype.setUnscaledHeight = function setUnscaledHeight(value) {
		if (this.getExactHeight() == value) {
			return;
		}

		if (!isNaN(value)) {
			this.setPercentHeight(NaN);
		}

		this.setExactHeight(value);

		this.requestMeasure();
		this.requestParentMeasureAndLayout();
	};

	Drawable.prototype.getWidth = function getWidth() {
		return this.getPropertyValue("width");
	};

	Drawable.prototype.setWidth = function setWidth(value) {
		if (this.getExactWidth() != value) {
			this.setExactWidth(value);
			this.requestMeasure();
		}

		if (this.setPropertyValue("width", value)) {
			this.invalidateProperties();
			this.requestLayout();
			this.requestParentMeasureAndLayout();
		}
	};

	Drawable.prototype.getHeight = function getHeight() {
		return this.getPropertyValue("height");
	};

	Drawable.prototype.setHeight = function setHeight(value) {
		if (this.getExactHeight() != value) {
			this.setExactHeight(value);
			this.requestMeasure();
		}

		if (this.setPropertyValue("height", value)) {
			this.invalidateProperties();
			this.requestLayout();
			this.requestParentMeasureAndLayout();
		}
	};

	Drawable.prototype.getTransformOrigin = function getTransformOrigin() {
		return this.getPropertyValue("transformOrigin");
	};

	Drawable.prototype.setTransformOrigin = function setTransformOrigin(value) {
		if (this.setPropertyValue("transformOrigin", value)) {
			this.invalidateMatrix();
			this.requestParentMeasureAndLayout();
		}
	};

	Drawable.prototype.getScaleX = function getScaleX() {
		return this.getPropertyValue("scaleX");
	};

	Drawable.prototype.setScaleX = function setScaleX(value) {
		if (this.setPropertyValue("scaleX", value)) {
			this.invalidateMatrix();
			this.requestParentMeasureAndLayout();
		}
	};

	Drawable.prototype.getScaleY = function getScaleY() {
		return this.getPropertyValue("scaleY");
	};

	Drawable.prototype.setScaleY = function setScaleY(value) {
		if (this.setPropertyValue("scaleY", value)) {
			this.invalidateMatrix();
			this.requestParentMeasureAndLayout();
		}
	};

	Drawable.prototype.getSkewX = function getSkewX() {
		return this.getPropertyValue("skewX");
	};

	Drawable.prototype.setSkewX = function setSkewX(value) {
		if (this.setPropertyValue("skewX", value)) {
			this.invalidateMatrix();
			this.requestParentMeasureAndLayout();
		}
	};

	Drawable.prototype.getSkewY = function getSkewY() {
		return this.getPropertyValue("skewY");
	};

	Drawable.prototype.setSkewY = function setSkewY(value) {
		if (this.setPropertyValue("skewY", value)) {
			this.invalidateMatrix();
			this.requestParentMeasureAndLayout();
		}
	};

	Drawable.prototype.getRotation = function getRotation() {
		return this.getPropertyValue("rotation");
	};

	Drawable.prototype.setRotation = function setRotation(value) {
		if (this.setPropertyValue("rotation", value)) {
			this.invalidateMatrix();
			this.requestParentMeasureAndLayout();
		}
	};

	Drawable.prototype.getAlpha = function getAlpha() {
		return this.getPropertyValue("alpha");
	};

	Drawable.prototype.setAlpha = function setAlpha(value) {
		if (this.setPropertyValue("alpha", value)) {
			this.invalidate();
			this.requestLayout();
		}

		if (this.alphaAffectsVisibility) {
			this.setVisible(this.getAlpha() > 0);
		}
	};

	Drawable.prototype.getAlphaAffectsVisibility = function getAlphaAffectsVisibility() {
		return this.alphaAffectsVisibility;
	};

	Drawable.prototype.setAlphaAffectsVisibility = function setAlphaAffectsVisibility(value) {
		this.alphaAffectsVisibility = value;
	};

	Drawable.prototype.getDepth = function getDepth() {
		return this.depth;
	};

	Drawable.prototype.setDepth = function setDepth(value) {

		// we are probably not added to any draw hierarchy yet
		// so just exit out, this will be called again when
		// we start to initialize
		if (value == 1 && !this.getIsRoot()) {
			return;
		}

		var nextDepth = value;

		// update our depth and notify the layout manager
		// that we have a new depth
		if (value > 0 && this.depth != value) {
			this.depth = value;
			this.updateLayoutManager();

			nextDepth++;
		} else if (value === 0) {
			this.depth = 0;
		} else {
			nextDepth++;
		}

		// update our children's depth as well
		var len = this.getCount();
		var child = null;

		for (var i = 0; i < len; ++i) {
			child = this.getAt(i);

			if (child != null) {
				child.setDepth(nextDepth);
			}
		}
	};

	Drawable.prototype.flipX = function flipX() {
		this.setTransformOrigin(this.getCenter());
		this.setScaleX(-this.getScaleX());
	};

	Drawable.prototype.flipY = function flipY() {
		this.setTransformOrigin(this.getCenter());
		this.setScaleY(-this.getScaleY());
	};

	Drawable.prototype.focus = function focus() {
		var surface = this.getScene();

		this.isPendingFocus = false;

		if (surface != null) {
			surface.inputManager.focus(this);
		} else {
			this.isPendingFocus = true;
		}
	};

	Drawable.prototype.getNavigationZone = function getNavigationZone(allowSelf) {
		allowSelf = _Engine.ValueOrDefault(allowSelf, true);

		var next = this;

		while (next != null) {
			if (next.getVisible() && next.getIsNavigationZone() && (allowSelf || !allowSelf && next != this)) {
				return next;
			}

			next = next.getParent();
		}

		return null;
	};

	Drawable.prototype.addAt = function addAt(child, idx) {
		this.beforeChildAdd(child);
		_Mixed.prototype.addAt.call(this, child, idx);
		this.childAdded(child);

		return child;
	};

	Drawable.prototype.beforeChildAdd = function beforeChildAdd(child) {
		child.changeParentAndScene(this, this.getScene());
		child.setDepth(this.getDepth() + 1);
	};

	Drawable.prototype.childAdded = function childAdded(child) {
		if (!child.getIsInitialized()) {
			child.initializeSelf();
		}
	};

	Drawable.prototype.remove = function remove(child) {
		this.beforeChildRemove(child);
		_Mixed.prototype.remove.call(this, child);
		this.childRemoved(child);

		return child;
	};

	Drawable.prototype.beforeChildRemove = function beforeChildRemove(child) {};

	Drawable.prototype.childRemoved = function childRemoved(child) {
		child.changeParentAndScene(null, null);
		child.scene = null;
	};

	Drawable.prototype.removeFromParent = function removeFromParent() {
		var parent = this.getParent();

		if (parent != null) {
			parent.remove(this);
			parent.invalidate();
		}
	};

	Drawable.prototype.updateLayoutManager = function updateLayoutManager() {
		if (this.getIsPendingLayout()) {
			this.layoutManager.requestLayout(this);
		}

		if (this.getIsPendingMeasure()) {
			this.layoutManager.requestMeasure(this);
		}

		if (this.getHasInvalidProperties()) {
			this.layoutManager.invalidateProperties(this);
		}

		_Application2["default"].getInstance().invalidate();
	};

	Drawable.prototype.changeParentAndScene = function changeParentAndScene(newParent, newScene) {

		var parentChanged = this.parent != newParent;
		var sceneChanged = this.scene != newScene;

		if (newParent == null) {
			this.parent = null;
			this.setDepth(0);
		} else {
			this.parent = newParent;
		}

		if (newScene == null) {
			this.scene = null;
		} else {
			this.setScene(newScene);
		}

		if (parentChanged) {
			// if the parent and scene changed then we have either been added to or removed
			// from the parent's scene, which means we need fire an update but only after
			// we have been initialized and our children have been created (in the add case)
			if (sceneChanged) {
				if (this.scene == null) {
					this.dispatchEvent(new _Event2["default"](_Event2["default"].REMOVED_FROM_SCENE));
				} else if (!this.getIsInitialized()) {
					this.isPendingSceneAddEvent = true;
				}
			}

			this.dispatchEvent(new _Event2["default"](_Event2["default"].PARENT_CHANGED));
		}
	};

	Drawable.prototype.initializeSelf = function initializeSelf() {
		if (this.getIsInitialized()) {
			return;
		}

		// notify that we are starting initialization
		this.dispatchEvent(new _Event2["default"](_Event2["default"].PRE_INIT));

		// create the child hierarcy
		this.createChildren();

		// notify the the children have been created
		this.raiseChildrenCreatedEvent();

		// notify that initialization has completed
		this.dispatchEvent(new _Event2["default"](_Event2["default"].INIT_COMPLETE));
	};

	Drawable.prototype.createChildren = function createChildren() {
		/** override **/
	};

	Drawable.prototype.canValidate = function canValidate() {
		return this.getDepth() > 0;
	};

	Drawable.prototype.requestParentMeasureAndLayout = function requestParentMeasureAndLayout() {
		if (!this.getIsLayoutVisible()) {
			return;
		}

		var p = this.getParent();

		if (p == null) {
			return;
		}

		p.requestMeasure();
		p.requestLayout();
	};

	Drawable.prototype.validateNow = function validateNow() {
		this.layoutManager.validateDrawableNow(this);
	};

	Drawable.prototype.invalidateMatrix = function invalidateMatrix() {
		if (!this.getHasInvalidMatrix()) {
			this.setHasInvalidMatrix(true);

			if (this.getDepth() > 0 && !this.getIsPendingLayout()) {
				this.layoutManager.requestLayout(this);
			}
		}
	};

	Drawable.prototype.invalidateGlobalChildMatrices = function invalidateGlobalChildMatrices() {
		var len = this.getCount();
		var child = null;

		for (var i = 0; i < len; ++i) {
			child = this.getAt(i);

			if (child != null && child.getVisible()) {
				child.invalidateGlobalChildMatrices();
			}
		}

		this.globalLayoutMatrix = null;
	};

	Drawable.prototype.validateMatrix = function validateMatrix() {
		if (this.getHasInvalidMatrix()) {
			var tx = this.layoutX;
			var ty = this.layoutY;

			this.layoutMatrix.setIdentity();
			this.layoutMatrix.translate(-this.getTransformOrigin().x, -this.getTransformOrigin().y);
			this.layoutMatrix.scale(this.getScaleX(), this.getScaleY());
			this.layoutMatrix.skew(this.getSkewX(), this.getSkewY());
			this.layoutMatrix.rotate(this.getRotation());
			this.layoutMatrix.translate(tx + this.getTransformOrigin().x, ty + this.getTransformOrigin().y);
			this.layoutMatrix.truncateToPrecision(2);

			this.invalidate();
			this.invalidateGlobalChildMatrices();
			this.setHasInvalidMatrix(false);
		}
	};

	Drawable.prototype.invalidateProperties = function invalidateProperties() {
		if (!this.getHasInvalidProperties()) {
			this.setHasInvalidProperties(true);

			if (this.canValidate()) {
				this.layoutManager.invalidateProperties(this);
			}
		}
	};

	Drawable.prototype.validateProperties = function validateProperties() {
		if (this.getHasInvalidProperties()) {
			this.commitProperties();
			this.setHasInvalidProperties(false);
		}
	};

	Drawable.prototype.commitProperties = function commitProperties() {
		if (this.getUseBitmapCaching()) {
			// create the cached canvas that we will render into
			if (this.bitmapCache == null) {
				this.bitmapCache = document.createElement("canvas");
				this.bitmapCache.width = 0;
				this.bitmapCache.height = 0;
			}
		} else {
			this.bitmapCache = null;
			this.bitmapEffectCache = null;
		}

		if (this.getX() != this.lastX || this.getY() != this.lastY) {
			this.raisePositionChangedEvent();
		}

		if (this.getWidth() != this.lastWidth || this.getHeight() != this.lastHeight) {
			this.raiseResizedEvent();
		}
	};

	Drawable.prototype.requestMeasure = function requestMeasure() {
		if (!this.getIsPendingMeasure()) {
			this.setIsPendingMeasure(true);

			if (this.canValidate()) {
				this.layoutManager.requestMeasure(this);
			}
		}
	};

	Drawable.prototype.validateMeasure = function validateMeasure(recursive) {
		recursive = _Engine.ValueOrDefault(recursive, false);

		if (_Engine.PrintMeasureOrder) {
			_Engine.DebugWrite("Measure Validation: drawable: #{0}, recursive: #{1}, pending: #{2}", _Engine.DebugLevel.Info, this.getName(), recursive, this.getIsPendingMeasure());
		}

		if (recursive) {
			var len = this.getCount();
			var child = null;

			for (var i = 0; i < len; ++i) {
				child = this.getAt(i);

				if (child != null) {
					child.validateMeasure(true);
				}
			}
		}

		if (this.getIsPendingMeasure()) {
			var hasSizeChanged = this.performMeasure();

			if (_Engine.PrintMeasureOrder) {
				_Engine.DebugWrite("\tSize Changed: #{0}", _Engine.DebugLevel.Info, hasSizeChanged);
			}

			if (hasSizeChanged) {
				this.invalidate();
			}

			if (hasSizeChanged && this.getIsLayoutVisible()) {
				this.requestLayout();
				this.requestParentMeasureAndLayout();
			}
		}
	};

	Drawable.prototype.performMeasure = function performMeasure() {
		if (!this.getIsPendingMeasure()) {
			return false;
		}

		var hasSizeChanged = false;

		// if we don't have an exact size we can skip the measure pass, as long
		// as the control hasn't ask to always measure
		if (!this.hasExactSize() || this.alwaysMeasure) {
			if (_Engine.PrintMeasureOrder) {
				_Engine.DebugWrite("\tRan measure(): #{0}", _Engine.DebugLevel.Info, "yes");
			}

			this.measure();
		} else {
			if (_Engine.PrintMeasureOrder) {
				_Engine.DebugWrite("\tRan measure(): #{0}", _Engine.DebugLevel.Info, "no");
			}
		}

		// the measurement is no longer invalid
		this.setIsPendingMeasure(false);

		// check if the current size changed since the last
		// time we measured ourself, if so save it so we can
		// check on the next measure
		var newWidth = !isNaN(this.getExactWidth()) ? this.getExactWidth() : this.getMeasuredWidth();

		if (newWidth != this.lastExactWidth) {
			this.lastExactWidth = newWidth;
			hasSizeChanged = true;
		}

		var newHeight = !isNaN(this.getExactHeight()) ? this.getExactHeight() : this.getMeasuredHeight();

		if (newHeight != this.lastExactHeight) {
			this.lastExactHeight = newHeight;
			hasSizeChanged = true;
		}

		if (_Engine.PrintMeasureOrder) {
			_Engine.DebugWrite("\tSize: #{0}, #{1}", _Engine.DebugLevel.Info, newWidth, newHeight);
		}

		return hasSizeChanged;
	};

	Drawable.prototype.measure = function measure() {
		this.setMeasuredWidth(0);
		this.setMeasuredHeight(0);
	};

	Drawable.prototype.setActualSize = function setActualSize(w, h) {
		var changed = false;

		if (this.getPropertyValue("width") != w) {
			this.setPropertyValue("width", w);
			changed = true;
		}

		if (this.getPropertyValue("height") != h) {
			this.setPropertyValue("height", h);
			changed = true;
		}

		if (changed) {
			this.invalidate();
			this.requestLayout();
			this.raiseResizedEvent();
		}
	};

	Drawable.prototype.requestLayout = function requestLayout() {
		if (!this.getIsPendingLayout()) {
			this.setIsPendingLayout(true);

			if (this.canValidate()) {
				this.layoutManager.requestLayout(this);
			}
		}
	};

	Drawable.prototype.validateLayout = function validateLayout() {
		if (this.getIsPendingLayout()) {
			// ensure we have a valid matrix
			this.validateMatrix();

			var unscaledWidth = this.getWidth();
			var unscaledHeight = this.getHeight();

			this.layout(unscaledWidth, unscaledHeight);

			this.lastUnscaledWidth = unscaledWidth;
			this.lastUnscaledHeight = unscaledHeight;

			this.setIsPendingLayout(false);
		} else {
			this.validateMatrix();
		}
	};

	Drawable.prototype.layout = function layout(unscaledWidth, unscaledHeight) {
		/** override **/
	};

	Drawable.prototype.setLayoutPosition = function setLayoutPosition(x, y) {
		var changed = false;

		if (this.layoutX != x) {
			this.layoutX = x;
			changed = true;
		}

		if (this.layoutY != y) {
			this.layoutY = y;
			changed = true;
		}

		if (changed) {
			this.invalidateMatrix();
		}
	};

	Drawable.prototype.invalidate = function invalidate() {
		this.selfDirty = true;
		this.invalidateRegion(this.globalBounds.x, this.globalBounds.y, this.globalBounds.width, this.globalBounds.height);
	};

	Drawable.prototype.invalidateRegion = function invalidateRegion(x, y, width, height) {
		this.dirtyRegion.grow(x, y, x + width, y + height);
		_Application2["default"].getInstance().invalidate();
	};

	Drawable.prototype.getCenter = function getCenter(bbox) {
		bbox = _Engine.ValueOrDefault(bbox, false);

		if (bbox) {
			return this.getBounds().center(true);
		}

		return new _Vector2D2["default"](this.getWidth() * 0.5, this.getHeight() * 0.5);
	};

	Drawable.prototype.getGlobalCenter = function getGlobalCenter() {
		return this.getGlobalBounds().center();
	};

	Drawable.prototype.getGlobalBounds = function getGlobalBounds() {
		return this.globalBounds;
	};

	Drawable.prototype.getBounds = function getBounds() {
		return this.localBounds;
	};

	Drawable.prototype.hitTest = function hitTest(x, y, precise) {
		precise = _Engine.ValueOrDefault(precise, false);

		if (!this.getVisible()) {
			return null;
		}

		return this.performHitTestImpl(x, y, precise);
	};

	Drawable.prototype.performHitTestImpl = function performHitTestImpl(x, y, precise) {
		var len = this.getCount();
		var child = null;

		if (len > 0 && this.getIsHitTestChildrenEnabled()) {
			for (var i = len - 1; i >= 0; i--) {
				child = this.getAt(i);

				if (child != null) {
					var found = child.hitTest(x, y, precise);

					if (found != null) {
						return found;
					}
				}
			}
		}

		if (!this.getIsHitTestVisible()) {
			return null;
		}

		if (this.lastComputedBounds.contains(x, y)) {
			if (precise) {
				// TODO : render just a copy of this Graphics object into an in-memory context and try
				//		  isPointInPath or just fallback to the pixel test method
				throw new Error("Precise hit testing not yet implemented.");
			}

			// done, the point is within our bounds
			return this;
		}

		// found nothing
		return null;
	};

	Drawable.prototype.pointTo = function pointTo(drawable, point) {
		var globalPoint = this.pointToGlobal(point);
		return drawable.pointToLocal(globalPoint);
	};

	Drawable.prototype.pointToGlobal = function pointToGlobal(point) {
		var mx = this.getConcatenatedMatrix();
		return mx.transformPoint(point);
	};

	Drawable.prototype.pointToLocal = function pointToLocal(point) {
		var mx = this.getConcatenatedMatrix().invert();
		return mx.transformPoint(point);
	};

	Drawable.prototype.pointToParent = function pointToParent(point) {
		return this.pointTo(this.getParent(), point);
	};

	Drawable.prototype.handleEvent = function handleEvent(event) {
		if (event.getType() == _inputMouseEvent2["default"].DOUBLE_CLICK && !this.getIsDoubleClickEnabled()) {
			event.stopImmediatePropagation();
		}

		// TODO : handle touch/gesture events to build custom pinch/swipe/etc... events

		return this.dispatchEvent(event);
	};

	Drawable.prototype.raiseChildrenCreatedEvent = function raiseChildrenCreatedEvent() {
		this.invalidateProperties();
		this.requestMeasure();
		this.requestLayout();

		this.dispatchEvent(new _Event2["default"](_Event2["default"].CHILDREN_CREATED));

		if (this.isPendingSceneAddEvent) {
			this.isPendingSceneAddEvent = false;

			if (this.getScene() != null) {
				this.dispatchEvent(new _Event2["default"](_Event2["default"].ADDED_TO_SCENE));
			}
		}
	};

	Drawable.prototype.raisePositionChangedEvent = function raisePositionChangedEvent() {
		this.dispatchEvent(new _Event2["default"](_Event2["default"].POSITION_CHANGED));
		this.lastX = this.getX();
		this.lastY = this.getY();
	};

	Drawable.prototype.raiseResizedEvent = function raiseResizedEvent() {
		this.dispatchEvent(new _Event2["default"](_Event2["default"].RESIZED));
		this.lastWidth = this.getWidth();
		this.lastHeight = this.getHeight();
	};

	Drawable.prototype.registerDependantObject = function registerDependantObject(obj) {
		if (obj == null) {
			return;
		}

		obj.togglePropertyChangedHandlerRecursive(this, this.handleDependantObjectPropertyChangedEvent.asDelegate(this), true);
	};

	Drawable.prototype.unregisterDependantObject = function unregisterDependantObject(obj) {
		if (obj == null) {
			return;
		}

		obj.togglePropertyChangedHandlerRecursive(this, this.handleDependantObjectPropertyChangedEvent.asDelegate(this), false);
	};

	Drawable.prototype.registerGraphicsObject = function registerGraphicsObject(obj) {
		if (obj == null || this.graphicsObjectRefs.contains(obj)) {
			return;
		}

		this.graphicsObjectRefs.push(obj);
		this.registerDependantObject(obj);
	};

	Drawable.prototype.unregisterGraphicsObject = function unregisterGraphicsObject(obj) {
		if (obj == null || !this.graphicsObjectRefs.contains(obj)) {
			return;
		}

		this.graphicsObjectRefs.remove(obj);
		this.unregisterDependantObject(obj);
	};

	Drawable.prototype.clearGraphicsObjects = function clearGraphicsObjects() {
		var len = this.graphicsObjectRefs.length;
		var obj = null;

		for (var i = 0; i < len; ++i) {
			obj = this.graphicsObjectRefs[i];

			if (obj != null) {
				this.unregisterGraphicsObject(obj);
			}
		}

		this.graphicsObjectRefs = [];
	};

	Drawable.prototype.handleDependantObjectPropertyChangedEvent = function handleDependantObjectPropertyChangedEvent(event) {

		// this is a very important step, because values may or may not be null when we register the object
		// and javascript doesn't have a way to lookup type information when new, valid values, are added we
		// need to toggle on/off notifications so that we don't cause memory leaks, orphanded handlers, etc...
		var oldValue = event.getOldValue();
		var newValue = event.getNewValue();

		// stop receiving notifications from the old value
		if (oldValue != null && oldValue.isAnimatable) {
			oldValue.togglePropertyChangedHandlerRecursive(this, this.handleDependantObjectPropertyChangedEvent.asDelegate(this), false);
		}

		// start receiving notifications from the new value
		if (newValue != null && newValue.isAnimatable) {
			newValue.togglePropertyChangedHandlerRecursive(this, this.handleDependantObjectPropertyChangedEvent.asDelegate(this), true);
		}

		// this is the final very important step to ensure that rendering get's updated when dependent graphics
		// objects change, based on the specified option we execute the appropriate action, property changes may
		// affect either the measure, layout, parent's measure, parent's layout or some combination thereof or
		// nothing at all
		var propOptions = event.getTarget().getAnimatablePropertyOptions(event.getPropertyName());

		if (propOptions != _PropertyOptions2["default"].None) {
			// affects the measure phase
			if ((propOptions & _PropertyOptions2["default"].AffectsMeasure) != _PropertyOptions2["default"].None) {
				this.requestMeasure();
			}

			// affects the layout phase
			if ((propOptions & _PropertyOptions2["default"].AffectsLayout) != _PropertyOptions2["default"].None) {
				this.requestLayout();
			}

			// affects the parent's measure phase
			if ((propOptions & _PropertyOptions2["default"].AffectsParentMeasure) != _PropertyOptions2["default"].None) {
				if (this.getParent() != null) {
					this.getParent().requestMeasure();
				}
			}

			// affects the parent's layout phase
			if ((propOptions & _PropertyOptions2["default"].AffectsParentLayout) != _PropertyOptions2["default"].None) {
				if (this.getParent() != null) {
					this.getParent().requestLayout();
				}
			}

			if ((propOptions & _PropertyOptions2["default"].AffectsRender) != _PropertyOptions2["default"].None) {
				this.invalidate();
				this.requestLayout();
			}
		}
	};

	Drawable.prototype.areAnyGraphicsDirty = function areAnyGraphicsDirty() {
		if (this.selfDirty || this.graphics.getHasChangedSinceLastRender()) {
			return true;
		}

		var len = this.getCount();
		var c = null;

		for (var i = 0; i < len; ++i) {
			c = this.getAt(i);

			if (c.getVisible()) {
				return c.areAnyGraphicsDirty();
			}
		}

		return false;
	};

	Drawable.prototype.updateDirtyRegions = function updateDirtyRegions() {
		var len = this.getCount();
		var c = null;

		for (var i = 0; i < len; ++i) {
			c = this.getAt(i);

			if (c.getVisible()) {
				c.updateDirtyRegions();
			}
		}

		// FIXME : need to update this so we do not have to compute the global
		//         bounds during every single render

		// get the new bounds from our graphics, if the graphics does not have
		// any strokes then the non-stroked bounds will just be returned
		this.computeBounds(this.graphics.getStrokeBounds());

		// add a dirty region if the bounds have changed or any of our graphics
		// are dirty
		if (this.globalBounds.isNotEqualTo(this.lastComputedBounds) || this.areAnyGraphicsDirty()) {
			// the the region tracker perform the intersections
			_DirtyRegionTracker2["default"].current().add(this.lastComputedBounds.x - 4, this.lastComputedBounds.y - 4, this.lastComputedBounds.width + 8, this.lastComputedBounds.height + 8);
			_DirtyRegionTracker2["default"].current().add(this.globalBounds.x, this.globalBounds.y, this.globalBounds.width, this.globalBounds.height);

			this.lastComputedBounds.x = this.globalBounds.x;
			this.lastComputedBounds.y = this.globalBounds.y;
			this.lastComputedBounds.width = this.globalBounds.width;
			this.lastComputedBounds.height = this.globalBounds.height;
		}
	};

	Drawable.prototype.renderRecursive = function renderRecursive(gfx) {
		if (this.getUnscaledWidth() <= 0 || this.getUnscaledHeight() <= 0) {
			return;
		}

		// save the current bounds
		this.lastComputedBounds.x = this.globalBounds.x;
		this.lastComputedBounds.y = this.globalBounds.y;
		this.lastComputedBounds.width = this.globalBounds.width;
		this.lastComputedBounds.height = this.globalBounds.height;

		gfx.save();

		// we have a bitmap cached, this might be either from the user
		// or from an effect, to use effects bitmap caching must be used,
		// otherwise we would still have to generate this bitmap to render
		// the effects
		if (this.bitmapCache != null) {
			this.renderBitmapCache(gfx);
		} // nothing unusual, so just render normally
		else {
				this.renderRecursiveImpl(gfx, false);
			}

		gfx.restore();

		// compute the local/global bounds, this will give us the actual bounds
		// based on what was actually rendered
		this.computeBounds(this.graphics.getStrokeBounds());

		// save the current dirty region and reset it
		this.lastDirtyRegion = this.dirtyRegion.copy();
		this.dirtyRegion.clear();

		// reset dirty flag
		this.selfDirty = false;
	};

	Drawable.prototype.renderBitmapCache = function renderBitmapCache(gfx) {
		var cacheWidth = this.bitmapCache.width;
		var cacheHeight = this.bitmapCache.height;
		var cacheSizeChanged = false;
		var cacheGfx = this.bitmapCache.getContext("2d");
		var renderableBitmap = this.bitmapCache;

		// the cache size and our size has changed so we need to reset our current
		// cache, which will invalidate it and require us to redraw
		if (cacheWidth != this.getUnscaledWidth() || cacheHeight != this.getUnscaledHeight()) {
			this.bitmapCache.width = Math.ceil(this.getUnscaledWidth());
			this.bitmapCache.height = Math.ceil(this.getUnscaledHeight());

			cacheWidth = this.bitmapCache.width;
			cacheHeight = this.bitmapCache.height;
			cacheSizeChanged = true;
		}

		// we optimize by only redrawing if either the cache size has changed or
		// if the user graphics has changed since the previous update
		if (cacheSizeChanged || this.areAnyGraphicsDirty()) {
			// erase the entire cache surface
			cacheGfx.clearRect(0, 0, this.bitmapCache.width, this.bitmapCache.height);

			// now we can render into our cache context as usual, however, instead of
			// applying the top level translation here we always render in the top left
			// corner and apply the translations once the final bitmap has been composited
			this.renderRecursiveImpl(cacheGfx, true);

			// finally, once the source bitmap has been composited we apply any render
			// effects to it, which will give us the final bitmap that will be used for
			// rendering to the display
			if (this.renderEffects != null && this.renderEffects.length > 0) {
				var len = this.renderEffects.length;
				var fx = null;
				var fxGfx = null;

				for (var i = 0; i < len; ++i) {
					fx = this.renderEffects[i];

					if (fx == null) {
						continue;
					}

					// reset the effect to our source bitmap size
					fx.reset(new _Size2["default"](cacheWidth, cacheHeight));

					// draw the currently composited bitmap, as we iterate, this bitmap
					// is reassigned so that each effect is layered one on top of the other
					// which will give us a bitmap with all the effects
					fxGfx = fx.getEffectContext();
					fxGfx.drawImage(renderableBitmap, 0, 0);

					if (fx.process(this)) {
						renderableBitmap = fx.getEffectCanvas();
					}
				}

				this.bitmapEffectCache = renderableBitmap;
			}
		}

		// we might have a cache of the bitmap effects, if so, we will use
		// this instead of the bitmap cache
		if (this.bitmapEffectCache != null) {
			renderableBitmap = this.bitmapEffectCache;
		}

		// the size of our drawable and the actual render size might differ, in which case
		// we need to compensate for this so we can re-align ourself to the correct position
		var dx = (this.getUnscaledWidth() - renderableBitmap.width) * 0.5;
		var dy = (this.getUnscaledHeight() - renderableBitmap.height) * 0.5;

		// finally we can actually render our bitmap, in this case, it's going to either
		// be the bitmapCache or the bitmapEffectCache

		this.applyRenderTransforms(gfx);

		gfx.drawImage(renderableBitmap, 0, 0, renderableBitmap.width, renderableBitmap.height, dx, dy, renderableBitmap.width, renderableBitmap.height);
	};

	Drawable.prototype.renderRecursiveImpl = function renderRecursiveImpl(gfx, skipTransform) {
		skipTransform = _Engine.ValueOrDefault(skipTransform, false);

		// set the user clip region, if specified, so that
		// it clips the entire content but is not affected
		// by any layout/render transformations
		var clip = this.getClip();

		if (clip != null) {
			gfx.beginPath();
			gfx.rect(clip.x, clip.y, clip.width, clip.height);
			gfx.clip();
		}

		// apply layout and render transforms, unless a skip
		// is requested (i.e. when drawing from bitmap cache)
		if (!skipTransform) {
			this.applyRenderTransforms(gfx);
		}

		// update the global alpha
		gfx.globalAlpha *= this.getAlpha();

		// perform the actual render operation
		this.graphics.render(gfx);

		// when specified, clip just the child content
		if (this.clipChildren) {
			gfx.beginPath();
			gfx.rect(0, 0, this.getUnscaledWidth(), this.getUnscaledHeight());
			gfx.clip();
		}

		// go ahead and run through our children and
		// try to render any visible ones
		//
		// TODO : should children that are not included
		//        in the layout be discarded?
		//
		var len = this.getCount();
		var child = null;

		for (var i = 0; i < len; ++i) {
			child = this.getAt(i);

			if (child == null) {
				continue;
			}

			if (child.getVisible()) {
				child.renderRecursive(gfx);
			}
		}

		// finally we need to render our alpha mask, if we have one, this is only done
		// when bitmap caching is enabled, since we need to change the compositing
		// operation we don't want to affect the main context
		if (this.alphaMask != null) {
			this.graphics.renderAlphaMask(gfx, this.alphaMask, this.getUnscaledWidth(), this.getUnscaledHeight());
		}
	};

	Drawable.prototype.applyRenderTransforms = function applyRenderTransforms(context) {

		//***********************************************************************************************
		// we optimize here by applying both transforms independently, it would be significantly slower
		// to allocate a new matrix and multiply these together each time they change or render, the
		// native context implementation will be able to handle the math much faster
		//***********************************************************************************************

		context.transform(this.layoutMatrix.m11, this.layoutMatrix.m12, this.layoutMatrix.m21, this.layoutMatrix.m22, this.layoutMatrix.offsetX, this.layoutMatrix.offsetY);

		var mx = this.renderTransform == null ? null : this.renderTransform.getValue();

		if (mx != null) {
			context.transform(mx.m11, mx.m12, mx.m21, mx.m22, mx.offsetX, mx.offsetY);
		}
	};

	Drawable.prototype.computeBounds = function computeBounds(strokedBounds) {
		var mx = this.renderTransform == null ? new _Matrix2D2["default"]() : this.renderTransform.getValue();
		var rect = new _Rectangle2["default"](strokedBounds.x, strokedBounds.y, strokedBounds.width, strokedBounds.height);

		if (rect.isZero()) {
			rect.width = this.getUnscaledWidth();
			rect.height = this.getUnscaledHeight();
		}

		// if we have any render effects then we will have to take them
		// into account as well since they may go outside of our initial bounds
		// i.e. for a drop shadow or blur effect
		if (this.renderEffects != null && this.renderEffects.length > 0) {
			var len = this.renderEffects.length;
			var fx = null;

			for (var i = 0; i < len; ++i) {
				fx = this.renderEffects[i];

				if (fx == null) {
					continue;
				}

				rect.unionWithRect(fx.getRenderBounds(rect));
			}
		}

		mx.append(this.getConcatenatedMatrix());

		if (mx.isIdentity()) {
			this.globalBounds.copyFrom(rect);
			this.localBounds.copyFrom(rect);
		} else {
			this.globalBounds = mx.transformRect(rect);
			this.localBounds = mx.invert().transformRect(rect);
		}
	};

	return Drawable;
})(Mixed);

exports["default"] = Drawable;
module.exports = exports["default"];

},{"../Application":38,"../Engine":44,"../Event":47,"../Matrix2D":54,"../NamedObjectCollection":56,"../Rectangle":59,"../Size":60,"../Vector2D":67,"../animation/Animatable":70,"../graphics/Graphics":82,"../input/MouseEvent":106,"../input/NavigationMode":111,"./BorderMetrics":138,"./DirtyRegion":143,"./DirtyRegionTracker":144,"./Dock":146,"./HorizontalAlignment":148,"./LayoutManager":150,"./PropertyOptions":156,"./VerticalAlignment":162,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],148:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var HorizontalAlignment = {
	"Left": 0,
	"Center": 0.5,
	"Right": 1
};

exports["default"] = HorizontalAlignment;
module.exports = exports["default"];

},{}],149:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _EventDispatcher2 = require("../EventDispatcher");

var _EventDispatcher3 = _interopRequireDefault(_EventDispatcher2);

var _SourceEvent = require("../SourceEvent");

var _SourceEvent2 = _interopRequireDefault(_SourceEvent);

var _Size = require("../Size");

var _Size2 = _interopRequireDefault(_Size);

var ImageSource = (function (_EventDispatcher) {
	_inherits(ImageSource, _EventDispatcher);

	function ImageSource() {
		_classCallCheck(this, ImageSource);

		_EventDispatcher.call(this);

		this.isSourceReady = false;
		this.size = _Size2["default"].Zero();
		this.data = null;
	}

	ImageSource.prototype.getIsValid = function getIsValid() {
		return true;
	};

	ImageSource.prototype.getNativeData = function getNativeData() {
		return this.data;
	};

	ImageSource.prototype.getIsSourceReady = function getIsSourceReady() {
		return this.isSourceReady;
	};

	ImageSource.prototype.getWidth = function getWidth() {
		return this.getSize().width;
	};

	ImageSource.prototype.getHeight = function getHeight() {
		return this.getSize().height;
	};

	ImageSource.prototype.getSize = function getSize() {
		return this.size;
	};

	ImageSource.prototype.load = function load() {};

	ImageSource.prototype.raiseSourceReadyEvent = function raiseSourceReadyEvent(args) {
		this.dispatchEvent(new _SourceEvent2["default"](_SourceEvent2["default"].READY));
	};

	return ImageSource;
})(_EventDispatcher3["default"]);

exports["default"] = ImageSource;
module.exports = exports["default"];

},{"../EventDispatcher":48,"../Size":60,"../SourceEvent":61,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],150:[function(require,module,exports){
"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Dictionary = require("../Dictionary");

var _Dictionary2 = _interopRequireDefault(_Dictionary);

var _EventDispatcher2 = require("../EventDispatcher");

var _EventDispatcher3 = _interopRequireDefault(_EventDispatcher2);

var _Event = require("../Event");

var _Event2 = _interopRequireDefault(_Event);

var _FrameEvent = require("../FrameEvent");

var _FrameEvent2 = _interopRequireDefault(_FrameEvent);

var _Engine = require("../Engine");

var _EngineMath = require("../EngineMath");

var _Application = require("../Application");

var _Application2 = _interopRequireDefault(_Application);

var LayoutBin = function LayoutBin() {
	_classCallCheck(this, LayoutBin);

	this.items = new _Dictionary2["default"]();
	this.length = 0;
};

var LayoutPriorityQueue = (function () {
	function LayoutPriorityQueue() {
		_classCallCheck(this, LayoutPriorityQueue);

		this.priorityBins = [];
		this.minPriority = 0;
		this.maxPriority = -1;
	}

	LayoutPriorityQueue.prototype.addObject = function addObject(obj, priority) {

		// Update our min and max priorities.
		if (this.maxPriority < this.minPriority) {
			this.minPriority = this.maxPriority = priority;
		} else {
			if (priority < this.minPriority) {
				this.minPriority = priority;
			}

			if (priority > this.maxPriority) {
				this.maxPriority = priority;
			}
		}

		var bin = this.priorityBins[priority];

		if (bin == null) {
			// If no hash exists for the specified priority, create one.
			bin = new LayoutBin();
			this.priorityBins[priority] = bin;
			bin.items.set(obj, true);
			bin.length++;
		} else {
			// If we don't already hold the obj in the specified hash, add it
			// and update our item count.
			if (bin.items.get(obj) == null) {
				bin.items.set(obj, true);
				bin.length++;
			}
		}
	};

	LayoutPriorityQueue.prototype.removeLargest = function removeLargest() {
		var obj = null;

		if (this.minPriority <= this.maxPriority) {
			var bin = this.priorityBins[this.maxPriority];

			while (bin == null || bin.length == 0) {
				this.maxPriority--;

				if (this.maxPriority < this.minPriority) {
					return null;
				}

				bin = this.priorityBins[this.maxPriority];
			}

			// Remove the item with largest priority from our priority queue.
			// Must use a for loop here since we're removing a specific item
			// from a 'Dictionary' (no means of directly indexing).
			var keys = bin.items.getKeys();

			obj = keys[i];
			this.removeChild(obj, this.maxPriority);

			// Update maxPriority if applicable.
			while (bin == null || bin.length == 0) {
				this.maxPriority--;

				if (this.maxPriority < this.minPriority) break;

				bin = this.priorityBins[this.maxPriority];
			}
		}

		return obj;
	};

	LayoutPriorityQueue.prototype.removeLargestChild = function removeLargestChild(client) {
		var max = this.maxPriority;
		var min = client.getDepth();

		while (min <= max) {
			var bin = this.priorityBins[max];

			if (bin != null && bin.length > 0) {
				if (max == client.getDepth()) {
					// If the current level we're searching matches that of our
					// client, no need to search the entire list, just check to see
					// if the client exists in the queue (it would be the only item
					// at that nestLevel).
					if (bin.items.get(client) != null) {
						this.removeChild(client, max);

						return client;
					}
				} else {
					var keys = bin.items.getKeys();
					var key = null;

					for (var i = 0; i < keys.length; ++i) {
						key = keys[i];

						if (this.contains(client, key)) {
							this.removeChild(key, max);
							return key;
						}
					}
				}

				max--;
			} else {
				if (max == this.maxPriority) {
					this.maxPriority--;
				}

				max--;

				if (max < min) break;
			}
		}
	};

	LayoutPriorityQueue.prototype.removeSmallest = function removeSmallest() {
		var obj;

		if (this.minPriority <= this.maxPriority) {
			var bin = this.priorityBins[this.minPriority];

			while (bin == null || bin.length == 0) {
				this.minPriority++;

				if (this.minPriority > this.maxPriority) return;

				bin = this.priorityBins[this.minPriority];
			}

			// Remove the item with smallest priority from our priority queue.
			// Must use a for loop here since we're removing a specific item
			// from a 'Dictionary' (no means of directly indexing).

			var keys = bin.items.getKeys();

			obj = keys[0];
			this.removeChild(obj, this.minPriority);

			// Update minPriority if applicable.
			while (bin == null || bin.length == 0) {
				this.minPriority++;

				if (this.minPriority > this.maxPriority) break;

				bin = this.priorityBins[this.minPriority];
			}
		}

		return obj;
	};

	LayoutPriorityQueue.prototype.removeSmallestChild = function removeSmallestChild(client) {
		var min = client.getDepth();

		while (min <= this.maxPriority) {
			var bin = this.priorityBins[min];

			if (bin != null && bin.length > 0) {
				if (min == client.getDepth()) {
					// If the current level we're searching matches that of our
					// client, no need to search the entire list, just check to see
					// if the client exists in the queue (it would be the only item
					// at that nestLevel).
					if (bin.items.get(client) != null) {
						this.removeChild(client, min);
						return client;
					}
				} else {
					var keys = bin.items.getKeys();
					var key;

					for (var i = 0; i < keys.length; ++i) {
						key = keys[i];

						if (this.contains(client, key)) {
							this.removeChild(key, min);
							return key;
						}
					}
				}

				min++;
			} else {
				if (min == this.minPriority) {
					this.minPriority++;
				}

				min++;

				if (min > this.maxPriority) break;
			}
		}
	};

	LayoutPriorityQueue.prototype.removeChild = function removeChild(client, level) {
		level = _Engine.ValueOrDefault(level, -1);

		var priority = level >= 0 ? level : client.getDepth();
		var bin = this.priorityBins[priority];

		if (bin != null && bin.items.get(client) != null) {
			bin.items.remove(client);
			bin.length--;

			return client;
		}
	};

	LayoutPriorityQueue.prototype.removeAll = function removeAll() {
		this.priorityBins = [];
		this.minPriority = 0;
		this.maxPriority = -1;
	};

	LayoutPriorityQueue.prototype.isEmpty = function isEmpty() {
		return this.minPriority > this.maxPriority;
	};

	LayoutPriorityQueue.prototype.contains = function contains(parent, child) {
		return parent.exists(child);
	};

	return LayoutPriorityQueue;
})();

var LayoutManager = (function (_EventDispatcher) {
	_inherits(LayoutManager, _EventDispatcher);

	function LayoutManager() {
		_classCallCheck(this, LayoutManager);

		_EventDispatcher.call(this);

		/** holds the drawables that have been processed and are
   pending an update notification **/
		this.pendingUpdateQueue = new LayoutPriorityQueue();

		/** holds the level of the current drawable that is
   being validated by the validateDrawableNow call, this
   is used for nested validation calls. during an immediate
   validation we only want drawables at this level or deeper
   to be re-queued **/
		this.currentDepth = _EngineMath.MaxInt;

		/** holds the drawables that have had their properties
   invalidated and are awaiting validation **/
		this.propertiesQueue = new LayoutPriorityQueue();

		/** holds the drawables that have had their measurements
   invalidated and are awaiting validation **/
		this.measureQueue = new LayoutPriorityQueue();

		/** holds the drawables that have had their layout
   invalidated and are awaiting validation **/
		this.layoutQueue = new LayoutPriorityQueue();

		/** flag that indicates whether there are properties
   pending validation **/
		this.arePropertiesInvalid = false;

		/** flag that indicates whether any properties have been
   invalidated while in the validateDrawableNow call, but
   only for those drawable's at the same or deeper level
   than the drawable that is currently being validated **/
		this.arePropertiesInvalidNow = false;

		/** flag that indicates whether there are measurements
   pending validation **/
		this.areMeasurementsInvalid = false;

		/** flag that indicates whether any measurements have been
   invalidated while in the validateDrawableNow call, but
   only for those drawable's at the same or deeper level
   than the drawable that is currently being validated **/
		this.areMeasurementsInvalidNow = false;

		/** flag that indicates whether there are layouts
   pending validation **/
		this.areLayoutsInvalid = false;

		/** flag that indicates whether the first frame has
   been skipped, we do this as an initial warm up
   period **/
		this.frameSkipped = false;

		/** flag that indicates whether the frame and render
   listeners have been registered **/
		this.areListenersRegistered = false;
	}

	LayoutManager.prototype.invalidateProperties = function invalidateProperties(drawable) {

		if (!this.arePropertiesInvalid) {
			this.arePropertiesInvalid = true;
			this.registerListeners();
		}

		if (this.currentDepth <= drawable.getDepth()) {
			this.arePropertiesInvalidNow = true;
		}

		this.propertiesQueue.addObject(drawable, drawable.getDepth());
	};

	LayoutManager.prototype.requestMeasure = function requestMeasure(drawable) {
		if (!this.areMeasurementsInvalid) {
			this.areMeasurementsInvalid = true;
			this.registerListeners();
		}

		if (this.currentDepth <= drawable.getDepth()) {
			this.areMeasurementsInvalidNow = true;
		}

		this.measureQueue.addObject(drawable, drawable.getDepth());
	};

	LayoutManager.prototype.requestLayout = function requestLayout(drawable) {
		if (!this.areLayoutsInvalid) {
			this.areLayoutsInvalid = true;
			this.registerListeners();
		}

		this.layoutQueue.addObject(drawable, drawable.getDepth());
	};

	LayoutManager.prototype.validateProperties = function validateProperties() {
		if (!this.arePropertiesInvalid) return;

		var drawable = this.propertiesQueue.removeSmallest();

		while (drawable != null) {

			if (drawable.canValidate()) {
				drawable.validateProperties();

				this.queuePendingUpdate(drawable);
			}

			drawable = this.propertiesQueue.removeSmallest();
		}

		if (this.propertiesQueue.isEmpty()) {
			this.arePropertiesInvalid = false;
		}
	};

	LayoutManager.prototype.validateMeasure = function validateMeasure() {
		if (!this.areMeasurementsInvalid) return;

		var drawable = this.measureQueue.removeLargest();

		while (drawable != null) {

			if (drawable.canValidate()) {
				drawable.validateMeasure();

				this.queuePendingUpdate(drawable);
			}

			drawable = this.measureQueue.removeLargest();
		}

		if (this.measureQueue.isEmpty()) {
			this.areMeasurementsInvalid = false;
		}
	};

	LayoutManager.prototype.validateLayout = function validateLayout() {
		if (!this.areLayoutsInvalid) return;

		var drawable = this.layoutQueue.removeSmallest();

		while (drawable != null) {

			if (drawable.canValidate()) {
				drawable.validateLayout();

				this.queuePendingUpdate(drawable);
			}

			drawable = this.layoutQueue.removeSmallest();
		}

		if (this.layoutQueue.isEmpty()) {
			this.areLayoutsInvalid = false;
		}
	};

	LayoutManager.prototype.process = function process() {

		// validate properties, measurements, and layouts
		this.validateAll();

		// reset listener registration, we will either re-register or our visuals
		// are initialized and updated
		this.areListenersRegistered = false;

		// still invalid, wait for the next frame/render to try another pass
		// at validating
		if (this.isInvalid()) {
			this.registerListeners();
			return;
		}

		var drawable = this.pendingUpdateQueue.removeLargest();

		while (drawable != null) {

			// mark this drawable as initialized
			if (!drawable.getIsInitialized()) {
				drawable.setIsInitialized(true);
			}

			// notify and mark that this drawable is updated
			drawable.dispatchEvent(new _Event2["default"](_Event2["default"].UPDATED));
			drawable.isPendingUpdate = false;

			// remove from the update queue
			drawable = this.pendingUpdateQueue.removeLargest();
		}

		// notify any listeners that this layout manager
		// has been completely updated
		this.dispatchEvent(new _Event2["default"](_Event2["default"].LAYOUT_UPDATED));
	};

	LayoutManager.prototype.validateAll = function validateAll() {
		this.validateProperties();
		this.validateMeasure();
		this.validateLayout();
	};

	LayoutManager.prototype.validateNow = function validateNow() {
		var infiniteLoopGuard = 0;

		while (this.areListenersRegistered && infiniteLoopGuard++ < 100) {
			this.process();
		}
	};

	LayoutManager.prototype.validateDrawableNow = function validateDrawableNow(targetDrawable, dontValidateVisualStack) {
		dontValidateVisualStack = _Engine.ValueOrDefault(dontValidateVisualStack, false);

		var isRunning = false;
		var previousDepth = this.currentDepth;
		var drawable = null;

		if (this.currentDepth == _EngineMath.MaxInt) {
			this.currentDepth = targetDrawable.getDepth();
		}

		while (!isRunning) {
			// exit as soon as all the properties and sizes have been
			// validated or if the visual stack is going to be validated
			// then we'll exit if no changes in properties or sizes occurred
			// while the visual stack was being validated
			isRunning = true;

			/*********************************************************/
			/**                VALIDATE PROPERTIES                  **/
			/*********************************************************/
			drawable = this.propertiesQueue.removeSmallestChild(targetDrawable);

			while (drawable != null) {

				if (drawable.canValidate()) {
					drawable.validateProperties();

					this.queuePendingUpdate(drawable);
				}

				drawable = this.propertiesQueue.removeSmallestChild(targetDrawable);
			}

			if (this.propertiesQueue.isEmpty()) {
				this.arePropertiesInvalid = false;
				this.arePropertiesInvalidNow = false;
			}

			/*********************************************************/
			/**                  VALIDATE MEASURE                   **/
			/*********************************************************/
			drawable = this.measureQueue.removeLargestChild(targetDrawable);

			while (drawable != null) {
				if (drawable.canValidate()) {
					drawable.validateMeasure();

					this.queuePendingUpdate(drawable);
				}

				drawable = this.measureQueue.removeLargestChild(targetDrawable);
			}

			if (this.measureQueue.isEmpty()) {
				this.areMeasurementsInvalid = false;
				this.areMeasurementsInvalidNow = false;
			}

			/*********************************************************/
			/**                   VALIDATE LAYOUT                   **/
			/*********************************************************/
			if (!dontValidateVisualStack) {
				drawable = this.layoutQueue.removeSmallestChild(targetDrawable);

				while (drawable != null) {
					if (drawable.canValidate()) {
						drawable.validateLayout();

						this.queuePendingUpdate(drawable);
					}

					if (this.arePropertiesInvalidNow) {
						drawable = this.propertiesQueue.removeSmallestChild(targetDrawable);

						if (drawable != null) {
							this.propertiesQueue.addObject(drawable, drawable.getDepth());

							isRunning = false;
							break;
						}
					}

					if (this.areMeasurementsInvalidNow) {
						drawable = this.measureQueue.removeLargestChild(targetDrawable);

						if (drawable != null) {
							this.measureQueue.addObject(drawable, drawable.getDepth());

							isRunning = false;
							break;
						}
					}

					drawable = this.layoutQueue.removeSmallestChild(targetDrawable);
				}

				if (this.layoutQueue.isEmpty()) {
					this.areLayoutsInvalid = false;
				}
			}
		}

		if (previousDepth == _EngineMath.MaxInt) {
			this.currentDepth = _EngineMath.MaxInt;

			if (!dontValidateVisualStack) {
				drawable = this.pendingUpdateQueue.removeLargestChild(targetDrawable);

				while (drawable != null) {
					if (!drawable.getIsInitialized()) {
						drawable.setIsInitialized(true);
					}

					drawable.dispatchEvent(new _Event2["default"](_Event2["default"].UPDATED));
					drawable.isPendingUpdate = false;

					drawable = this.pendingUpdateQueue.removeLargestChild(targetDrawable);
				}
			}
		}
	};

	LayoutManager.prototype.isInvalid = function isInvalid() {
		return this.arePropertiesInvalid || this.areMeasurementsInvalid || this.areLayoutsInvalid;
	};

	LayoutManager.prototype.queuePendingUpdate = function queuePendingUpdate(drawable) {
		if (drawable == null || drawable.isPendingUpdate) return;

		this.pendingUpdateQueue.addObject(drawable, drawable.getDepth());
		drawable.isPendingUpdate = true;
	};

	LayoutManager.prototype.registerListeners = function registerListeners() {
		if (this.areListenersRegistered) return;

		var app = _Application2["default"].getInstance();

		// listen for the next frame event to occur which will
		// process any validation/initialization that is pending
		app.addEventHandler(_FrameEvent2["default"].ENTER, this.handleFrameTickEvent.asDelegate(this));

		// wait to invalidate until the first frame has finished, this way we
		// can use the entire frame for initial startup
		if (this.frameSkipped) {
			app.invalidate();
		}

		this.areListenersRegistered = true;
	};

	LayoutManager.prototype.handleFrameTickEvent = function handleFrameTickEvent(event) {
		var app = _Application2["default"].getInstance();

		// we only wanted to skip a single frame
		if (!this.frameSkipped) {
			this.frameSkipped = true;
		} else {
			// remove event callbacks until our validation/initialization
			// phase completes to avoid any redundant calls
			app.removeEventHandler(_FrameEvent2["default"].ENTER, this.handleFrameTickEvent.asDelegate(this));

			this.process();
		}
	};

	LayoutManager.getInstance = function getInstance() {
		if (LayoutManager.Instance == null) {
			LayoutManager.Instance = new LayoutManager();
		}

		return LayoutManager.Instance;
	};

	return LayoutManager;
})(_EventDispatcher3["default"]);

exports["default"] = LayoutManager;
module.exports = exports["default"];

},{"../Application":38,"../Dictionary":43,"../Engine":44,"../EngineMath":45,"../Event":47,"../EventDispatcher":48,"../FrameEvent":51,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],151:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Drawable2 = require("./Drawable");

var _Drawable3 = _interopRequireDefault(_Drawable2);

var _Engine = require("../Engine");

var Panel = (function (_Drawable) {
	_inherits(Panel, _Drawable);

	function Panel(name) {
		_classCallCheck(this, Panel);

		_Drawable.call(this, name);

		this.background = null;
	}

	Panel.prototype.getBackground = function getBackground() {
		return this.background;
	};

	Panel.prototype.setBackground = function setBackground(value) {
		if (_Engine.AreNotEqual(this.background, value)) {
			this.background = value;
			this.requestLayout();
		}
	};

	Panel.prototype.layout = function layout(unscaledWidth, unscaledHeight) {
		_Drawable.prototype.layout.call(this, unscaledWidth, unscaledHeight);

		this.graphics.clear();

		if (this.background != null) {
			this.graphics.drawRect(0, 0, unscaledWidth, unscaledHeight);
			this.graphics.fill(this.background);
		}
	};

	return Panel;
})(_Drawable3["default"]);

exports["default"] = Panel;
module.exports = exports["default"];

},{"../Engine":44,"./Drawable":147,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],152:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _EventDispatcher = require("../EventDispatcher");

var _EventDispatcher2 = _interopRequireDefault(_EventDispatcher);

var _animationAnimatable = require("../animation/Animatable");

var _animationAnimatable2 = _interopRequireDefault(_animationAnimatable);

var _PenLineCap = require("./PenLineCap");

var _PenLineCap2 = _interopRequireDefault(_PenLineCap);

var _PenLineJoin = require("./PenLineJoin");

var _PenLineJoin2 = _interopRequireDefault(_PenLineJoin);

var _DashStyle = require("./DashStyle");

var _DashStyle2 = _interopRequireDefault(_DashStyle);

var _Engine = require("../Engine");

var _PropertyOptions = require("./PropertyOptions");

var _PropertyOptions2 = _interopRequireDefault(_PropertyOptions);

var Mixed = _Engine.Mixin(_EventDispatcher2["default"], _animationAnimatable2["default"]);

var Pen = (function (_Mixed) {
	_inherits(Pen, _Mixed);

	function Pen(brush, thickness) {
		_classCallCheck(this, Pen);

		_Mixed.call(this);

		this.setBrush(brush);
		this.setLineCap(_PenLineCap2["default"].Flat);
		this.setLineJoin(_PenLineJoin2["default"].Miter);
		this.setMiterLimit(10);
		this.setDashCap(_PenLineCap2["default"].Square);
		this.setDashStyle(_DashStyle2["default"].Solid);
		this.setThickness(_Engine.ValueOrDefault(thickness, 1));

		this.initializeAnimatableProperties();
	}

	Pen.prototype.initializeAnimatablePropertiesCore = function initializeAnimatablePropertiesCore() {
		this.enableAnimatableProperty("brush", this.getBrush, this.setBrush, _PropertyOptions2["default"].AffectsLayout);
		this.enableAnimatableProperty("lineCap", this.getLineCap, this.setLineCap, _PropertyOptions2["default"].AffectsLayout);
		this.enableAnimatableProperty("lineJoin", this.getLineJoin, this.setLineJoin, _PropertyOptions2["default"].AffectsLayout);
		this.enableAnimatableProperty("miterLimit", this.getMiterLimit, this.setMiterLimit, _PropertyOptions2["default"].AffectsLayout);
		this.enableAnimatableProperty("dashCap", this.getDashCap, this.setDashCap, _PropertyOptions2["default"].AffectsLayout);
		this.enableAnimatableProperty("dashStyle", this.getDashStyle, this.setDashStyle, _PropertyOptions2["default"].AffectsLayout);
		this.enableAnimatableProperty("thickness", this.getThickness, this.setThickness, _PropertyOptions2["default"].AffectsLayout | _PropertyOptions2["default"].AffectsMeasure);
	};

	Pen.prototype.getBrush = function getBrush() {
		return this.getPropertyValue("brush");
	};

	Pen.prototype.setBrush = function setBrush(value) {
		this.setPropertyValue("brush", value);
	};

	Pen.prototype.getLineCap = function getLineCap() {
		return this.getPropertyValue("lineCap");
	};

	Pen.prototype.setLineCap = function setLineCap(value) {
		this.setPropertyValue("lineCap", value);
	};

	Pen.prototype.getLineJoin = function getLineJoin() {
		return this.getPropertyValue("lineJoin");
	};

	Pen.prototype.setLineJoin = function setLineJoin(value) {
		this.setPropertyValue("lineJoin", value);
	};

	Pen.prototype.getMiterLimit = function getMiterLimit() {
		return this.getPropertyValue("miterLimit");
	};

	Pen.prototype.setMiterLimit = function setMiterLimit(value) {
		this.setPropertyValue("miterLimit", value);
	};

	Pen.prototype.getDashCap = function getDashCap() {
		return this.getPropertyValue("dashCap");
	};

	Pen.prototype.setDashCap = function setDashCap(value) {
		this.setPropertyValue("dashCap", value);
	};

	Pen.prototype.getDashStyle = function getDashStyle() {
		return this.getPropertyValue("dashStyle");
	};

	Pen.prototype.setDashStyle = function setDashStyle(value) {
		this.setPropertyValue("dashStyle", value);
	};

	Pen.prototype.getThickness = function getThickness() {
		return this.getPropertyValue("thickness");
	};

	Pen.prototype.setThickness = function setThickness(value) {
		this.setPropertyValue("thickness", value);
	};

	Pen.prototype.isEqualTo = function isEqualTo(other) {
		return this.getThickness() == other.getThickness() && this.getMiterLimit() == other.getMiterLimit() && this.getDashCap() == other.getDashCap() && this.getDashStyle() == other.getDashStyle() && this.getLineJoin() == other.getLineJoin() && this.getLineCap() == other.getLineCap() && _Engine.AreEqual(this.getBrush(), other.getBrush());
	};

	return Pen;
})(Mixed);

exports["default"] = Pen;
module.exports = exports["default"];

},{"../Engine":44,"../EventDispatcher":48,"../animation/Animatable":70,"./DashStyle":142,"./PenLineCap":153,"./PenLineJoin":154,"./PropertyOptions":156,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],153:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var PenLineCap = {
	"Flat": 0,
	"Round": 1,
	"Square": 2
};

exports["default"] = PenLineCap;
module.exports = exports["default"];

},{}],154:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var PenLineJoin = {
	"Miter": 0,
	"Bevel": 1,
	"Round": 2
};

exports["default"] = PenLineJoin;
module.exports = exports["default"];

},{}],155:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _Event2 = require("../Event");

var _Event3 = _interopRequireDefault(_Event2);

var PropertyChangedEvent = (function (_Event) {
	_inherits(PropertyChangedEvent, _Event);

	function PropertyChangedEvent(type, propName, oldValue, newValue, bubbles, cancelable) {
		_classCallCheck(this, PropertyChangedEvent);

		_Event.call(this, type, bubbles, cancelable);

		this.propName = propName;
		this.oldValue = oldValue;
		this.newValue = newValue;
	}

	PropertyChangedEvent.prototype.getPropertyName = function getPropertyName() {
		return this.propName;
	};

	PropertyChangedEvent.prototype.getOldValue = function getOldValue() {
		return this.oldValue;
	};

	PropertyChangedEvent.prototype.getNewValue = function getNewValue() {
		return this.newValue;
	};

	return PropertyChangedEvent;
})(_Event3["default"]);

PropertyChangedEvent.PROPERTY_CHANGED = "propertyChanged";

exports["default"] = PropertyChangedEvent;
module.exports = exports["default"];

},{"../Event":47,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],156:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var PropertyOptions = {
	None: (1 << 0) - 1,
	AffectsMeasure: 1 << 0,
	AffectsLayout: 1 << 1,
	AffectsParentMeasure: 1 << 2,
	AffectsParentLayout: 1 << 3,
	AffectsRender: 1 << 4
};

exports["default"] = PropertyOptions;
module.exports = exports["default"];

},{}],157:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var ScreenOrientation = {
	"Portrait": 0,
	"LandscapeRight": 1,
	"LandscapeLeft": 2,
	"PortraitUpsideDown": 3
};

exports["default"] = ScreenOrientation;
module.exports = exports["default"];

},{}],158:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var Stretch = {
	"None": 0,
	"Uniform": 1,
	"UniformToFill": 2,
	"Fill": 3
};

var StretchDirection = {
	"Up": 0,
	"Down": 1,
	"Both": 2
};

exports.Stretch = Stretch;
exports.StretchDirection = StretchDirection;

},{}],159:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var TextureCachePolicy = {
	"NoCache": 0, // never cache and always load from the server
	"InMemory": 1, // only cache in memory and bypass the browser cache on the first load
	"UseBrowserCache": 2, // only cache in the browser
	"Cache": 3 // default, cache in memory and in the browser
};

exports["default"] = TextureCachePolicy;
module.exports = exports["default"];

},{}],160:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _EventDispatcher2 = require("../EventDispatcher");

var _EventDispatcher3 = _interopRequireDefault(_EventDispatcher2);

var _LoadEvent = require("../LoadEvent");

var _LoadEvent2 = _interopRequireDefault(_LoadEvent);

var TextureData = (function (_EventDispatcher) {
	_inherits(TextureData, _EventDispatcher);

	function TextureData() {
		_classCallCheck(this, TextureData);

		_EventDispatcher.call(this);

		this.image = null;
		this.isLoaded = false;
	}

	TextureData.prototype.load = function load(url) {
		this.image = new Image();
		this.image.addEventListener("load", this.handleLoadEvent.asDelegate(this), false);
		this.image.addEventListener("error", this.handleErrorEvent.asDelegate(this), false);
		this.image.src = url;

		this.isLoaded = false;
	};

	TextureData.prototype.handleLoadEvent = function handleLoadEvent(e) {
		this.isLoaded = true;
		this.dispatchEvent(new _LoadEvent2["default"](_LoadEvent2["default"].SUCCESS));
	};

	TextureData.prototype.handleErrorEvent = function handleErrorEvent(e) {
		this.isLoaded = false;
		this.dispatchEvent(new _LoadEvent2["default"](_LoadEvent2["default"].FAILURE));
	};

	return TextureData;
})(_EventDispatcher3["default"]);

exports["default"] = TextureData;
module.exports = exports["default"];

},{"../EventDispatcher":48,"../LoadEvent":53,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],161:[function(require,module,exports){
"use strict";

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;

var _ImageSource2 = require("./ImageSource");

var _ImageSource3 = _interopRequireDefault(_ImageSource2);

var _Engine = require("../Engine");

var _TextureCachePolicy = require("./TextureCachePolicy");

var _TextureCachePolicy2 = _interopRequireDefault(_TextureCachePolicy);

var _LoadEvent = require("../LoadEvent");

var _LoadEvent2 = _interopRequireDefault(_LoadEvent);

var _ProgressEvent = require("../ProgressEvent");

var _ProgressEvent2 = _interopRequireDefault(_ProgressEvent);

var _Size = require("../Size");

var _Size2 = _interopRequireDefault(_Size);

var _EngineMath = require("../EngineMath");

var _EngineMath2 = _interopRequireDefault(_EngineMath);

var _TextureData = require("./TextureData");

var _TextureData2 = _interopRequireDefault(_TextureData);

var TextureSource = (function (_ImageSource) {
	_inherits(TextureSource, _ImageSource);

	function TextureSource(path, autoload, cachePolicy) {
		_classCallCheck(this, TextureSource);

		_ImageSource.call(this);

		this.url = null;
		this.autoload = _Engine.ValueOrDefault(autoload, true);
		this.cachePolicy = _Engine.ValueOrDefault(cachePolicy, _TextureCachePolicy2["default"].Cache);
		this.hasError = false;
		this.error = null;
		this.setUrl(path);
	}

	TextureSource.prototype.getIsValid = function getIsValid() {
		return !this.getHasError();
	};

	TextureSource.prototype.getHasError = function getHasError() {
		return this.hasError;
	};

	TextureSource.prototype.getError = function getError() {
		return this.error;
	};

	TextureSource.prototype.getCachePolicy = function getCachePolicy() {
		return this.cachePolicy;
	};

	TextureSource.prototype.getUrl = function getUrl() {
		return this.url;
	};

	TextureSource.prototype.setUrl = function setUrl(value) {
		if (this.url != value) {
			this.reset();
			this.url = value;

			if (this.autoload) {
				this.load();
			}
		}
	};

	TextureSource.prototype.raiseLoadCompletedEvent = function raiseLoadCompletedEvent() {
		this.dispatchEvent(new _LoadEvent2["default"](_LoadEvent2["default"].SUCCESS));
		this.raiseSourceReadyEvent();
	};

	TextureSource.prototype.raiseLoadFailedEvent = function raiseLoadFailedEvent() {
		this.dispatchEvent(new _LoadEvent2["default"](_LoadEvent2["default"].FAILURE));
	};

	TextureSource.prototype.raiseLoadProgressEvent = function raiseLoadProgressEvent() {
		// TODO : need to figure out a good way to dispatch actual progress info
		this.dispatchEvent(new _ProgressEvent2["default"](_ProgressEvent2["default"].PROGRESS, 100, 100));
	};

	TextureSource.prototype.reset = function reset() {
		this.data = null;
		this.size = _Size2["default"].Zero();
		this.isSourceReady = false;
		this.hasError = false;
		this.error = "";
		this.url = null;
	};

	TextureSource.prototype.load = function load() {
		if (this.isSourceReady) {
			this.raiseLoadCompletedEvent();
			return;
		}

		var url = this.url;
		var cacheKey = this.url.toLowerCase();
		var textureData = _Engine.TextureCacheGet(cacheKey);

		// no cached texture, load from the server
		if (textureData == null) {
			// add a random number to the url so we can bypass the browser cache
			if (this.shouldAlwaysLoadFromServer()) {
				var str = "s2=" + _EngineMath2["default"].randomIntTo(1000);

				if (url.indexOf("?") == -1) {
					url += "?" + str;
				} else {
					url += "&" + str;
				}
			}

			// create the texture data proxy and load in the data
			textureData = new _TextureData2["default"]();
			textureData.addEventHandler(_LoadEvent2["default"].SUCCESS, this.handleLoadEvent.asDelegate(this));
			textureData.addEventHandler(_LoadEvent2["default"].FAILURE, this.handleErrorEvent.asDelegate(this));
			textureData.load(url);

			// cache this texture now so that it can be re-used right away, even before it's fully loaded
			if (this.shouldCacheTexture()) {
				_Engine.TextureCacheAdd(cacheKey, textureData);
			}
		}

		// the texture is cached, load from memory
		else {
				// the texture data is already loaded, so just finish up as usual
				if (textureData.isLoaded) {
					this.finishLoad(textureData);
				} else {
					// since the data is not yet loaded, we still need to listen for the events even
					// through we are not the original loader so that everything will get setup correctly
					textureData.addEventHandler(_LoadEvent2["default"].SUCCESS, this.handleLoadEvent.asDelegate(this));
					textureData.addEventHandler(_LoadEvent2["default"].FAILURE, this.handleErrorEvent.asDelegate(this));
				}
			}
	};

	TextureSource.prototype.finishLoad = function finishLoad(textureData) {
		// keep a reference to the native image and sizes
		this.data = textureData.image;
		this.size.width = this.data.width;
		this.size.height = this.data.height;

		// notify this source is now ready to use
		this.isSourceReady = true;
		this.raiseLoadCompletedEvent();
	};

	TextureSource.prototype.handleLoadEvent = function handleLoadEvent(event) {
		this.removeEventHandlers(event.getTarget());
		this.finishLoad(event.getTarget());
	};

	TextureSource.prototype.handleErrorEvent = function handleErrorEvent(event) {
		// loading failed, notify this source cannot be used
		//
		// TODO : need to see about using more informative error messages
		//        about that actual reason, response code, etc... that was
		//        returned from the server.
		//
		this.hasError = true;
		this.error = "Texture failed to load.";
		this.isSourceReady = false;

		this.removeEventHandlers(event.getTarget());
		this.raiseLoadFailedEvent();
	};

	TextureSource.prototype.shouldAlwaysLoadFromServer = function shouldAlwaysLoadFromServer() {
		return this.getCachePolicy() == _TextureCachePolicy2["default"].InMemory || this.getCachePolicy() == _TextureCachePolicy2["default"].NoCache;
	};

	TextureSource.prototype.shouldCacheTexture = function shouldCacheTexture() {
		return this.getCachePolicy() == _TextureCachePolicy2["default"].InMemory || this.getCachePolicy() == _TextureCachePolicy2["default"].Cache;
	};

	TextureSource.prototype.removeEventHandlers = function removeEventHandlers(textureData) {
		if (textureData == null) {
			return;
		}

		textureData.removeEventHandler(_LoadEvent2["default"].SUCCESS, this.handleLoadEvent.asDelegate(this));
		textureData.removeEventHandler(_LoadEvent2["default"].FAILURE, this.handleErrorEvent.asDelegate(this));
	};

	TextureSource.fromFile = function fromFile(path, cachePolicy) {
		return new TextureSource(path, true, cachePolicy);
	};

	return TextureSource;
})(_ImageSource3["default"]);

exports["default"] = TextureSource;
module.exports = exports["default"];

},{"../Engine":44,"../EngineMath":45,"../LoadEvent":53,"../ProgressEvent":58,"../Size":60,"./ImageSource":149,"./TextureCachePolicy":159,"./TextureData":160,"babel-runtime/helpers/class-call-check":7,"babel-runtime/helpers/inherits":9,"babel-runtime/helpers/interop-require-default":11}],162:[function(require,module,exports){
"use strict";

exports.__esModule = true;
var VerticalAlignment = {
	"Top": 0,
	"Center": 0.5,
	"Bottom": 1
};

exports["default"] = VerticalAlignment;
module.exports = exports["default"];

},{}]},{},[49,39])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
